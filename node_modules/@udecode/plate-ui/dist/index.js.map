{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/registry/index.ts","../src/utils/registry/schema.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-rsc.ts","../src/commands/diff.ts","../src/commands/init.ts","../src/utils/templates.ts","../src/utils/get-package-info.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\n\nimport { add } from './commands/add';\nimport { diff } from './commands/diff';\nimport { init } from './commands/init';\nimport { getPackageInfo } from './utils/get-package-info';\n\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\nasync function main() {\n  const packageInfo = await getPackageInfo();\n\n  const program = new Command()\n    .name('plate-ui')\n    .description('add components and dependencies to your project')\n    .version(\n      packageInfo.version || '1.0.0',\n      '-v, --version',\n      'display the version number'\n    );\n\n  program.addCommand(init).addCommand(add).addCommand(diff);\n\n  program.parse();\n}\n\nmain();\n","import { existsSync, promises as fs } from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { execa } from 'execa';\nimport ora from 'ora';\nimport prompts from 'prompts';\nimport * as z from 'zod';\n\nimport { getConfig } from '../utils/get-config';\nimport { getPackageManager } from '../utils/get-package-manager';\nimport { handleError } from '../utils/handle-error';\nimport { logger } from '../utils/logger';\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n  resolveTree,\n} from '../utils/registry';\nimport { transform } from '../utils/transformers';\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n});\n\nexport const add = new Command()\n  .name('add')\n  .description('add a component to your project')\n  .argument('[components...]', 'the components to add')\n  .option('-y, --yes', 'skip confirmation prompt.', true)\n  .option('-o, --overwrite', 'overwrite existing files.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .option('-a, --all', 'add all available components', false)\n  .option('-p, --path <path>', 'the path to add the component to.')\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      });\n\n      const cwd = path.resolve(options.cwd);\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      const config = await getConfig(cwd);\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${chalk.green(\n            `init`\n          )} to create a components.json file.`\n        );\n        process.exit(1);\n      }\n\n      const registryIndex = await getRegistryIndex();\n\n      let selectedComponents = options.all\n        ? registryIndex.map((entry) => entry.name)\n        : options.components;\n      if (!options.components?.length && !options.all) {\n        const { components } = await prompts({\n          type: 'multiselect',\n          name: 'components',\n          message: 'Which components would you like to add?',\n          hint: 'Space to select. A to toggle all. Enter to submit.',\n          instructions: false,\n          choices: registryIndex.map((entry) => ({\n            title: entry.name,\n            value: entry.name,\n            selected: options.all\n              ? true\n              : options.components?.includes(entry.name),\n          })),\n        });\n        selectedComponents = components;\n      }\n\n      if (!selectedComponents?.length) {\n        logger.warn('No components selected. Exiting.');\n        process.exit(0);\n      }\n\n      const tree = await resolveTree(registryIndex, selectedComponents);\n      const payload = await fetchTree(config.style, tree);\n      const baseColor = await getRegistryBaseColor(config.tailwind.baseColor);\n\n      if (payload.length === 0) {\n        logger.warn('Selected components not found. Exiting.');\n        process.exit(0);\n      }\n\n      if (!options.yes) {\n        const { proceed } = await prompts({\n          type: 'confirm',\n          name: 'proceed',\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        });\n\n        if (!proceed) {\n          process.exit(0);\n        }\n      }\n\n      const spinner = ora(`Installing components...`).start();\n      for (const item of payload) {\n        spinner.text = `Installing ${item.name}...`;\n        const targetDir = await getItemTargetPath(\n          config,\n          item,\n          options.path ? path.resolve(cwd, options.path) : undefined\n        );\n\n        if (!targetDir) {\n          continue;\n        }\n\n        if (!existsSync(targetDir)) {\n          await fs.mkdir(targetDir, { recursive: true });\n        }\n\n        const existingComponent = item.files.filter((file) =>\n          existsSync(path.resolve(targetDir, file.name))\n        );\n\n        if (existingComponent.length > 0 && !options.overwrite) {\n          if (selectedComponents.includes(item.name)) {\n            spinner.stop();\n            const { overwrite } = await prompts({\n              type: 'confirm',\n              name: 'overwrite',\n              message: `Component ${item.name} already exists. Would you like to overwrite?`,\n              initial: false,\n            });\n\n            if (!overwrite) {\n              logger.info(\n                `Skipped ${item.name}. To overwrite, run with the ${chalk.green(\n                  '--overwrite'\n                )} flag.`\n              );\n              continue;\n            }\n\n            spinner.start(`Installing ${item.name}...`);\n          } else {\n            continue;\n          }\n        }\n\n        for (const file of item.files) {\n          const filePath = path.resolve(targetDir, file.name);\n\n          // Run transformers.\n          const content = await transform({\n            filename: file.name,\n            raw: file.content,\n            config,\n            baseColor,\n          });\n\n          await fs.writeFile(filePath, content);\n        }\n\n        // Install dependencies.\n        if (item.dependencies?.length) {\n          const packageManager = await getPackageManager(cwd);\n          await execa(\n            packageManager,\n            [\n              packageManager === 'npm' ? 'install' : 'add',\n              ...item.dependencies,\n            ],\n            {\n              cwd,\n            }\n          );\n        }\n      }\n      spinner.succeed(`Done.`);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n","import path from 'path';\nimport { cosmiconfig } from 'cosmiconfig';\nimport { loadConfig } from 'tsconfig-paths';\nimport * as z from 'zod';\n\nimport { resolveImport } from './resolve-import';\n\n/**\n * This module is primarily concerned with loading and validating a project's\n * configuration. It makes use of `cosmiconfig` to find and load a configuration\n * file, in this case, it's looking for a `components.json` file in the root\n * directory of your project. The schema for this config file is defined with\n * the `zod` library. In case there's no configuration file available, it\n * provides a set of default paths and configuration options.\n */\n\nexport const DEFAULT_STYLE = 'default';\nexport const DEFAULT_COMPONENTS = '@/components';\nexport const DEFAULT_UTILS = '@/lib/utils';\nexport const DEFAULT_TAILWIND_CSS = 'src/styles/globals.css';\nexport const DEFAULT_TAILWIND_CONFIG = 'tailwind.config.js';\nexport const DEFAULT_TAILWIND_BASE_COLOR = 'slate';\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig('components', {\n  searchPlaces: ['components.json'],\n});\n\nexport const rawConfigSchema = z.object({\n  $schema: z.string().optional(),\n  style: z.string(),\n  rsc: z.coerce.boolean().default(false),\n  tailwind: z.object({\n    config: z.string(),\n    css: z.string(),\n    baseColor: z.string(),\n    cssVariables: z.boolean().default(true),\n  }),\n  aliases: z.object({\n    components: z.string(),\n    utils: z.string(),\n  }),\n});\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>;\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n  }),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd);\n\n  if (!config) {\n    return null;\n  }\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd);\n\n  if (tsConfig.resultType === 'failed') {\n    throw new Error(\n      `Failed to load tsconfig.json. ${tsConfig.message ?? ''}`.trim()\n    );\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases['utils'], tsConfig),\n      components: await resolveImport(config.aliases['components'], tsConfig),\n    },\n  });\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd);\n\n    if (!configResult) {\n      return null;\n    }\n\n    return rawConfigSchema.parse(configResult.config);\n  } catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`);\n  }\n}\n","import { createMatchPath } from 'tsconfig-paths';\n\nimport type { ConfigLoaderSuccessResult } from 'tsconfig-paths';\n\n/**\n * This module exports a function that helps to resolve import paths based on\n * the configurations provided in tsconfig.json. This could be useful in cases\n * where the project is using TypeScript path aliases.\n */\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    ['.ts', '.tsx']\n  );\n}\n","import { detect } from '@antfu/ni';\n\n/**\n * This script uses `@antfu/ni` to automatically detect the package manager used\n * in the current project (yarn, pnpm, or npm).\n */\nexport async function getPackageManager(\n  targetDir: string\n): Promise<'yarn' | 'pnpm' | 'bun' | 'npm'> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\n\n  if (packageManager === 'yarn@berry') return 'yarn';\n  if (packageManager === 'pnpm@6') return 'pnpm';\n  if (packageManager === 'bun') return 'bun';\n\n  return packageManager ?? 'npm';\n}\n","/* eslint-disable no-console */\nimport chalk from 'chalk';\n\n/**\n * This is a simple logging utility, which wraps console.log and\n * prefixes messages with colored severity levels.\n * This can be used throughout the project to log informative, warning, error,\n * and success messages in a consistent way.\n */\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  break() {\n    console.log('');\n  },\n};\n","/* eslint-disable unicorn/no-process-exit */\nimport { logger } from './logger';\n\n/**\n * This module exports a function for handling errors in a standardized way\n * across the project. It logs the error message and then terminates the process\n * with a non-zero exit code.\n */\nexport function handleError(error: unknown) {\n  if (typeof error === 'string') {\n    logger.error(error);\n    process.exit(1);\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.error('Something went wrong. Please try again.');\n  process.exit(1);\n}\n","/* eslint-disable turbo/no-undeclared-env-vars,no-console */\n\nimport path from 'path';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport fetch from 'node-fetch';\nimport * as z from 'zod';\n\nimport { Config } from '../get-config';\nimport {\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemWithContentSchema,\n  registryWithContentSchema,\n  stylesSchema,\n} from './schema';\n\nconst baseUrl = process.env.COMPONENTS_REGISTRY_URL ?? 'https://platejs.org';\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined;\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry(['index.json']);\n\n    return registryIndexSchema.parse(result);\n  } catch (error) {\n    throw new Error(`Failed to fetch components from registry.`);\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry(['styles/index.json']);\n\n    return stylesSchema.parse(result);\n  } catch (error) {\n    throw new Error(`Failed to fetch styles from registry.`);\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: 'slate',\n      label: 'Slate',\n    },\n    {\n      name: 'gray',\n      label: 'Gray',\n    },\n    {\n      name: 'zinc',\n      label: 'Zinc',\n    },\n    {\n      name: 'neutral',\n      label: 'Neutral',\n    },\n    {\n      name: 'stone',\n      label: 'Stone',\n    },\n  ];\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`]);\n\n    return registryBaseColorSchema.parse(result);\n  } catch (error) {\n    throw new Error(`Failed to fetch base color from registry.`);\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = [];\n\n  for (const name of names) {\n    const entry = index.find((e) => e.name === name);\n\n    if (!entry) {\n      continue;\n    }\n\n    tree.push(entry);\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies);\n      tree.push(...dependencies);\n    }\n  }\n\n  return tree.filter(\n    (component, i, self) =>\n      self.findIndex((c) => c.name === component.name) === i\n  );\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`);\n    const result = await fetchRegistry(paths);\n\n    return registryWithContentSchema.parse(result);\n  } catch (error) {\n    throw new Error(`Failed to fetch tree from registry.`);\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemWithContentSchema>, 'type'>,\n  override?: string\n) {\n  // Allow overrides for all items but ui.\n  if (override && item.type !== 'components:plate-ui') {\n    return override;\n  }\n\n  const [parent, type] = item.type.split(':');\n  if (!(parent in config.resolvedPaths)) {\n    return null;\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  );\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (p) => {\n        const response = await fetch(`${baseUrl}/registry/${p}`, {\n          agent,\n        });\n        return await response.json();\n      })\n    );\n\n    return results;\n  } catch (error) {\n    console.log(error);\n    throw new Error(`Failed to fetch registry from ${baseUrl}.`);\n  }\n}\n","import * as z from 'zod';\n\n// TODO: Extract this to a shared package.\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(z.string()),\n  type: z.enum([\n    'components:plate-ui',\n    'components:component',\n    'components:example',\n  ]),\n});\n\nexport const registryIndexSchema = z.array(registryItemSchema);\n\nexport const registryItemWithContentSchema = registryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const registryWithContentSchema = z.array(registryItemWithContentSchema);\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n);\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n});\n","import { promises as fs } from 'fs';\nimport { tmpdir } from 'os';\nimport path from 'path';\nimport { Project, QuoteKind, ScriptKind } from 'ts-morph';\nimport * as z from 'zod';\n\nimport { Config } from '../get-config';\nimport { registryBaseColorSchema } from '../registry/schema';\nimport { transformCssVars } from './transform-css-vars';\nimport { transformImport } from './transform-import';\nimport { transformRsc } from './transform-rsc';\n\nimport type { SourceFile } from 'ts-morph';\n\nexport type TransformOpts = {\n  filename: string;\n  raw: string;\n  config: Config;\n  baseColor?: z.infer<typeof registryBaseColorSchema>;\n};\n\nexport type Transformer = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile;\n  }\n) => Promise<SourceFile>;\n\nconst transformers: Transformer[] = [\n  transformImport,\n  transformRsc,\n  transformCssVars,\n];\n\nconst project = new Project({\n  compilerOptions: {},\n  manipulationSettings: {\n    quoteKind: QuoteKind.Single,\n  },\n});\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'plate-'));\n  return path.join(dir, filename);\n}\n\nexport async function transform(opts: TransformOpts) {\n  const tempFile = await createTempSourceFile(opts.filename);\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  });\n\n  for (const transformer of transformers) {\n    transformer({ sourceFile, ...opts });\n  }\n\n  return sourceFile.getFullText();\n}\n","import { SyntaxKind } from 'ts-morph';\nimport * as z from 'zod';\n\nimport { registryBaseColorSchema } from '../registry/schema';\nimport { Transformer } from '../transformers';\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile;\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText();\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/'/g, '').replace(/\"/g, ''),\n        baseColor.inlineColors\n      );\n      node.replaceWithText(`'${valueWithColorMapping.trim()}'`);\n    }\n  });\n\n  return sourceFile;\n};\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes('/') && !className.includes(':')) {\n    return [null, className, null];\n  }\n\n  const parts: (string | null)[] = [];\n  // First we split to find the alpha.\n  const [rest, alpha] = className.split('/');\n\n  // Check if rest has a colon.\n  if (!rest.includes(':')) {\n    return [null, rest, alpha];\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(':');\n\n  // We take the last item from the split as the name.\n  const name = split.pop();\n\n  // We glue back the rest of the split.\n  const variant = split.join(':');\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null);\n\n  return parts;\n}\n\nconst PREFIXES = ['bg-', 'text-', 'border-', 'ring-offset-', 'ring-'];\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>['inlineColors']\n) {\n  // Handle border classes.\n  if (input.includes(' border ')) {\n    input = input.replace(' border ', ' border border-border ');\n  }\n\n  // Build color mappings.\n  const classNames = input.split(' ');\n  const lightMode = new Set<string>();\n  const darkMode = new Set<string>();\n  for (const className of classNames) {\n    const [variant, value, modifier] = splitClassName(className);\n    const prefix = PREFIXES.find((pre) => value?.startsWith(pre));\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className);\n      }\n      continue;\n    }\n\n    const needle = value?.replace(prefix, '');\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : '')\n      );\n\n      darkMode.add(\n        ['dark', variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : '')\n      );\n      continue;\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className);\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(' ').trim();\n}\n","import { Transformer } from '.';\n\nexport const transformImport: Transformer = async ({ sourceFile, config }) => {\n  const importDeclarations = sourceFile.getImportDeclarations();\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = importDeclaration.getModuleSpecifierValue();\n\n    // Replace @/registry/[style] with the components alias.\n    if (moduleSpecifier.startsWith('@/registry/')) {\n      importDeclaration.setModuleSpecifier(\n        moduleSpecifier.replace(\n          /^@\\/registry\\/[^/]+/,\n          config.aliases.components\n        )\n      );\n    }\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (moduleSpecifier == '@/lib/utils') {\n      const namedImports = importDeclaration.getNamedImports();\n      const cnImport = namedImports.find((i) => i.getName() === 'cn');\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(/^@\\/lib\\/utils/, config.aliases.utils)\n        );\n      }\n    }\n  }\n\n  return sourceFile;\n};\n","import { SyntaxKind } from 'ts-morph';\n\nimport { Transformer } from '.';\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile;\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement);\n  if (first?.getText() === `'use client'`) {\n    first.remove();\n  }\n\n  return sourceFile;\n};\n","import { existsSync, promises as fs } from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { diffLines } from 'diff';\nimport * as z from 'zod';\n\nimport { Config, getConfig } from '../utils/get-config';\nimport { handleError } from '../utils/handle-error';\nimport { logger } from '../utils/logger';\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from '../utils/registry';\nimport { registryIndexSchema } from '../utils/registry/schema';\nimport { transform } from '../utils/transformers';\n\nimport type { Change } from 'diff';\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n});\n\nexport const diff = new Command()\n  .name('diff')\n  .description('check for updates against the registry')\n  .argument('[component]', 'the component name')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      });\n\n      const cwd = path.resolve(options.cwd);\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      const config = await getConfig(cwd);\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${chalk.green(\n            `init`\n          )} to create a components.json file.`\n        );\n        process.exit(1);\n      }\n\n      const registryIndex = await getRegistryIndex();\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components;\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files) {\n            const filePath = path.resolve(targetDir, file);\n            if (existsSync(filePath)) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        // Check for updates.\n        const componentsWithUpdates = [];\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config);\n          if (changes.length > 0) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            });\n          }\n        }\n\n        if (componentsWithUpdates.length === 0) {\n          logger.info('No updates found.');\n          process.exit(0);\n        }\n\n        logger.info('The following components have updates available:');\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`);\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`);\n          }\n        }\n        logger.break();\n        logger.info(\n          `Run ${chalk.green(`diff <component>`)} to see the changes.`\n        );\n        process.exit(0);\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        (item) => item.name === options.component\n      );\n\n      if (!component) {\n        logger.error(\n          `The component ${chalk.green(options.component)} does not exist.`\n        );\n        process.exit(1);\n      }\n\n      const changes = await diffComponent(component, config);\n\n      if (changes.length === 0) {\n        logger.info(`No updates found for ${options.component}.`);\n        process.exit(0);\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`);\n        await printDiff(change.patch);\n        logger.info('');\n      }\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config\n) {\n  const payload = await fetchTree(config.style, [component]);\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor);\n\n  const changes = [];\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item);\n\n    if (!targetDir) {\n      continue;\n    }\n\n    for (const file of item.files) {\n      const filePath = path.resolve(targetDir, file.name);\n\n      if (!existsSync(filePath)) {\n        continue;\n      }\n\n      const fileContent = await fs.readFile(filePath, 'utf8');\n\n      const registryContent = await transform({\n        filename: file.name,\n        raw: file.content,\n        config,\n        baseColor,\n      });\n\n      const patch = diffLines(registryContent, fileContent);\n      if (patch.length > 1) {\n        changes.push({\n          file: file.name,\n          filePath,\n          patch,\n        });\n      }\n    }\n  }\n\n  return changes;\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(chalk.green(part.value));\n      }\n      if (part.removed) {\n        return process.stdout.write(chalk.red(part.value));\n      }\n\n      return process.stdout.write(part.value);\n    }\n  });\n}\n","/* eslint-disable unicorn/no-process-exit */\n\nimport { existsSync, promises as fs } from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { execa } from 'execa';\nimport ora from 'ora';\nimport prompts from 'prompts';\nimport * as z from 'zod';\n\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n} from '../utils/get-config';\nimport { getPackageManager } from '../utils/get-package-manager';\nimport { handleError } from '../utils/handle-error';\nimport { logger } from '../utils/logger';\nimport {\n  getRegistryBaseColor,\n  getRegistryBaseColors,\n  getRegistryStyles,\n} from '../utils/registry';\nimport * as templates from '../utils/templates';\n\nimport type { Config } from '../utils/get-config';\n\nconst PROJECT_DEPENDENCIES = [\n  'tailwindcss-animate',\n  'class-variance-authority',\n  'clsx',\n  'tailwind-merge',\n];\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n});\n\nexport const init = new Command()\n  .name('init')\n  .description('initialize your project and install dependencies')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts);\n      const cwd = path.resolve(options.cwd);\n\n      // Ensure target directory exists.\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      // Read config.\n      const existingConfig = await getConfig(cwd);\n      const config = await promptForConfig(cwd, existingConfig, options.yes);\n\n      await runInit(cwd, config);\n\n      logger.info('');\n      logger.info(\n        `${chalk.green('Success!')} Project initialization completed.`\n      );\n      logger.info('');\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nexport async function promptForConfig(\n  cwd: string,\n  defaultConfig: Config | null = null,\n  skip = false\n) {\n  const highlight = (text: string) => chalk.cyan(text);\n\n  const styles = await getRegistryStyles();\n  const baseColors = await getRegistryBaseColors();\n\n  const options = await prompts([\n    {\n      type: 'select',\n      name: 'style',\n      message: `Which ${highlight('style')} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: 'select',\n      name: 'tailwindBaseColor',\n      message: `Which color would you like to use as ${highlight(\n        'base color'\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: 'text',\n      name: 'tailwindCss',\n      message: `Where is your ${highlight('global CSS')} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: 'toggle',\n      name: 'tailwindCssVariables',\n      message: `Would you like to use ${highlight(\n        'CSS variables'\n      )} for colors?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'text',\n      name: 'tailwindConfig',\n      message: `Where is your ${highlight('tailwind.config.js')} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: 'text',\n      name: 'components',\n      message: `Configure the import alias for ${highlight('components')}:`,\n      initial: defaultConfig?.aliases['components'] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: 'text',\n      name: 'utils',\n      message: `Configure the import alias for ${highlight('utils')}:`,\n      initial: defaultConfig?.aliases['utils'] ?? DEFAULT_UTILS,\n    },\n    {\n      type: 'toggle',\n      name: 'rsc',\n      message: `Are you using ${highlight('React Server Components')}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: 'yes',\n      inactive: 'no',\n    },\n  ]);\n\n  const config = rawConfigSchema.parse({\n    $schema: 'https://platejs.org/schema.json',\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n    },\n    rsc: options.rsc,\n    tsx: true,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n    },\n  });\n\n  if (!skip) {\n    const { proceed } = await prompts({\n      type: 'confirm',\n      name: 'proceed',\n      message: `Write configuration to ${highlight(\n        'components.json'\n      )}. Proceed?`,\n      initial: true,\n    });\n\n    if (!proceed) {\n      process.exit(0);\n    }\n  }\n\n  // Write to file.\n  logger.info('');\n  const spinner = ora(`Writing components.json...`).start();\n  const targetPath = path.resolve(cwd, 'components.json');\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf8');\n  spinner.succeed();\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function runInit(cwd: string, config: Config) {\n  const spinner = ora(`Initializing project...`)?.start();\n\n  // Ensure all resolved paths directories exist.\n  for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n    // Determine if the path is a file or directory.\n    // TODO: is there a better way to do this?\n    let dirname = path.extname(resolvedPath)\n      ? path.dirname(resolvedPath)\n      : resolvedPath;\n\n    // If the utils alias is set to something like \"@/lib/utils\",\n    // assume this is a file and remove the \"utils\" file name.\n    // TODO: In future releases we should add support for individual utils.\n    if (key === 'utils' && resolvedPath.endsWith('/utils')) {\n      // Remove /utils at the end.\n      dirname = dirname.replace(/\\/utils$/, '');\n    }\n\n    if (!existsSync(dirname)) {\n      await fs.mkdir(dirname, { recursive: true });\n    }\n  }\n\n  // Write tailwind config.\n  await fs.writeFile(\n    config.resolvedPaths.tailwindConfig,\n    config.tailwind.cssVariables\n      ? templates.TAILWIND_CONFIG_WITH_VARIABLES\n      : templates.TAILWIND_CONFIG,\n    'utf8'\n  );\n\n  // Write css file.\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor);\n  if (baseColor) {\n    await fs.writeFile(\n      config.resolvedPaths.tailwindCss,\n      config.tailwind.cssVariables\n        ? baseColor.cssVarsTemplate\n        : baseColor.inlineColorsTemplate,\n      'utf8'\n    );\n  }\n\n  // Write cn file.\n  await fs.writeFile(\n    `${config.resolvedPaths.utils}.ts`,\n    templates.UTILS,\n    'utf8'\n  );\n\n  spinner?.succeed();\n\n  // Install dependencies.\n  const dependenciesSpinner = ora(`Installing dependencies...`)?.start();\n  const packageManager = await getPackageManager(cwd);\n\n  // TODO: add support for other icon libraries.\n  const deps = [\n    ...PROJECT_DEPENDENCIES,\n    config.style === 'new-york' ? '@radix-ui/react-icons' : 'lucide-react',\n  ];\n\n  await execa(\n    packageManager,\n    [packageManager === 'npm' ? 'install' : 'add', ...deps],\n    {\n      cwd,\n    }\n  );\n  dependenciesSpinner?.succeed();\n}\n","export const UTILS = `import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n`;\n\nexport const TAILWIND_CONFIG = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n}`;\n\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n\t],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n}`;\n","import path from 'path';\nimport fs from 'fs-extra';\nimport { type PackageJson } from 'type-fest';\n\n/**\n * This is a simple utility that reads and returns the contents of your\n * project's package.json file.\n */\nexport function getPackageInfo() {\n  const packageJsonPath = path.join('package.json');\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson;\n}\n"],"mappings":"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","names":["Command","fs","path","chalk","z","path","z","path","path","SyntaxKind","path","path","chalk","components","fs","existsSync","fs","path","chalk","Command","z","Command","path","existsSync","chalk","component","changes","fs","diff","existsSync","fs","path","chalk","Command","execa","ora","prompts","z","Command","path","existsSync","chalk","prompts","ora","fs","execa","path","fs","Command"]}