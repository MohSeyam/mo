"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  defaultsDeepToNodes: () => defaultsDeepToNodes,
  isType: () => isType,
  moveSelectionByOffset: () => moveSelectionByOffset
});
module.exports = __toCommonJS(src_exports);

// src/lib/defaultsDeepToNodes.ts
var import_plate_core = require("@udecode/plate-core");
var import_defaults = __toESM(require("lodash/defaults.js"));
var defaultsDeepToNodes = (options) => {
  (0, import_plate_core.applyDeepToNodes)({ ...options, apply: import_defaults.default });
};

// src/lib/isType.ts
var import_castArray = __toESM(require("lodash/castArray.js"));
var isType = (editor, node, key) => {
  const keys = (0, import_castArray.default)(key);
  const types = [];
  keys.forEach((_key) => types.push(editor.getType({ key: _key })));
  return types.includes(node?.type);
};

// src/lib/moveSelectionByOffset.ts
var import_plate_core2 = require("@udecode/plate-core");
var import_slate = require("@udecode/slate");
var import_slate2 = require("slate");
var moveSelectionByOffset = (editor, {
  event,
  query = () => true
}) => {
  const { selection } = editor;
  if (!selection || import_slate2.Range.isExpanded(selection) || !query(editor)) {
    return false;
  }
  if ((0, import_plate_core2.isHotkey)("left", event)) {
    event.preventDefault();
    (0, import_slate.moveSelection)(editor, { reverse: true, unit: "offset" });
    return true;
  }
  if ((0, import_plate_core2.isHotkey)("right", event)) {
    event.preventDefault();
    (0, import_slate.moveSelection)(editor, { unit: "offset" });
    return true;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultsDeepToNodes,
  isType,
  moveSelectionByOffset
});
//# sourceMappingURL=index.js.map