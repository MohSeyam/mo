// src/react/PlateElement.tsx
import React from "react";
import {
  omitPluginContext,
  usePlateStore
} from "@udecode/plate-core/react";
import { Box, useComposedRef } from "@udecode/react-utils";
import { isBlock } from "@udecode/slate";
import { clsx } from "clsx";
var usePlateElement = (props) => {
  const {
    attributes,
    element,
    elementToAttributes,
    nodeProps,
    path,
    ...rootProps
  } = omitPluginContext(props);
  const mounted = usePlateStore().get.isMounted();
  const block = React.useMemo(
    () => mounted && !!element.id && isBlock(props.editor, element),
    [element, props.editor, mounted]
  );
  return {
    props: {
      ...attributes,
      ...rootProps,
      ...nodeProps,
      ...elementToAttributes?.(element),
      className: clsx(props.className, nodeProps?.className),
      "data-block-id": block ? element.id : void 0,
      style: {
        position: "relative",
        ...props.style,
        ...nodeProps?.style
      }
    },
    ref: useComposedRef(props.ref, attributes.ref)
  };
};
var PlateElement = React.forwardRef(
  (props, ref) => {
    const { props: rootProps, ref: rootRef } = usePlateElement({
      ...props,
      ref
    });
    const { ...rest } = rootProps;
    return /* @__PURE__ */ React.createElement(Box, { ...rest, ref: rootRef });
  }
);
PlateElement.displayName = "PlateElement";

// src/react/PlateLeaf.tsx
import React2 from "react";
import {
  omitPluginContext as omitPluginContext2
} from "@udecode/plate-core/react";
import { Text, useComposedRef as useComposedRef2 } from "@udecode/react-utils";
import { clsx as clsx2 } from "clsx";
var usePlateLeaf = (props) => {
  const { attributes, leaf, leafToAttributes, nodeProps, text, ...rootProps } = omitPluginContext2(props);
  return {
    props: {
      ...attributes,
      ...rootProps,
      ...nodeProps,
      ...leafToAttributes?.(leaf),
      className: clsx2(props.className, nodeProps?.className)
    },
    ref: useComposedRef2(props.ref, attributes.ref)
  };
};
var PlateLeaf = React2.forwardRef(
  (props, ref) => {
    const { props: rootProps, ref: rootRef } = usePlateLeaf({ ...props, ref });
    return /* @__PURE__ */ React2.createElement(Text, { ...rootProps, ref: rootRef });
  }
);
PlateLeaf.displayName = "PlateLeaf";

// src/react/createNodeHOC.tsx
import React3 from "react";
var createNodeHOC = (HOC) => (Component, props) => function hoc(childrenProps) {
  return /* @__PURE__ */ React3.createElement(HOC, { ...{ ...childrenProps, ...props } }, /* @__PURE__ */ React3.createElement(Component, { ...childrenProps }));
};

// src/react/createNodesHOC.tsx
import castArray from "lodash/castArray.js";
import merge from "lodash/merge.js";
var createHOC = (withHOC) => {
  return (components, options) => {
    const _components = { ...components };
    const optionsByKey = {};
    const optionsList = castArray(options);
    optionsList.forEach(({ key, keys, ...opt }) => {
      const _keys = key ? [key] : keys ?? Object.keys(_components);
      _keys.forEach((_key) => {
        optionsByKey[_key] = merge(optionsByKey[_key], opt);
      });
    });
    Object.keys(optionsByKey).forEach((key) => {
      if (!_components[key]) return;
      _components[key] = withHOC(_components[key], optionsByKey[key]);
    });
    return _components;
  };
};
var createNodesHOC = (HOC) => {
  return createHOC(createNodeHOC(HOC));
};
var createNodesWithHOC = (withHOC) => {
  return createHOC(withHOC);
};

// src/react/getLastBlockDOMNode.ts
import { toDOMNode } from "@udecode/slate-react";
import { getBlocks } from "@udecode/slate-utils";
var getLastBlockDOMNode = (editor) => {
  return toDOMNode(editor, getBlocks(editor).at(-1)[0]);
};

// src/react/selectEditor.ts
import {
  getEndPoint,
  getStartPoint,
  select
} from "@udecode/slate";
import { focusEditor } from "@udecode/slate-react";
var selectEditor = (editor, { at, edge, focus }) => {
  if (focus) {
    focusEditor(editor);
  }
  let location = at;
  if (edge === "start") {
    location = getStartPoint(editor, []);
  }
  if (edge === "end") {
    location = getEndPoint(editor, []);
  }
  if (location) {
    select(editor, location);
  }
};

// src/react/selectSiblingNodePoint.ts
import { setSelection } from "@udecode/slate";
import { findPath, focusEditor as focusEditor2 } from "@udecode/slate-react";
import {
  getNextNodeStartPoint,
  getPreviousNodeEndPoint
} from "@udecode/slate-utils";
var selectSiblingNodePoint = (editor, {
  at,
  focus = true,
  node,
  reverse
} = {}) => {
  if (node) {
    at = findPath(editor, node);
  }
  if (!at) return;
  const point = reverse ? getPreviousNodeEndPoint(editor, at) : getNextNodeStartPoint(editor, at);
  if (!point) return;
  setSelection(editor, {
    anchor: point,
    focus: point
  });
  if (focus) {
    focusEditor2(editor);
  }
};

// src/react/useEditorString.ts
import { useEditorSelector } from "@udecode/plate-core/react";
import { getEditorString } from "@udecode/slate";
var useEditorString = () => {
  return useEditorSelector((editor) => getEditorString(editor, []), []);
};

// src/react/useFormInputProps.ts
var useFormInputProps = (options) => {
  if (!options) return { props: {} };
  const { preventDefaultOnEnterKeydown } = options;
  const handleEnterKeydownCapture = (e) => {
    if (e.key === "Enter" || e.keyCode === 13) {
      e.preventDefault();
    }
  };
  return {
    props: {
      onKeyDownCapture: preventDefaultOnEnterKeydown ? (e) => handleEnterKeydownCapture(e) : void 0
    }
  };
};

// src/react/useLastBlock.ts
import { useEditorSelector as useEditorSelector2 } from "@udecode/plate-core/react";
import { getBlocks as getBlocks2 } from "@udecode/slate-utils";
var useLastBlock = ({
  deps,
  enabled
}) => {
  return useEditorSelector2(
    (editor) => enabled ? getBlocks2(editor).at(-1)[0] : null,
    [enabled, ...deps || []]
  );
};

// src/react/useLastBlockDOMNode.ts
import { useMemo } from "react";
import { toDOMNode as toDOMNode2 } from "@udecode/slate-react";
var useLastBlockDOMNode = (editor, { deps, enabled }) => {
  const lastBlock = useLastBlock({ deps, enabled });
  const anchorElement = useMemo(
    () => lastBlock ? toDOMNode2(editor, lastBlock) : null,
    [editor, lastBlock]
  );
  return anchorElement;
};

// src/react/useMarkToolbarButton.ts
import { useEditorRef, useEditorSelector as useEditorSelector3 } from "@udecode/plate-core/react";
import { focusEditor as focusEditor3 } from "@udecode/slate-react";
import { isMarkActive } from "@udecode/slate-utils";
var useMarkToolbarButtonState = ({
  clear,
  nodeType
}) => {
  const pressed = useEditorSelector3(
    (editor) => isMarkActive(editor, nodeType),
    [nodeType]
  );
  return {
    clear,
    nodeType,
    pressed
  };
};
var useMarkToolbarButton = (state) => {
  const editor = useEditorRef();
  return {
    props: {
      pressed: state.pressed,
      onClick: () => {
        editor.tf.toggle.mark({ key: state.nodeType, clear: state.clear });
        focusEditor3(editor);
      },
      onMouseDown: (e) => {
        e.preventDefault();
      }
    }
  };
};

// src/react/usePlaceholder.ts
import { useEditorRef as useEditorRef2 } from "@udecode/plate-core/react";
import {
  isCollapsed,
  isElementEmpty,
  queryNode
} from "@udecode/slate";
import { useComposing, useFocused, useSelected } from "slate-react";
var usePlaceholderState = ({
  element,
  hideOnBlur = true,
  path,
  query
}) => {
  const focused = useFocused();
  const selected = useSelected();
  const composing = useComposing();
  const editor = useEditorRef2();
  const isEmptyBlock = isElementEmpty(editor, element) && !composing;
  const enabled = isEmptyBlock && (!query || queryNode([element, path], query)) && (!hideOnBlur || isCollapsed(editor.selection) && hideOnBlur && focused && selected);
  return {
    enabled
  };
};

// src/react/useRemoveNodeButton.ts
import { useEditorRef as useEditorRef3 } from "@udecode/plate-core/react";
import { removeNodes } from "@udecode/slate";
import { findPath as findPath2 } from "@udecode/slate-react";
var useRemoveNodeButton = ({ element }) => {
  const editor = useEditorRef3();
  return {
    props: {
      onClick: () => {
        const path = findPath2(editor, element);
        removeNodes(editor, { at: path });
      },
      onMouseDown: (e) => {
        e.preventDefault();
      }
    }
  };
};

// src/react/useSelection.ts
import { useEditorSelector as useEditorSelector4 } from "@udecode/plate-core/react";
import {
  isRangeAcrossBlocks,
  isRangeInSameBlock,
  isSelectionExpanded
} from "@udecode/slate-utils";
function useSelectionCollapsed() {
  return useEditorSelector4((editor) => !isSelectionExpanded(editor), []);
}
function useSelectionExpanded() {
  return useEditorSelector4((editor) => isSelectionExpanded(editor), []);
}
function useSelectionWithinBlock() {
  return useEditorSelector4((editor) => isRangeInSameBlock(editor), []);
}
function useSelectionAcrossBlocks() {
  return useEditorSelector4((editor) => isRangeAcrossBlocks(editor), []);
}

// src/react/useSelectionFragment.ts
import { useEditorSelector as useEditorSelector5 } from "@udecode/plate-core/react";
import {
  getFragmentProp,
  getSelectionFragment
} from "@udecode/slate-utils";
var useSelectionFragment = (options) => {
  return useEditorSelector5((editor) => {
    return getSelectionFragment(editor, options);
  }, []);
};
var useSelectionFragmentProp = ({
  structuralTypes,
  ...options
} = {}) => {
  return useEditorSelector5((editor) => {
    const fragment = getSelectionFragment(editor, { structuralTypes });
    return getFragmentProp(fragment, options);
  }, []);
};
export {
  PlateElement,
  PlateLeaf,
  createNodeHOC,
  createNodesHOC,
  createNodesWithHOC,
  getLastBlockDOMNode,
  selectEditor,
  selectSiblingNodePoint,
  useEditorString,
  useFormInputProps,
  useLastBlock,
  useLastBlockDOMNode,
  useMarkToolbarButton,
  useMarkToolbarButtonState,
  usePlaceholderState,
  usePlateElement,
  usePlateLeaf,
  useRemoveNodeButton,
  useSelectionAcrossBlocks,
  useSelectionCollapsed,
  useSelectionExpanded,
  useSelectionFragment,
  useSelectionFragmentProp,
  useSelectionWithinBlock
};
//# sourceMappingURL=index.mjs.map