"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  BaseTextAlignPlugin: () => BaseTextAlignPlugin,
  setAlign: () => setAlign
});
module.exports = __toCommonJS(index_exports);

// src/lib/BaseTextAlignPlugin.ts
var import_plate2 = require("@udecode/plate");

// src/lib/transforms/setAlign.ts
var import_plate = require("@udecode/plate");
var setAlign = (editor, value, setNodesOptions) => {
  const { defaultNodeValue, nodeKey } = editor.getInjectProps(BaseTextAlignPlugin);
  const match = (0, import_plate.getInjectMatch)(
    editor,
    editor.getPlugin({ key: import_plate.KEYS.textAlign })
  );
  if (value === defaultNodeValue) {
    editor.tf.unsetNodes(nodeKey, {
      match,
      ...setNodesOptions
    });
  } else {
    editor.tf.setNodes(
      { [nodeKey]: value },
      {
        match,
        ...setNodesOptions
      }
    );
  }
};

// src/lib/BaseTextAlignPlugin.ts
var BaseTextAlignPlugin = (0, import_plate2.createSlatePlugin)({
  key: import_plate2.KEYS.textAlign,
  inject: {
    isBlock: true,
    nodeProps: {
      defaultNodeValue: "start",
      nodeKey: "align",
      styleKey: "textAlign",
      validNodeValues: ["start", "left", "center", "right", "end", "justify"]
    },
    targetPlugins: [import_plate2.KEYS.p],
    targetPluginToInject: ({ editor }) => ({
      parsers: {
        html: {
          deserializer: {
            parse: ({ element, node }) => {
              if (element.style.textAlign) {
                node[editor.getType(import_plate2.KEYS.textAlign)] = element.style.textAlign;
              }
            }
          }
        }
      }
    })
  }
}).extendTransforms(({ editor }) => ({
  set: (0, import_plate2.bindFirst)(setAlign, editor)
}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BaseTextAlignPlugin,
  setAlign
});
//# sourceMappingURL=index.js.map