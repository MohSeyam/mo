// src/react/FontPlugin.tsx
import { toPlatePlugin } from "@udecode/plate/react";

// src/lib/BaseFontBackgroundColorPlugin.ts
import { createSlatePlugin } from "@udecode/plate";
var BaseFontBackgroundColorPlugin = createSlatePlugin({
  key: "backgroundColor",
  inject: {
    nodeProps: {
      nodeKey: "backgroundColor"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              backgroundColor: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({
          [type]: element.style.backgroundColor
        })
      }
    }
  }
});

// src/lib/BaseFontColorPlugin.ts
import { createSlatePlugin as createSlatePlugin2 } from "@udecode/plate";
var BaseFontColorPlugin = createSlatePlugin2({
  key: "color",
  inject: {
    nodeProps: {
      defaultNodeValue: "black",
      nodeKey: "color"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              color: "*"
            }
          }
        ],
        parse({ element, type }) {
          if (element.style.color) {
            return { [type]: element.style.color };
          }
        }
      }
    }
  }
});

// src/lib/BaseFontFamilyPlugin.ts
import { createSlatePlugin as createSlatePlugin3 } from "@udecode/plate";
var BaseFontFamilyPlugin = createSlatePlugin3({
  key: "fontFamily",
  inject: {
    nodeProps: {
      nodeKey: "fontFamily"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontFamily: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontFamily })
      }
    }
  }
});

// src/lib/BaseFontSizePlugin.ts
import {
  bindFirst,
  createTSlatePlugin
} from "@udecode/plate";

// src/lib/transforms/setFontSize.ts
var setFontSize = (editor, fontSize) => {
  editor.tf.addMarks({
    [BaseFontSizePlugin.key]: fontSize
  });
};

// src/lib/BaseFontSizePlugin.ts
var BaseFontSizePlugin = createTSlatePlugin({
  key: "fontSize",
  inject: {
    nodeProps: {
      nodeKey: "fontSize"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontSize: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontSize })
      }
    }
  }
}).extendApi(({ editor }) => ({
  setMark: bindFirst(setFontSize, editor)
}));

// src/lib/BaseFontWeightPlugin.ts
import { createSlatePlugin as createSlatePlugin4 } from "@udecode/plate";
var BaseFontWeightPlugin = createSlatePlugin4({
  key: "fontWeight",
  inject: {
    nodeProps: {
      nodeKey: "fontWeight"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontWeight: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontWeight })
      }
    }
  }
});

// src/react/FontPlugin.tsx
var FontColorPlugin = toPlatePlugin(BaseFontColorPlugin);
var FontSizePlugin = toPlatePlugin(BaseFontSizePlugin);
var FontFamilyPlugin = toPlatePlugin(BaseFontFamilyPlugin);
var FontBackgroundColorPlugin = toPlatePlugin(
  BaseFontBackgroundColorPlugin
);
var FontWeightPlugin = toPlatePlugin(BaseFontWeightPlugin);

// src/react/hooks/useColorDropdownMenu.ts
import React from "react";
import { useEditorRef, useEditorSelector } from "@udecode/plate/react";
var useColorDropdownMenuState = ({
  closeOnSelect = true,
  colors,
  customColors,
  nodeType
}) => {
  const editor = useEditorRef();
  const selectionDefined = useEditorSelector(
    (editor2) => !!editor2.selection,
    []
  );
  const color = useEditorSelector(
    (editor2) => editor2.api.mark(nodeType),
    [nodeType]
  );
  const [selectedColor, setSelectedColor] = React.useState();
  const [open, setOpen] = React.useState(false);
  const onToggle = React.useCallback(
    (value = !open) => {
      setOpen(value);
    },
    [open, setOpen]
  );
  const updateColor = React.useCallback(
    (value) => {
      if (editor.selection) {
        setSelectedColor(value);
        editor.tf.select(editor.selection);
        editor.tf.focus();
        editor.tf.addMarks({ [nodeType]: value });
      }
    },
    [editor, nodeType]
  );
  const updateColorAndClose = React.useCallback(
    (value) => {
      updateColor(value);
      closeOnSelect && onToggle();
    },
    [closeOnSelect, onToggle, updateColor]
  );
  const clearColor = React.useCallback(() => {
    if (editor.selection) {
      editor.tf.select(editor.selection);
      editor.tf.focus();
      if (selectedColor) {
        editor.tf.removeMarks(nodeType);
      }
      closeOnSelect && onToggle();
    }
  }, [editor, selectedColor, closeOnSelect, onToggle, nodeType]);
  React.useEffect(() => {
    if (selectionDefined) {
      setSelectedColor(color);
    }
  }, [color, selectionDefined]);
  return {
    clearColor,
    color,
    colors,
    customColors,
    open,
    selectedColor,
    updateColor,
    updateColorAndClose,
    onToggle
  };
};
var useColorDropdownMenu = ({
  open,
  onToggle
}) => {
  return {
    buttonProps: {
      pressed: open
    },
    menuProps: {
      open,
      onOpenChange: onToggle
    }
  };
};

// src/react/hooks/useColorInput.ts
import React2 from "react";
var useColorInput = () => {
  const ref = React2.useRef(null);
  const onClick = () => {
    ref.current?.click();
  };
  return {
    childProps: {
      onClick
    },
    inputRef: ref
  };
};

// src/react/hooks/useColorsCustom.ts
import React3 from "react";
import debounce from "lodash/debounce.js";
var useColorsCustomState = ({
  color,
  colors,
  customColors,
  updateCustomColor
}) => {
  const [customColor, setCustomColor] = React3.useState();
  const [value, setValue] = React3.useState(color || "#000000");
  React3.useEffect(() => {
    if (!color || customColors.some((c) => c.value === color) || colors.some((c) => c.value === color)) {
      return;
    }
    setCustomColor(color);
  }, [color, colors, customColors]);
  const computedColors = React3.useMemo(
    () => customColor ? [
      ...customColors,
      {
        isBrightColor: false,
        name: "",
        value: customColor
      }
    ] : customColors,
    [customColor, customColors]
  );
  return {
    computedColors,
    setValue,
    updateCustomColor,
    value
  };
};
var useColorsCustom = ({
  setValue,
  updateCustomColor,
  value
}) => {
  const updateCustomColorDebounced = React3.useCallback(
    debounce(updateCustomColor, 100),
    [updateCustomColor]
  );
  return {
    inputProps: {
      value,
      onChange: (e) => {
        setValue(e.target.value);
        updateCustomColorDebounced(e.target.value);
      }
    },
    menuItemProps: {
      onSelect: (e) => {
        e.preventDefault();
      }
    }
  };
};
export {
  FontBackgroundColorPlugin,
  FontColorPlugin,
  FontFamilyPlugin,
  FontSizePlugin,
  FontWeightPlugin,
  useColorDropdownMenu,
  useColorDropdownMenuState,
  useColorInput,
  useColorsCustom,
  useColorsCustomState
};
//# sourceMappingURL=index.mjs.map