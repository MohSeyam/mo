{"version":3,"sources":["../../src/react/FontPlugin.tsx","../../src/lib/BaseFontBackgroundColorPlugin.ts","../../src/lib/BaseFontColorPlugin.ts","../../src/lib/BaseFontFamilyPlugin.ts","../../src/lib/BaseFontSizePlugin.ts","../../src/lib/transforms/setFontSize.ts","../../src/lib/BaseFontWeightPlugin.ts","../../src/react/hooks/useColorDropdownMenu.ts","../../src/react/hooks/useColorInput.ts","../../src/react/hooks/useColorsCustom.ts"],"sourcesContent":["import { toPlatePlugin } from '@udecode/plate/react';\n\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontFamilyPlugin,\n  BaseFontSizePlugin,\n  BaseFontWeightPlugin,\n} from '../lib';\n\nexport const FontColorPlugin = toPlatePlugin(BaseFontColorPlugin);\n\nexport const FontSizePlugin = toPlatePlugin(BaseFontSizePlugin);\n\nexport const FontFamilyPlugin = toPlatePlugin(BaseFontFamilyPlugin);\n\nexport const FontBackgroundColorPlugin = toPlatePlugin(\n  BaseFontBackgroundColorPlugin\n);\n\nexport const FontWeightPlugin = toPlatePlugin(BaseFontWeightPlugin);\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontBackgroundColorPlugin = createSlatePlugin({\n  key: 'backgroundColor',\n  inject: {\n    nodeProps: {\n      nodeKey: 'backgroundColor',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              backgroundColor: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({\n          [type]: element.style.backgroundColor,\n        }),\n      },\n    },\n  },\n});\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontColorPlugin = createSlatePlugin({\n  key: 'color',\n  inject: {\n    nodeProps: {\n      defaultNodeValue: 'black',\n      nodeKey: 'color',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              color: '*',\n            },\n          },\n        ],\n        parse({ element, type }) {\n          if (element.style.color) {\n            return { [type]: element.style.color };\n          }\n        },\n      },\n    },\n  },\n});\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontFamilyPlugin = createSlatePlugin({\n  key: 'fontFamily',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontFamily',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontFamily: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontFamily }),\n      },\n    },\n  },\n});\n","import {\n  type PluginConfig,\n  bindFirst,\n  createTSlatePlugin,\n} from '@udecode/plate';\n\nimport { setFontSize } from './transforms';\n\nexport type BaseFontSizeConfig = PluginConfig<\n  'fontSize',\n  {},\n  {\n    fontSize: {\n      setMark: (fontSize: string) => void;\n    };\n  }\n>;\n\nexport const BaseFontSizePlugin = createTSlatePlugin({\n  key: 'fontSize',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontSize',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontSize: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontSize }),\n      },\n    },\n  },\n}).extendApi(({ editor }) => ({\n  setMark: bindFirst(setFontSize, editor),\n}));\n","import type { Editor } from '@udecode/plate';\n\nimport { BaseFontSizePlugin } from '../BaseFontSizePlugin';\n\nexport const setFontSize = (editor: Editor, fontSize: string): void => {\n  editor.tf.addMarks({\n    [BaseFontSizePlugin.key]: fontSize,\n  });\n};\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontWeightPlugin = createSlatePlugin({\n  key: 'fontWeight',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontWeight',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontWeight: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontWeight }),\n      },\n    },\n  },\n});\n","import React from 'react';\n\nimport { useEditorRef, useEditorSelector } from '@udecode/plate/react';\n\nexport const useColorDropdownMenuState = ({\n  closeOnSelect = true,\n  colors,\n  customColors,\n  nodeType,\n}: {\n  colors: { isBrightColor: boolean; name: string; value: string }[];\n  customColors: { isBrightColor: boolean; name: string; value: string }[];\n  nodeType: string;\n  closeOnSelect?: boolean;\n}) => {\n  const editor = useEditorRef();\n\n  const selectionDefined = useEditorSelector(\n    (editor) => !!editor.selection,\n    []\n  );\n\n  const color = useEditorSelector(\n    (editor) => editor.api.mark(nodeType) as string,\n    [nodeType]\n  );\n\n  const [selectedColor, setSelectedColor] = React.useState<string>();\n\n  const [open, setOpen] = React.useState(false);\n  const onToggle = React.useCallback(\n    (value = !open) => {\n      setOpen(value);\n    },\n    [open, setOpen]\n  );\n\n  const updateColor = React.useCallback(\n    (value: string) => {\n      if (editor.selection) {\n        setSelectedColor(value);\n\n        editor.tf.select(editor.selection);\n        editor.tf.focus();\n\n        editor.tf.addMarks({ [nodeType]: value });\n      }\n    },\n    [editor, nodeType]\n  );\n\n  const updateColorAndClose = React.useCallback(\n    (value: string) => {\n      updateColor(value);\n      closeOnSelect && onToggle();\n    },\n    [closeOnSelect, onToggle, updateColor]\n  );\n\n  const clearColor = React.useCallback(() => {\n    if (editor.selection) {\n      editor.tf.select(editor.selection);\n      editor.tf.focus();\n\n      if (selectedColor) {\n        editor.tf.removeMarks(nodeType);\n      }\n\n      closeOnSelect && onToggle();\n    }\n  }, [editor, selectedColor, closeOnSelect, onToggle, nodeType]);\n\n  React.useEffect(() => {\n    if (selectionDefined) {\n      setSelectedColor(color);\n    }\n  }, [color, selectionDefined]);\n\n  return {\n    clearColor,\n    color,\n    colors,\n    customColors,\n    open,\n    selectedColor,\n    updateColor,\n    updateColorAndClose,\n    onToggle,\n  };\n};\n\nexport const useColorDropdownMenu = ({\n  open,\n  onToggle,\n}: ReturnType<typeof useColorDropdownMenuState>) => {\n  return {\n    buttonProps: {\n      pressed: open,\n    },\n    menuProps: {\n      open,\n      onOpenChange: onToggle,\n    },\n  };\n};\n","import React from 'react';\n\nexport const useColorInput = () => {\n  const ref = React.useRef<HTMLInputElement | null>(null);\n\n  const onClick = () => {\n    // force click action on the input to open color picker\n    ref.current?.click();\n  };\n\n  return {\n    childProps: {\n      onClick,\n    },\n    inputRef: ref,\n  };\n};\n","import React from 'react';\n\nimport debounce from 'lodash/debounce.js';\n\nexport const useColorsCustomState = ({\n  color,\n  colors,\n  customColors,\n  updateCustomColor,\n}: {\n  colors: any[];\n  customColors: any[];\n  updateCustomColor: (color: string) => void;\n  color?: string;\n}) => {\n  const [customColor, setCustomColor] = React.useState<string>();\n\n  const [value, setValue] = React.useState<string>(color || '#000000');\n\n  React.useEffect(() => {\n    if (\n      !color ||\n      customColors.some((c) => c.value === color) ||\n      colors.some((c) => c.value === color)\n    ) {\n      return;\n    }\n\n    setCustomColor(color);\n  }, [color, colors, customColors]);\n\n  const computedColors = React.useMemo(\n    () =>\n      customColor\n        ? [\n            ...customColors,\n            {\n              isBrightColor: false,\n              name: '',\n              value: customColor,\n            },\n          ]\n        : customColors,\n    [customColor, customColors]\n  );\n\n  return {\n    computedColors,\n    setValue,\n    updateCustomColor,\n    value,\n  };\n};\n\nexport const useColorsCustom = ({\n  setValue,\n  updateCustomColor,\n  value,\n}: ReturnType<typeof useColorsCustomState>) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateCustomColorDebounced = React.useCallback(\n    debounce(updateCustomColor, 100),\n    [updateCustomColor]\n  );\n\n  return {\n    inputProps: {\n      value,\n      onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n        updateCustomColorDebounced(e.target.value);\n      },\n    },\n    menuItemProps: {\n      onSelect: (e: Event) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n"],"mappings":"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","names":["createSlatePlugin","createSlatePlugin","createSlatePlugin","editor","React","React"]}