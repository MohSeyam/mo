"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react/index.ts
var react_exports = {};
__export(react_exports, {
  FontBackgroundColorPlugin: () => FontBackgroundColorPlugin,
  FontColorPlugin: () => FontColorPlugin,
  FontFamilyPlugin: () => FontFamilyPlugin,
  FontSizePlugin: () => FontSizePlugin,
  FontWeightPlugin: () => FontWeightPlugin,
  useColorDropdownMenu: () => useColorDropdownMenu,
  useColorDropdownMenuState: () => useColorDropdownMenuState,
  useColorInput: () => useColorInput,
  useColorsCustom: () => useColorsCustom,
  useColorsCustomState: () => useColorsCustomState
});
module.exports = __toCommonJS(react_exports);

// src/react/FontPlugin.tsx
var import_react = require("@udecode/plate/react");

// src/lib/BaseFontBackgroundColorPlugin.ts
var import_plate = require("@udecode/plate");
var BaseFontBackgroundColorPlugin = (0, import_plate.createSlatePlugin)({
  key: "backgroundColor",
  inject: {
    nodeProps: {
      nodeKey: "backgroundColor"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              backgroundColor: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({
          [type]: element.style.backgroundColor
        })
      }
    }
  }
});

// src/lib/BaseFontColorPlugin.ts
var import_plate2 = require("@udecode/plate");
var BaseFontColorPlugin = (0, import_plate2.createSlatePlugin)({
  key: "color",
  inject: {
    nodeProps: {
      defaultNodeValue: "black",
      nodeKey: "color"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              color: "*"
            }
          }
        ],
        parse({ element, type }) {
          if (element.style.color) {
            return { [type]: element.style.color };
          }
        }
      }
    }
  }
});

// src/lib/BaseFontFamilyPlugin.ts
var import_plate3 = require("@udecode/plate");
var BaseFontFamilyPlugin = (0, import_plate3.createSlatePlugin)({
  key: "fontFamily",
  inject: {
    nodeProps: {
      nodeKey: "fontFamily"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontFamily: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontFamily })
      }
    }
  }
});

// src/lib/BaseFontSizePlugin.ts
var import_plate4 = require("@udecode/plate");

// src/lib/transforms/setFontSize.ts
var setFontSize = (editor, fontSize) => {
  editor.tf.addMarks({
    [BaseFontSizePlugin.key]: fontSize
  });
};

// src/lib/BaseFontSizePlugin.ts
var BaseFontSizePlugin = (0, import_plate4.createTSlatePlugin)({
  key: "fontSize",
  inject: {
    nodeProps: {
      nodeKey: "fontSize"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontSize: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontSize })
      }
    }
  }
}).extendApi(({ editor }) => ({
  setMark: (0, import_plate4.bindFirst)(setFontSize, editor)
}));

// src/lib/BaseFontWeightPlugin.ts
var import_plate5 = require("@udecode/plate");
var BaseFontWeightPlugin = (0, import_plate5.createSlatePlugin)({
  key: "fontWeight",
  inject: {
    nodeProps: {
      nodeKey: "fontWeight"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontWeight: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontWeight })
      }
    }
  }
});

// src/react/FontPlugin.tsx
var FontColorPlugin = (0, import_react.toPlatePlugin)(BaseFontColorPlugin);
var FontSizePlugin = (0, import_react.toPlatePlugin)(BaseFontSizePlugin);
var FontFamilyPlugin = (0, import_react.toPlatePlugin)(BaseFontFamilyPlugin);
var FontBackgroundColorPlugin = (0, import_react.toPlatePlugin)(
  BaseFontBackgroundColorPlugin
);
var FontWeightPlugin = (0, import_react.toPlatePlugin)(BaseFontWeightPlugin);

// src/react/hooks/useColorDropdownMenu.ts
var import_react2 = __toESM(require("react"));
var import_react3 = require("@udecode/plate/react");
var useColorDropdownMenuState = ({
  closeOnSelect = true,
  colors,
  customColors,
  nodeType
}) => {
  const editor = (0, import_react3.useEditorRef)();
  const selectionDefined = (0, import_react3.useEditorSelector)(
    (editor2) => !!editor2.selection,
    []
  );
  const color = (0, import_react3.useEditorSelector)(
    (editor2) => editor2.api.mark(nodeType),
    [nodeType]
  );
  const [selectedColor, setSelectedColor] = import_react2.default.useState();
  const [open, setOpen] = import_react2.default.useState(false);
  const onToggle = import_react2.default.useCallback(
    (value = !open) => {
      setOpen(value);
    },
    [open, setOpen]
  );
  const updateColor = import_react2.default.useCallback(
    (value) => {
      if (editor.selection) {
        setSelectedColor(value);
        editor.tf.select(editor.selection);
        editor.tf.focus();
        editor.tf.addMarks({ [nodeType]: value });
      }
    },
    [editor, nodeType]
  );
  const updateColorAndClose = import_react2.default.useCallback(
    (value) => {
      updateColor(value);
      closeOnSelect && onToggle();
    },
    [closeOnSelect, onToggle, updateColor]
  );
  const clearColor = import_react2.default.useCallback(() => {
    if (editor.selection) {
      editor.tf.select(editor.selection);
      editor.tf.focus();
      if (selectedColor) {
        editor.tf.removeMarks(nodeType);
      }
      closeOnSelect && onToggle();
    }
  }, [editor, selectedColor, closeOnSelect, onToggle, nodeType]);
  import_react2.default.useEffect(() => {
    if (selectionDefined) {
      setSelectedColor(color);
    }
  }, [color, selectionDefined]);
  return {
    clearColor,
    color,
    colors,
    customColors,
    open,
    selectedColor,
    updateColor,
    updateColorAndClose,
    onToggle
  };
};
var useColorDropdownMenu = ({
  open,
  onToggle
}) => {
  return {
    buttonProps: {
      pressed: open
    },
    menuProps: {
      open,
      onOpenChange: onToggle
    }
  };
};

// src/react/hooks/useColorInput.ts
var import_react4 = __toESM(require("react"));
var useColorInput = () => {
  const ref = import_react4.default.useRef(null);
  const onClick = () => {
    ref.current?.click();
  };
  return {
    childProps: {
      onClick
    },
    inputRef: ref
  };
};

// src/react/hooks/useColorsCustom.ts
var import_react5 = __toESM(require("react"));
var import_debounce = __toESM(require("lodash/debounce.js"));
var useColorsCustomState = ({
  color,
  colors,
  customColors,
  updateCustomColor
}) => {
  const [customColor, setCustomColor] = import_react5.default.useState();
  const [value, setValue] = import_react5.default.useState(color || "#000000");
  import_react5.default.useEffect(() => {
    if (!color || customColors.some((c) => c.value === color) || colors.some((c) => c.value === color)) {
      return;
    }
    setCustomColor(color);
  }, [color, colors, customColors]);
  const computedColors = import_react5.default.useMemo(
    () => customColor ? [
      ...customColors,
      {
        isBrightColor: false,
        name: "",
        value: customColor
      }
    ] : customColors,
    [customColor, customColors]
  );
  return {
    computedColors,
    setValue,
    updateCustomColor,
    value
  };
};
var useColorsCustom = ({
  setValue,
  updateCustomColor,
  value
}) => {
  const updateCustomColorDebounced = import_react5.default.useCallback(
    (0, import_debounce.default)(updateCustomColor, 100),
    [updateCustomColor]
  );
  return {
    inputProps: {
      value,
      onChange: (e) => {
        setValue(e.target.value);
        updateCustomColorDebounced(e.target.value);
      }
    },
    menuItemProps: {
      onSelect: (e) => {
        e.preventDefault();
      }
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FontBackgroundColorPlugin,
  FontColorPlugin,
  FontFamilyPlugin,
  FontSizePlugin,
  FontWeightPlugin,
  useColorDropdownMenu,
  useColorDropdownMenuState,
  useColorInput,
  useColorsCustom,
  useColorsCustomState
});
//# sourceMappingURL=index.js.map