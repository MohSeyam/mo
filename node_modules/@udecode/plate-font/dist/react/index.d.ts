import * as _udecode_plate_core_react from '@udecode/plate-core/react';
import * as _udecode_plate_core from '@udecode/plate-core';
import React from 'react';

declare const FontColorPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"color", {}, {}, {}, {}>>;
declare const FontSizePlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<any, {}, Record<any, {
    setMark: (fontSize: string) => void;
}>, {}, {}>>;
declare const FontFamilyPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"fontFamily", {}, {}, {}, {}>>;
declare const FontBackgroundColorPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"backgroundColor", {}, {}, {}, {}>>;
declare const FontWeightPlugin: _udecode_plate_core_react.PlatePlugin<_udecode_plate_core.PluginConfig<"fontWeight", {}, {}, {}, {}>>;

declare const useColorDropdownMenuState: ({ closeOnSelect, colors, customColors, nodeType, }: {
    colors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    customColors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    nodeType: string;
    closeOnSelect?: boolean;
}) => {
    clearColor: () => void;
    color: string;
    colors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    customColors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    open: boolean;
    selectedColor: string | undefined;
    updateColor: (value: string) => void;
    updateColorAndClose: (value: string) => void;
    onToggle: (value?: boolean) => void;
};
declare const useColorDropdownMenu: ({ open, onToggle, }: ReturnType<typeof useColorDropdownMenuState>) => {
    buttonProps: {
        pressed: boolean;
    };
    menuProps: {
        open: boolean;
        onOpenChange: (value?: boolean) => void;
    };
};

declare const useColorInput: () => {
    childProps: {
        onClick: () => void;
    };
    inputRef: React.RefObject<HTMLInputElement | null>;
};

declare const useColorsCustomState: ({ color, colors, customColors, updateCustomColor, }: {
    colors: any[];
    customColors: any[];
    updateCustomColor: (color: string) => void;
    color?: string;
}) => {
    computedColors: any[];
    setValue: React.Dispatch<React.SetStateAction<string>>;
    updateCustomColor: (color: string) => void;
    value: string;
};
declare const useColorsCustom: ({ setValue, updateCustomColor, value, }: ReturnType<typeof useColorsCustomState>) => {
    inputProps: {
        value: string;
        onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    };
    menuItemProps: {
        onSelect: (e: Event) => void;
    };
};

export { FontBackgroundColorPlugin, FontColorPlugin, FontFamilyPlugin, FontSizePlugin, FontWeightPlugin, useColorDropdownMenu, useColorDropdownMenuState, useColorInput, useColorsCustom, useColorsCustomState };
