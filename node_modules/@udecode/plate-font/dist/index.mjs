// src/lib/BaseFontBackgroundColorPlugin.ts
import { createSlatePlugin } from "@udecode/plate";
var BaseFontBackgroundColorPlugin = createSlatePlugin({
  key: "backgroundColor",
  inject: {
    nodeProps: {
      nodeKey: "backgroundColor"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              backgroundColor: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({
          [type]: element.style.backgroundColor
        })
      }
    }
  }
});

// src/lib/BaseFontColorPlugin.ts
import { createSlatePlugin as createSlatePlugin2 } from "@udecode/plate";
var BaseFontColorPlugin = createSlatePlugin2({
  key: "color",
  inject: {
    nodeProps: {
      defaultNodeValue: "black",
      nodeKey: "color"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              color: "*"
            }
          }
        ],
        parse({ element, type }) {
          if (element.style.color) {
            return { [type]: element.style.color };
          }
        }
      }
    }
  }
});

// src/lib/BaseFontFamilyPlugin.ts
import { createSlatePlugin as createSlatePlugin3 } from "@udecode/plate";
var BaseFontFamilyPlugin = createSlatePlugin3({
  key: "fontFamily",
  inject: {
    nodeProps: {
      nodeKey: "fontFamily"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontFamily: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontFamily })
      }
    }
  }
});

// src/lib/BaseFontSizePlugin.ts
import {
  bindFirst,
  createTSlatePlugin
} from "@udecode/plate";

// src/lib/transforms/setBlockBackgroundColor.ts
var setBlockBackgroundColor = (editor, block, backgroundColor) => {
  editor.tf.setNodes(
    { [BaseFontBackgroundColorPlugin.key]: backgroundColor },
    { at: block[1] }
  );
};

// src/lib/transforms/setFontSize.ts
var setFontSize = (editor, fontSize) => {
  editor.tf.addMarks({
    [BaseFontSizePlugin.key]: fontSize
  });
};

// src/lib/BaseFontSizePlugin.ts
var BaseFontSizePlugin = createTSlatePlugin({
  key: "fontSize",
  inject: {
    nodeProps: {
      nodeKey: "fontSize"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontSize: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontSize })
      }
    }
  }
}).extendApi(({ editor }) => ({
  setMark: bindFirst(setFontSize, editor)
}));

// src/lib/BaseFontWeightPlugin.ts
import { createSlatePlugin as createSlatePlugin4 } from "@udecode/plate";
var BaseFontWeightPlugin = createSlatePlugin4({
  key: "fontWeight",
  inject: {
    nodeProps: {
      nodeKey: "fontWeight"
    }
  },
  parsers: {
    html: {
      deserializer: {
        isLeaf: true,
        rules: [
          {
            validStyle: {
              fontWeight: "*"
            }
          }
        ],
        parse: ({ element, type }) => ({ [type]: element.style.fontWeight })
      }
    }
  }
});

// src/lib/utils/toUnitLess.ts
var toUnitLess = (value) => {
  const match = /\d+/.exec(value);
  if (!match) return "0";
  const num = Number(match[0]);
  if (value.endsWith("rem")) {
    return (num * 16).toString();
  }
  return num.toString();
};
export {
  BaseFontBackgroundColorPlugin,
  BaseFontColorPlugin,
  BaseFontFamilyPlugin,
  BaseFontSizePlugin,
  BaseFontWeightPlugin,
  setBlockBackgroundColor,
  setFontSize,
  toUnitLess
};
//# sourceMappingURL=index.mjs.map