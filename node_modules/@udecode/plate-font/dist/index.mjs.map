{"version":3,"sources":["../src/lib/BaseFontBackgroundColorPlugin.ts","../src/lib/BaseFontColorPlugin.ts","../src/lib/BaseFontFamilyPlugin.ts","../src/lib/BaseFontSizePlugin.ts","../src/lib/transforms/setBlockBackgroundColor.ts","../src/lib/transforms/setFontSize.ts","../src/lib/BaseFontWeightPlugin.ts","../src/lib/utils/toUnitLess.ts"],"sourcesContent":["import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontBackgroundColorPlugin = createSlatePlugin({\n  key: 'backgroundColor',\n  inject: {\n    nodeProps: {\n      nodeKey: 'backgroundColor',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              backgroundColor: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({\n          [type]: element.style.backgroundColor,\n        }),\n      },\n    },\n  },\n});\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontColorPlugin = createSlatePlugin({\n  key: 'color',\n  inject: {\n    nodeProps: {\n      defaultNodeValue: 'black',\n      nodeKey: 'color',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              color: '*',\n            },\n          },\n        ],\n        parse({ element, type }) {\n          if (element.style.color) {\n            return { [type]: element.style.color };\n          }\n        },\n      },\n    },\n  },\n});\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontFamilyPlugin = createSlatePlugin({\n  key: 'fontFamily',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontFamily',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontFamily: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontFamily }),\n      },\n    },\n  },\n});\n","import {\n  type PluginConfig,\n  bindFirst,\n  createTSlatePlugin,\n} from '@udecode/plate';\n\nimport { setFontSize } from './transforms';\n\nexport type BaseFontSizeConfig = PluginConfig<\n  'fontSize',\n  {},\n  {\n    fontSize: {\n      setMark: (fontSize: string) => void;\n    };\n  }\n>;\n\nexport const BaseFontSizePlugin = createTSlatePlugin({\n  key: 'fontSize',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontSize',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontSize: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontSize }),\n      },\n    },\n  },\n}).extendApi(({ editor }) => ({\n  setMark: bindFirst(setFontSize, editor),\n}));\n","import type { NodeEntry, SlateEditor } from '@udecode/plate';\n\nimport { BaseFontBackgroundColorPlugin } from '../BaseFontBackgroundColorPlugin';\n\nexport const setBlockBackgroundColor = (\n  editor: SlateEditor,\n  block: NodeEntry,\n  backgroundColor: string\n) => {\n  editor.tf.setNodes(\n    { [BaseFontBackgroundColorPlugin.key]: backgroundColor },\n    { at: block[1] }\n  );\n};\n","import type { Editor } from '@udecode/plate';\n\nimport { BaseFontSizePlugin } from '../BaseFontSizePlugin';\n\nexport const setFontSize = (editor: Editor, fontSize: string): void => {\n  editor.tf.addMarks({\n    [BaseFontSizePlugin.key]: fontSize,\n  });\n};\n","import { createSlatePlugin } from '@udecode/plate';\n\nexport const BaseFontWeightPlugin = createSlatePlugin({\n  key: 'fontWeight',\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontWeight',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontWeight: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontWeight }),\n      },\n    },\n  },\n});\n","// return '0' if value not valid\nexport const toUnitLess = (value: string): string => {\n  const match = /\\d+/.exec(value);\n\n  if (!match) return '0';\n\n  const num = Number(match[0]);\n\n  if (value.endsWith('rem')) {\n    return (num * 16).toString();\n  }\n\n  return num.toString();\n};\n"],"mappings":"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","names":["createSlatePlugin","createSlatePlugin","createSlatePlugin"]}