{"version":3,"sources":["../src/index.ts","../src/react-editor/blurEditor.ts","../src/react-editor/deselectEditor.ts","../src/react-editor/findEditorDocumentOrShadowRoot.ts","../src/react-editor/findEventRange.ts","../src/react-editor/findNodeKey.ts","../src/react-editor/findPath.ts","../src/react-editor/focusEditor.ts","../src/react-editor/getEditorWindow.ts","../src/react-editor/hasEditorDOMNode.ts","../src/react-editor/hasEditorEditableTarget.ts","../src/react-editor/hasEditorSelectableTarget.ts","../src/react-editor/hasEditorTarget.ts","../src/react-editor/insertData.ts","../src/react-editor/isComposing.ts","../src/react-editor/isEditorFocused.ts","../src/react-editor/isEditorReadOnly.ts","../src/react-editor/isTargetInsideNonReadonlyVoidEditor.ts","../src/react-editor/setFragmentData.ts","../src/react-editor/toDOMNode.ts","../src/react-editor/toDOMPoint.ts","../src/react-editor/toDOMRange.ts","../src/react-editor/toSlateNode.ts","../src/react-editor/toSlatePoint.ts","../src/react-editor/toSlateRange.ts","../src/utils/focusEditorEdge.ts","../src/utils/setNode.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './react-editor/index';\nexport * from './types/index';\nexport * from './utils/index';\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Blur the editor. */\nexport const blurEditor = (editor: TEditor) => ReactEditor.blur(editor as any);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Deselect the editor. */\nexport const deselectEditor = (editor: TEditor) =>\n  ReactEditor.deselect(editor as any);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Find the DOM node that implements DocumentOrShadowRoot for the editor. */\nexport const findEditorDocumentOrShadowRoot = (editor: TEditor) => {\n  try {\n    return ReactEditor.findDocumentOrShadowRoot(editor as any);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** {@link ReactEditor.findEventRange} */\nexport const findEventRange = (editor: TEditor, event: any) => {\n  try {\n    return ReactEditor.findEventRange(editor as any, event);\n  } catch (error) {}\n};\n","import type { TEditor, TNode } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Find a key for a Slate node. */\nexport const findNodeKey = (editor: TEditor, node: TNode) => {\n  try {\n    return ReactEditor.findKey(editor as any, node);\n  } catch (error) {}\n};\n","import type { TEditor, TNode } from '@udecode/slate';\nimport type { Path } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Find the path of Slate node. */\nexport const findPath = (editor: TEditor, node: TNode): Path | undefined => {\n  try {\n    return ReactEditor.findPath(editor as any, node);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\nimport type { Location } from 'slate';\n\nimport { deselect, select, withoutNormalizing } from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\n/**\n * Focus the editor. Extension:\n *\n * If `target` is defined:\n *\n * - Deselect the editor (otherwise it will focus the start of the editor)\n * - Select the editor\n * - Focus the editor\n */\nexport const focusEditor = (editor: TEditor, target?: Location) => {\n  if (target) {\n    withoutNormalizing(editor, () => {\n      deselect(editor);\n      select(editor, target);\n    });\n  }\n\n  // From slate-react 0.99.0, setTimeout is mandatory to focus the editor after a transform.\n  // setTimeout(() => {\n  ReactEditor.focus(editor as any);\n  // }, 0);\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Return the host window of the current editor. */\nexport const getEditorWindow = (editor: TEditor) => {\n  try {\n    return ReactEditor.getWindow(editor as any);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\nimport type { DOMNode } from 'slate-dom';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if a DOM node is within the editor. */\nexport const hasEditorDOMNode = (\n  editor: TEditor,\n  target: DOMNode,\n  options?: Parameters<typeof ReactEditor.hasDOMNode>[2]\n) => {\n  try {\n    return ReactEditor.hasDOMNode(editor as any, target, options);\n  } catch (error) {}\n\n  return false;\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the target is editable and in the editor. */\nexport const hasEditorEditableTarget = (\n  editor: TEditor,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasEditableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the target can be selectable. */\nexport const hasEditorSelectableTarget = (\n  editor: TEditor,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.hasSelectableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the target is in the editor. */\nexport const hasEditorTarget = (\n  editor: TEditor,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Insert data from a `DataTransfer` into the editor. */\nexport const insertData = (editor: TEditor, data: DataTransfer) =>\n  ReactEditor.insertData(editor as any, data);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the user is currently composing inside the editor. */\nexport const isComposing = (editor: TEditor) =>\n  ReactEditor.isComposing(editor as any);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the editor is focused. */\nexport const isEditorFocused = (editor: TEditor) =>\n  ReactEditor.isFocused(editor as any);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the editor is in read-only mode. */\nexport const isEditorReadOnly = (editor: TEditor) =>\n  ReactEditor.isReadOnly(editor as any);\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Check if the target is inside void and in an non-readonly editor. */\nexport const isTargetInsideNonReadonlyVoid = (\n  editor: TEditor,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.isTargetInsideNonReadonlyVoid(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Sets data from the currently selected fragment on a `DataTransfer`. */\nexport const setFragmentData = (editor: TEditor, data: DataTransfer) =>\n  ReactEditor.setFragmentData(editor as any, data);\n","import type { TEditor, TNode } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Find the native DOM element from a Slate node. */\nexport const toDOMNode = (editor: TEditor, node: TNode) => {\n  try {\n    return ReactEditor.toDOMNode(editor as any, node);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\nimport type { Point } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** Find a native DOM selection point from a Slate point. */\nexport const toDOMPoint = (editor: TEditor, point: Point) => {\n  try {\n    return ReactEditor.toDOMPoint(editor as any, point);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\nimport type { Range } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** {@link ReactEditor.toDOMRange} */\nexport const toDOMRange = (editor: TEditor, range: Range) => {\n  try {\n    return ReactEditor.toDOMRange(editor as any, range);\n  } catch (error) {}\n};\n","import type { TEditor, TNode } from '@udecode/slate';\nimport type { DOMNode } from 'slate-dom';\n\nimport { ReactEditor } from 'slate-react';\n\n/** {@link ReactEditor.toSlateNode} */\nexport const toSlateNode = (editor: TEditor, domNode: DOMNode) => {\n  try {\n    return ReactEditor.toSlateNode(editor as any, domNode) as TNode;\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\nimport type { DOMPoint } from 'slate-dom';\n\nimport { ReactEditor } from 'slate-react';\n\n/** {@link ReactEditor.toSlatePoint} */\nexport const toSlatePoint = (\n  editor: TEditor,\n  domPoint: DOMPoint,\n  options: Parameters<typeof ReactEditor.toSlatePoint>[2]\n) => {\n  try {\n    return ReactEditor.toSlatePoint(editor as any, domPoint, options);\n  } catch (error) {}\n};\n","import type { TEditor } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\n/** {@link ReactEditor.toSlateRange} */\nexport const toSlateRange = (\n  editor: TEditor,\n  domRange: Parameters<typeof ReactEditor.toSlateRange>[1],\n  options: Parameters<typeof ReactEditor.toSlateRange>[2]\n) => {\n  try {\n    return ReactEditor.toSlateRange(editor as any, domRange, options);\n  } catch (error) {}\n};\n","import { type TEditor, getEndPoint, getStartPoint } from '@udecode/slate';\n\nimport { focusEditor } from '../react-editor/index';\n\n/** Focus an editor edge. */\nexport const focusEditorEdge = (\n  editor: TEditor,\n  {\n    edge = 'start',\n  }: {\n    edge?: 'end' | 'start';\n  } = {}\n) => {\n  const target =\n    edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);\n\n  focusEditor(editor, target);\n};\n","import type {\n  NodeOf,\n  SetNodesOptions,\n  TEditor,\n  TNodeProps,\n} from '@udecode/slate';\n\nimport { findPath } from '../react-editor';\n\nexport const setNode = <N extends NodeOf<E>, E extends TEditor = TEditor>(\n  editor: E,\n  node: N,\n  props: Partial<TNodeProps<N>>,\n  options?: Omit<SetNodesOptions<E>, 'at'>\n) => {\n  const path = findPath(editor, node);\n\n  if (!path) return;\n\n  editor.setNodes(props, {\n    ...options,\n    at: path,\n  } as any);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,yBAA4B;AAGrB,IAAM,aAAa,CAAC,WAAoB,+BAAY,KAAK,MAAa;;;ACH7E,IAAAA,sBAA4B;AAGrB,IAAM,iBAAiB,CAAC,WAC7B,gCAAY,SAAS,MAAa;;;ACJpC,IAAAC,sBAA4B;AAGrB,IAAM,iCAAiC,CAAC,WAAoB;AACjE,MAAI;AACF,WAAO,gCAAY,yBAAyB,MAAa;AAAA,EAC3D,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,IAAAC,sBAA4B;AAGrB,IAAM,iBAAiB,CAAC,QAAiB,UAAe;AAC7D,MAAI;AACF,WAAO,gCAAY,eAAe,QAAe,KAAK;AAAA,EACxD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,IAAAC,sBAA4B;AAGrB,IAAM,cAAc,CAAC,QAAiB,SAAgB;AAC3D,MAAI;AACF,WAAO,gCAAY,QAAQ,QAAe,IAAI;AAAA,EAChD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACNA,IAAAC,sBAA4B;AAGrB,IAAM,WAAW,CAAC,QAAiB,SAAkC;AAC1E,MAAI;AACF,WAAO,gCAAY,SAAS,QAAe,IAAI;AAAA,EACjD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,mBAAqD;AACrD,IAAAC,sBAA4B;AAWrB,IAAM,cAAc,CAAC,QAAiB,WAAsB;AACjE,MAAI,QAAQ;AACV,yCAAmB,QAAQ,MAAM;AAC/B,iCAAS,MAAM;AACf,+BAAO,QAAQ,MAAM;AAAA,IACvB,CAAC;AAAA,EACH;AAIA,kCAAY,MAAM,MAAa;AAEjC;;;ACzBA,IAAAC,sBAA4B;AAGrB,IAAM,kBAAkB,CAAC,WAAoB;AAClD,MAAI;AACF,WAAO,gCAAY,UAAU,MAAa;AAAA,EAC5C,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACNA,IAAAC,sBAA4B;AAGrB,IAAM,mBAAmB,CAC9B,QACA,QACA,YACG;AACH,MAAI;AACF,WAAO,gCAAY,WAAW,QAAe,QAAQ,OAAO;AAAA,EAC9D,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;;;ACdA,IAAAC,uBAA4B;AAGrB,IAAM,0BAA0B,CACrC,QACA,WACmB;AACnB,MAAI;AACF,WAAO,iCAAY,kBAAkB,QAAe,MAAM;AAAA,EAC5D,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;;;ACZA,IAAAC,uBAA4B;AAGrB,IAAM,4BAA4B,CACvC,QACA,WACG;AACH,MAAI;AACF,WAAO,iCAAY,oBAAoB,QAAe,MAAM;AAAA,EAC9D,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;;;ACZA,IAAAC,uBAA4B;AAGrB,IAAM,kBAAkB,CAC7B,QACA,WACmB;AACnB,MAAI;AACF,WAAO,iCAAY,UAAU,QAAe,MAAM;AAAA,EACpD,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;;;ACZA,IAAAC,uBAA4B;AAGrB,IAAM,aAAa,CAAC,QAAiB,SAC1C,iCAAY,WAAW,QAAe,IAAI;;;ACJ5C,IAAAC,uBAA4B;AAGrB,IAAM,cAAc,CAAC,WAC1B,iCAAY,YAAY,MAAa;;;ACJvC,IAAAC,uBAA4B;AAGrB,IAAM,kBAAkB,CAAC,WAC9B,iCAAY,UAAU,MAAa;;;ACJrC,IAAAC,uBAA4B;AAGrB,IAAM,mBAAmB,CAAC,WAC/B,iCAAY,WAAW,MAAa;;;ACJtC,IAAAC,uBAA4B;AAGrB,IAAM,gCAAgC,CAC3C,QACA,WACG;AACH,MAAI;AACF,WAAO,iCAAY,8BAA8B,QAAe,MAAM;AAAA,EACxE,SAAS,OAAO;AAAA,EAAC;AAEjB,SAAO;AACT;;;ACZA,IAAAC,uBAA4B;AAGrB,IAAM,kBAAkB,CAAC,QAAiB,SAC/C,iCAAY,gBAAgB,QAAe,IAAI;;;ACJjD,IAAAC,uBAA4B;AAGrB,IAAM,YAAY,CAAC,QAAiB,SAAgB;AACzD,MAAI;AACF,WAAO,iCAAY,UAAU,QAAe,IAAI;AAAA,EAClD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACNA,IAAAC,uBAA4B;AAGrB,IAAM,aAAa,CAAC,QAAiB,UAAiB;AAC3D,MAAI;AACF,WAAO,iCAAY,WAAW,QAAe,KAAK;AAAA,EACpD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,IAAAC,uBAA4B;AAGrB,IAAM,aAAa,CAAC,QAAiB,UAAiB;AAC3D,MAAI;AACF,WAAO,iCAAY,WAAW,QAAe,KAAK;AAAA,EACpD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,IAAAC,uBAA4B;AAGrB,IAAM,cAAc,CAAC,QAAiB,YAAqB;AAChE,MAAI;AACF,WAAO,iCAAY,YAAY,QAAe,OAAO;AAAA,EACvD,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACPA,IAAAC,uBAA4B;AAGrB,IAAM,eAAe,CAC1B,QACA,UACA,YACG;AACH,MAAI;AACF,WAAO,iCAAY,aAAa,QAAe,UAAU,OAAO;AAAA,EAClE,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACZA,IAAAC,uBAA4B;AAGrB,IAAM,eAAe,CAC1B,QACA,UACA,YACG;AACH,MAAI;AACF,WAAO,iCAAY,aAAa,QAAe,UAAU,OAAO;AAAA,EAClE,SAAS,OAAO;AAAA,EAAC;AACnB;;;ACbA,IAAAC,gBAAyD;AAKlD,IAAM,kBAAkB,CAC7B,QACA;AAAA,EACE,OAAO;AACT,IAEI,CAAC,MACF;AACH,QAAM,SACJ,SAAS,cAAU,6BAAc,QAAQ,CAAC,CAAC,QAAI,2BAAY,QAAQ,CAAC,CAAC;AAEvE,cAAY,QAAQ,MAAM;AAC5B;;;ACRO,IAAM,UAAU,CACrB,QACA,MACA,OACA,YACG;AACH,QAAM,OAAO,SAAS,QAAQ,IAAI;AAElC,MAAI,CAAC,KAAM;AAEX,SAAO,SAAS,OAAO,iCAClB,UADkB;AAAA,IAErB,IAAI;AAAA,EACN,EAAQ;AACV;","names":["import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate_react","import_slate"]}