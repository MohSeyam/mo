{"version":3,"sources":["../../src/react/slate-react.ts","../../src/react/components/EditorHotkeysEffect.tsx","../../src/react/stores/element/useElement.ts","../../src/react/stores/plate/createPlateStore.ts","../../src/react/libs/jotai.ts","../../src/react/editor/withPlate.ts","../../src/lib/editor/withSlate.ts","../../src/internal/plugin/resolvePlugins.ts","../../src/lib/plugin/createSlatePlugin.ts","../../src/internal/utils/isFunction.ts","../../src/internal/utils/mergePlugins.ts","../../src/lib/plugin/getEditorPlugin.ts","../../src/internal/plugin/resolvePlugin.ts","../../src/lib/plugin/getSlatePlugin.ts","../../src/lib/plugins/AstPlugin.ts","../../src/lib/plugins/HistoryPlugin.ts","../../src/lib/plugins/paragraph/BaseParagraphPlugin.ts","../../src/lib/plugins/override/withBreakRules.ts","../../src/lib/plugins/override/withDeleteRules.ts","../../src/lib/plugins/override/withMergeRules.ts","../../src/lib/plugins/override/withNormalizeRules.ts","../../src/lib/plugins/override/OverridePlugin.ts","../../src/internal/plugin/pipeInsertFragment.ts","../../src/internal/plugin/pipeTransformData.ts","../../src/internal/plugin/pipeTransformFragment.ts","../../src/lib/utils/applyDeepToNodes.ts","../../src/lib/utils/defaultsDeepToNodes.ts","../../src/lib/utils/getInjectMatch.ts","../../src/lib/utils/getKeysByTypes.ts","../../src/lib/utils/getInjectedPlugins.ts","../../src/lib/utils/getPluginNodeProps.ts","../../src/lib/static/utils/getNodeDataAttributes.ts","../../src/internal/plugin/pipeInjectNodeProps.tsx","../../src/internal/plugin/isEditOnlyDisabled.ts","../../src/internal/plugin/pluginInjectNodeProps.ts","../../src/lib/static/utils/pipeDecorate.ts","../../src/lib/static/deserialize/checkUtils.ts","../../src/lib/utils/getSlateClass.ts","../../src/lib/utils/hotkeys.ts","../../src/lib/utils/mergeDeepToNodes.ts","../../src/lib/utils/normalizeDescendantsToDocumentFragment.ts","../../src/lib/plugins/affinity/AffinityPlugin.ts","../../src/lib/plugins/affinity/queries/getEdgeNodes.ts","../../../../node_modules/is-plain-object/dist/is-plain-object.mjs","../../../../node_modules/immer/src/utils/env.ts","../../../../node_modules/immer/src/utils/errors.ts","../../../../node_modules/immer/src/utils/common.ts","../../../../node_modules/immer/src/utils/plugins.ts","../../../../node_modules/immer/src/core/scope.ts","../../../../node_modules/immer/src/core/finalize.ts","../../../../node_modules/immer/src/core/proxy.ts","../../../../node_modules/immer/src/core/immerClass.ts","../../../../node_modules/immer/src/core/current.ts","../../../../node_modules/immer/src/plugins/patches.ts","../../../../node_modules/immer/src/plugins/mapset.ts","../../../../node_modules/immer/src/immer.ts","../../../../node_modules/slate/src/interfaces/path-ref.ts","../../../../node_modules/slate/src/interfaces/point-ref.ts","../../../../node_modules/slate/src/interfaces/range-ref.ts","../../../../node_modules/slate/src/utils/weak-maps.ts","../../../../node_modules/slate/src/interfaces/path.ts","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/typeof.js","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/slate/src/interfaces/transforms/general.ts","../../../../node_modules/slate/src/interfaces/transforms/node.ts","../../../../node_modules/slate/src/interfaces/transforms/selection.ts","../../../../node_modules/slate/src/utils/deep-equal.ts","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../../../../node_modules/slate/src/interfaces/range.ts","../../../../node_modules/slate/src/interfaces/element.ts","../../../../node_modules/slate/src/interfaces/node.ts","../../../../node_modules/slate/src/interfaces/operation.ts","../../../../node_modules/slate/src/editor/is-editor.ts","../../../../node_modules/slate/src/interfaces/editor.ts","../../../../node_modules/slate/src/interfaces/location.ts","../../../../node_modules/slate/src/interfaces/point.ts","../../../../node_modules/slate/src/interfaces/scrubber.ts","../../../../node_modules/slate/src/interfaces/text.ts","../../../../node_modules/slate/src/utils/get-default-insert-location.ts","../../../../node_modules/slate/src/utils/match-path.ts","../../../../node_modules/slate/src/utils/string.ts","../../../../node_modules/slate/src/interfaces/transforms/text.ts","../../../../node_modules/slate/src/interfaces/transforms/index.ts","../../../../node_modules/slate/src/core/batch-dirty-paths.ts","../../../../node_modules/slate/src/core/update-dirty-paths.ts","../../../../node_modules/slate/src/core/apply.ts","../../../../node_modules/slate/src/core/get-dirty-paths.ts","../../../../node_modules/slate/src/core/get-fragment.ts","../../../../node_modules/slate/src/core/normalize-node.ts","../../../../node_modules/slate/src/core/should-normalize.ts","../../../../node_modules/slate/src/editor/above.ts","../../../../node_modules/slate/src/editor/add-mark.ts","../../../../node_modules/slate/src/editor/after.ts","../../../../node_modules/slate/src/editor/before.ts","../../../../node_modules/slate/src/editor/delete-backward.ts","../../../../node_modules/slate/src/editor/delete-forward.ts","../../../../node_modules/slate/src/editor/delete-fragment.ts","../../../../node_modules/slate/src/editor/edges.ts","../../../../node_modules/slate/src/editor/element-read-only.ts","../../../../node_modules/slate/src/editor/end.ts","../../../../node_modules/slate/src/editor/first.ts","../../../../node_modules/slate/src/editor/fragment.ts","../../../../node_modules/slate/src/editor/get-void.ts","../../../../node_modules/slate/src/editor/has-blocks.ts","../../../../node_modules/slate/src/editor/has-inlines.ts","../../../../node_modules/slate/src/editor/has-path.ts","../../../../node_modules/slate/src/editor/has-texts.ts","../../../../node_modules/slate/src/editor/insert-break.ts","../../../../node_modules/slate/src/editor/insert-node.ts","../../../../node_modules/slate/src/editor/insert-soft-break.ts","../../../../node_modules/slate/src/editor/insert-text.ts","../../../../node_modules/slate/src/editor/is-block.ts","../../../../node_modules/slate/src/editor/is-edge.ts","../../../../node_modules/slate/src/editor/is-empty.ts","../../../../node_modules/slate/src/editor/is-end.ts","../../../../node_modules/slate/src/editor/is-normalizing.ts","../../../../node_modules/slate/src/editor/is-start.ts","../../../../node_modules/slate/src/editor/last.ts","../../../../node_modules/slate/src/editor/leaf.ts","../../../../node_modules/slate/src/editor/levels.ts","../../../../node_modules/slate/src/editor/marks.ts","../../../../node_modules/slate/src/editor/next.ts","../../../../node_modules/slate/src/editor/node.ts","../../../../node_modules/slate/src/editor/nodes.ts","../../../../node_modules/slate/src/editor/normalize.ts","../../../../node_modules/slate/src/editor/parent.ts","../../../../node_modules/slate/src/editor/path-ref.ts","../../../../node_modules/slate/src/editor/path-refs.ts","../../../../node_modules/slate/src/editor/path.ts","../../../../node_modules/slate/src/editor/point-ref.ts","../../../../node_modules/slate/src/editor/point-refs.ts","../../../../node_modules/slate/src/editor/point.ts","../../../../node_modules/slate/src/editor/positions.ts","../../../../node_modules/slate/src/editor/previous.ts","../../../../node_modules/slate/src/editor/range-ref.ts","../../../../node_modules/slate/src/editor/range-refs.ts","../../../../node_modules/slate/src/editor/range.ts","../../../../node_modules/slate/src/editor/remove-mark.ts","../../../../node_modules/slate/src/editor/set-normalizing.ts","../../../../node_modules/slate/src/editor/start.ts","../../../../node_modules/slate/src/editor/string.ts","../../../../node_modules/slate/src/editor/unhang-range.ts","../../../../node_modules/slate/src/editor/without-normalizing.ts","../../../../node_modules/slate/src/editor/should-merge-nodes-remove-prev-node.ts","../../../../node_modules/slate/src/transforms-text/delete-text.ts","../../../../node_modules/slate/src/transforms-text/insert-fragment.ts","../../../../node_modules/slate/src/transforms-selection/collapse.ts","../../../../node_modules/slate/src/transforms-selection/deselect.ts","../../../../node_modules/slate/src/transforms-selection/move.ts","../../../../node_modules/slate/src/transforms-selection/select.ts","../../../../node_modules/slate/src/transforms-selection/set-point.ts","../../../../node_modules/slate/src/transforms-selection/set-selection.ts","../../../../node_modules/slate/src/transforms-node/insert-nodes.ts","../../../../node_modules/slate/src/transforms-node/lift-nodes.ts","../../../../node_modules/slate/src/transforms-node/merge-nodes.ts","../../../../node_modules/slate/src/transforms-node/move-nodes.ts","../../../../node_modules/slate/src/transforms-node/remove-nodes.ts","../../../../node_modules/slate/src/transforms-node/set-nodes.ts","../../../../node_modules/slate/src/transforms-node/split-nodes.ts","../../../../node_modules/slate/src/transforms-node/unset-nodes.ts","../../../../node_modules/slate/src/transforms-node/unwrap-nodes.ts","../../../../node_modules/slate/src/transforms-node/wrap-nodes.ts","../../../../node_modules/slate/src/create-editor.ts","../../src/lib/plugins/affinity/queries/getMarkBoundaryAffinity.ts","../../src/lib/plugins/affinity/queries/isNodeAffinity.ts","../../src/lib/plugins/affinity/transforms/setAffinitySelection.ts","../../src/lib/plugins/debug/DebugPlugin.ts","../../src/lib/plugins/dom/DOMPlugin.ts","../../src/lib/plugins/dom/withScrolling.ts","../../src/lib/plugins/html/HtmlPlugin.ts","../../src/lib/plugins/html/utils/isHtmlElement.ts","../../src/lib/plugins/html/utils/isHtmlText.ts","../../src/lib/plugins/html/utils/inlineTagNames.ts","../../src/lib/plugins/html/utils/isHtmlInlineElement.ts","../../src/lib/plugins/html/utils/isHtmlBlockElement.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseString.ts","../../src/lib/plugins/html/utils/collapse-white-space/isLastNonEmptyTextOfInlineFormattingContext.ts","../../src/lib/plugins/html/utils/collapse-white-space/stateTransforms.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceText.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceNode.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceChildren.ts","../../src/lib/plugins/html/utils/collapse-white-space/inferWhiteSpaceRule.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceElement.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpace.ts","../../src/lib/plugins/html/utils/htmlBodyToFragment.ts","../../src/lib/plugins/html/utils/deserializeHtmlNodeChildren.ts","../../src/lib/plugins/html/utils/htmlBrToNewLine.ts","../../src/lib/plugins/html/utils/htmlElementToElement.ts","../../src/lib/plugins/html/utils/pluginDeserializeHtml.ts","../../src/lib/plugins/html/utils/getDataNodeProps.ts","../../src/lib/plugins/html/utils/pipeDeserializeHtmlElement.ts","../../src/lib/plugins/html/utils/htmlElementToLeaf.ts","../../src/lib/plugins/html/utils/pipeDeserializeHtmlLeaf.ts","../../src/lib/plugins/html/utils/htmlTextNodeToString.ts","../../src/lib/plugins/html/utils/deserializeHtmlNode.ts","../../src/lib/plugins/html/utils/deserializeHtmlElement.ts","../../src/lib/plugins/html/utils/htmlStringToDOMNode.ts","../../src/lib/plugins/html/utils/deserializeHtml.ts","../../src/lib/plugins/html/utils/parseHtmlDocument.ts","../../src/lib/plugins/length/LengthPlugin.ts","../../src/lib/plugins/node-id/NodeIdPlugin.ts","../../src/lib/plugins/node-id/withNodeId.ts","../../src/lib/plugins/slate-extension/SlateExtensionPlugin.ts","../../src/internal/plugin/pipeNormalizeInitialValue.ts","../../src/lib/plugins/slate-extension/transforms/init.ts","../../src/lib/plugins/slate-extension/transforms/insertExitBreak.ts","../../src/lib/plugins/slate-extension/transforms/resetBlock.ts","../../src/lib/plugins/slate-extension/transforms/setValue.ts","../../src/lib/utils/pipeInsertDataQuery.ts","../../src/lib/plugins/ParserPlugin.ts","../../src/lib/plugins/getCorePlugins.ts","../../src/lib/libs/zustand.ts","../../src/react/plugins/SlateReactExtensionPlugin.ts","../../src/react/plugin/toPlatePlugin.ts","../../src/react/plugin/createPlatePlugin.ts","../../src/react/plugin/getEditorPlugin.ts","../../src/react/plugin/getPlugin.ts","../../src/react/plugin/omitPluginContext.ts","../../src/react/plugins/event-editor/EventEditorStore.ts","../../src/react/plugins/event-editor/useFocusEditorEvents.ts","../../src/react/plugins/event-editor/EventEditorPlugin.ts","../../src/react/plugins/event-editor/getEventPlateId.ts","../../src/react/plugins/paragraph/ParagraphPlugin.tsx","../../src/react/plugins/react/withPlateReact.ts","../../src/react/plugins/react/ReactPlugin.ts","../../src/react/editor/getPlateCorePlugins.ts","../../src/react/utils/createPlateFallbackEditor.ts","../../src/react/utils/dom-attributes.ts","../../src/react/utils/getRenderNodeProps.ts","../../src/react/utils/pipeHandler.ts","../../src/react/utils/pipeOnChange.ts","../../src/react/utils/pipeRenderElement.tsx","../../src/react/hooks/useEditableProps.ts","../../src/react/utils/pipeRenderLeaf.tsx","../../src/react/utils/pluginRenderLeaf.tsx","../../src/react/components/plate-nodes.tsx","../../src/react/utils/pipeRenderText.tsx","../../src/react/utils/pluginRenderText.tsx","../../src/react/hooks/useNodePath.ts","../../src/react/hooks/useSlateProps.ts","../../src/react/utils/pluginRenderElement.tsx","../../src/react/stores/element/useElementStore.tsx","../../src/react/stores/element/usePath.ts","../../src/react/stores/plate-controller/plateControllerStore.ts","../../src/react/stores/plate/useEditorPlugin.ts","../../src/react/stores/plate/useEditorSelector.ts","../../src/react/stores/plate/usePluginOption.ts","../../src/react/stores/element/useElementSelector.ts","../../src/react/stores/event-editor/useEventPlateId.ts","../../src/react/components/EditorMethodsEffect.ts","../../src/react/components/EditorRefEffect.tsx","../../src/react/components/Plate.tsx","../../src/internal/hooks/usePlateInstancesWarn.ts","../../src/react/components/PlateContainer.tsx","../../src/react/components/PlateContent.tsx","../../src/react/components/PlateControllerEffect.ts","../../src/react/components/PlateSlate.tsx","../../src/react/components/PlateTest.tsx","../../src/react/editor/usePlateEditor.ts","../../src/react/components/withHOC.tsx"],"sourcesContent":["// Components\nexport {\n  type RenderPlaceholderProps,\n  DefaultPlaceholder,\n  Editable,\n  Slate,\n} from 'slate-react';\n\n// Hooks\nexport {\n  useComposing,\n  useFocused,\n  useReadOnly,\n  useSelected,\n} from 'slate-react';\n\n// Plugin\nexport { withReact } from 'slate-react';\n","import React, { useEffect } from 'react';\n\nimport { useHotkeys } from '@udecode/react-hotkeys';\nimport { isDefined } from '@udecode/utils';\n\nimport type { Shortcut } from '../plugin';\n\nimport { useEditorRef } from '../stores';\n\nexport function EditorHotkeysEffect({\n  id,\n  editableRef,\n}: {\n  editableRef: React.RefObject<HTMLDivElement | null>;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n\n  return (\n    <>\n      {Object.entries(editor.meta.shortcuts).map(\n        ([hotkeyString, hotkeyConfig]) => {\n          if (\n            !hotkeyConfig ||\n            !isDefined(hotkeyConfig.keys) ||\n            !hotkeyConfig.handler\n          ) {\n            return null;\n          }\n\n          return (\n            <HotkeyEffect\n              id={id}\n              key={hotkeyString}\n              editableRef={editableRef}\n              hotkeyConfig={hotkeyConfig}\n            />\n          );\n        }\n      )}\n    </>\n  );\n}\n\nfunction HotkeyEffect({\n  id,\n  editableRef,\n  hotkeyConfig,\n}: {\n  editableRef: React.RefObject<HTMLDivElement | null>;\n  hotkeyConfig: Shortcut;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n  const { keys, handler, ...options } = hotkeyConfig;\n\n  const setHotkeyRef = useHotkeys<HTMLDivElement>(\n    keys!,\n    (event, eventDetails) => {\n      if (\n        handler!({\n          editor,\n          event,\n          eventDetails,\n        }) !== false &&\n        !isDefined(options.preventDefault)\n      ) {\n        // Prevent default if handler returns false and preventDefault is true\n        event.preventDefault();\n      }\n    },\n    {\n      enableOnContentEditable: true,\n      ...options,\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (editableRef.current) {\n      setHotkeyRef(editableRef.current);\n    }\n  }, [setHotkeyRef, editableRef]);\n\n  return null;\n}\n","import type { TElement } from '@udecode/slate';\n\nimport { useAtomStoreValue } from 'jotai-x';\n\nimport { useEditorRef } from '../plate';\nimport { SCOPE_ELEMENT, useElementStore } from './useElementStore';\n\n/**\n * Get the element by plugin key. If no element is found in the context, it will\n * return an empty object.\n */\nexport const useElement = <T extends TElement = TElement>(\n  pluginKey = SCOPE_ELEMENT\n): T => {\n  const editor = useEditorRef();\n  const value = useAtomStoreValue(useElementStore(pluginKey), 'element');\n\n  if (!value) {\n    editor.api.debug.warn(\n      `useElement(${pluginKey}) hook must be used inside the node component's context`,\n      'USE_ELEMENT_CONTEXT'\n    );\n\n    return {} as T;\n  }\n\n  return value as T;\n};\n","import React, { useMemo } from 'react';\n\nimport { atom } from 'jotai';\nimport { useAtomStoreSet, useAtomStoreState, useAtomStoreValue } from 'jotai-x';\n\nimport type { PlateEditor } from '../../editor/PlateEditor';\nimport type { PlateChangeKey, PlateStoreState } from './PlateStore';\n\nimport { createAtomStore } from '../../libs';\nimport { createPlateFallbackEditor } from '../../utils';\nimport {\n  usePlateControllerExists,\n  usePlateControllerStore,\n} from '../plate-controller';\n\nexport type PlateStore = ReturnType<typeof usePlateStore>;\n\nexport const PLATE_SCOPE = 'plate';\n\nexport const GLOBAL_PLATE_SCOPE = Symbol('global-plate');\n\nexport const createPlateStore = <E extends PlateEditor = PlateEditor>({\n  id,\n  composing = false,\n  containerRef = { current: null },\n  decorate = null,\n  editor,\n  isMounted = false,\n  primary = true,\n  readOnly = null,\n  renderElement = null,\n  renderLeaf = null,\n  renderText = null,\n  scrollRef = { current: null },\n  versionDecorate = 1,\n  versionEditor = 1,\n  versionSelection = 1,\n  versionValue = 1,\n  onChange = null,\n  onSelectionChange = null,\n  onValueChange = null,\n  ...state\n}: Partial<PlateStoreState<E>> = {}) =>\n  createAtomStore(\n    {\n      composing,\n      containerRef,\n      decorate,\n      editor,\n      isMounted,\n      primary,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      renderText,\n      scrollRef,\n      versionDecorate,\n      versionEditor,\n      versionSelection,\n      versionValue,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      ...state,\n    } as PlateStoreState<E>,\n    {\n      name: 'plate',\n      suppressWarnings: true,\n      extend: (atoms) => ({\n        trackedEditor: atom((get) => ({\n          editor: get(atoms.editor),\n          version: get(atoms.versionEditor),\n        })),\n        trackedSelection: atom((get) => ({\n          selection: get(atoms.editor).selection,\n          version: get(atoms.versionSelection),\n        })),\n        trackedValue: atom((get) => ({\n          value: get(atoms.editor).children,\n          version: get(atoms.versionValue),\n        })),\n      }),\n    }\n  );\n\nconst {\n  PlateProvider: PlateStoreProvider,\n  plateStore,\n  usePlateSet: usePlateLocalSet,\n  usePlateState: usePlateLocalState,\n  usePlateStore: usePlateLocalStore,\n  usePlateValue: usePlateLocalValue,\n} = createPlateStore();\n\nexport { plateStore, PlateStoreProvider, usePlateLocalStore };\n\nexport const usePlateStore = (id?: string) => {\n  // Try to fetch the store from a Plate provider\n  const localStore =\n    usePlateLocalStore({ scope: id, warnIfNoStore: false }) ?? null;\n\n  const [localStoreExists] = React.useState(!!localStore.store);\n\n  // If no store was found, try to fetch the store from a PlateController\n  const store = (\n    localStoreExists\n      ? localStore\n      : // eslint-disable-next-line react-hooks/rules-of-hooks\n        usePlateControllerStore(id)\n  ) as typeof localStore;\n\n  /**\n   * If we still have no store, there are two possibilities.\n   *\n   * Case 1: There is neither a Plate nor a PlateController above us in the\n   * tree. In this case, throw an error, since calling the hook will never\n   * work.\n   *\n   * Case 2: There is a PlateController, but it has no active editor. In this\n   * case, return a fallback store until an editor becomes active.\n   */\n  const plateControllerExists = usePlateControllerExists();\n  const fallbackStore = useMemo(createPlateStore, []).usePlateStore();\n\n  if (!store) {\n    if (plateControllerExists) {\n      return fallbackStore;\n    }\n\n    throw new Error(\n      `Plate hooks must be used inside a Plate or PlateController`\n    );\n  }\n  return store;\n};\n\nexport const usePlateSet: typeof usePlateLocalSet = (key, options) => {\n  const store = usePlateStore(\n    typeof options === 'string' ? options : options?.scope\n  );\n\n  return useAtomStoreSet(store, key);\n};\n\nexport const usePlateValue = ((key, options) => {\n  const store = usePlateStore(\n    typeof options === 'string' ? options : options?.scope\n  );\n\n  return useAtomStoreValue(store, key);\n}) as typeof usePlateLocalValue;\n\nexport const usePlateState = ((key, options) => {\n  const store = usePlateStore(\n    typeof options === 'string' ? options : options?.scope\n  );\n\n  return useAtomStoreState(store, key);\n}) as typeof usePlateLocalState;\n\n// ─── Selectors ───────────────────────────────────────────────────────────────\n\n/** Get the closest `Plate` id. */\nexport const useEditorId = (): string =>\n  useAtomStoreValue(usePlateStore(), 'editor').id;\n\nexport const useEditorContainerRef = (id?: string) => {\n  return useAtomStoreValue(usePlateStore(id), 'containerRef');\n};\n\nexport const useEditorScrollRef = (id?: string) => {\n  return useAtomStoreValue(usePlateStore(id), 'scrollRef');\n};\n\n/** Returns the scrollRef if it exists, otherwise returns the containerRef. */\nexport const useScrollRef = (id?: string) => {\n  const scrollRef = useEditorScrollRef(id);\n  const containerRef = useEditorContainerRef(id);\n\n  return scrollRef.current ? scrollRef : containerRef;\n};\n\nexport const useEditorMounted = (id?: string): boolean => {\n  return !!useAtomStoreValue(usePlateStore(id), 'isMounted');\n};\n\n/**\n * Whether the editor is read-only. You can also use `useReadOnly` from\n * `slate-react` in node components.\n */\nexport const useEditorReadOnly = (id?: string): boolean => {\n  return !!useAtomStoreValue(usePlateStore(id), 'readOnly');\n};\n\n/** Whether the editor is composing. */\nexport const useEditorComposing = (id?: string): boolean => {\n  return !!useAtomStoreValue(usePlateStore(id), 'composing');\n};\n\n/**\n * Get a reference to the editor instance that remains stable across re-renders.\n * The editor object is enhanced with a `store` property that provides access to\n * the Plate store.\n *\n * @example\n *   ```tsx\n *   const editor = useEditorRef();\n *   const readOnly = useAtomStoreValue(editor.store, 'readOnly');\n */\nexport const useEditorRef = <E extends PlateEditor = PlateEditor>(\n  id?: string\n): E & { store: PlateStore } => {\n  const store = usePlateStore(id);\n  const editor: any =\n    (useAtomStoreValue(store, 'editor') as E) ?? createPlateFallbackEditor();\n\n  editor.store = store;\n\n  return editor;\n};\n\n/** Get the editor selection (deeply memoized). */\nexport const useEditorSelection = (id?: string) =>\n  usePlateStore(id).useTrackedSelectionValue().selection;\n\n/** Get editor state which is updated on editor change. */\nexport const useEditorState = <E extends PlateEditor = PlateEditor>(\n  id?: string\n): E => {\n  return usePlateStore(id).useTrackedEditorValue().editor;\n};\n\n/** Version incremented on each editor change. */\nexport const useEditorVersion = (id?: string) => {\n  return useAtomStoreValue(usePlateStore(id), 'versionEditor');\n};\n\n/** Version incremented on selection change. */\nexport const useSelectionVersion = (id?: string) => {\n  return useAtomStoreValue(usePlateStore(id), 'versionSelection');\n};\n\n/** Get the editor value (deeply memoized). */\nexport const useEditorValue = (id?: string) =>\n  usePlateStore(id).useTrackedValueValue().value;\n\n/** Version incremented on value change. */\nexport const useValueVersion = (id?: string) => {\n  return useAtomStoreValue(usePlateStore(id), 'versionValue');\n};\n\n// ─── Actions ─────────────────────────────────────────────────────────────────\n\nexport const useIncrementVersion = (key: PlateChangeKey, id?: string) => {\n  const previousVersionRef = React.useRef(1);\n\n  const store = usePlateStore(id);\n\n  const setVersionDecorate = useAtomStoreSet(store, 'versionDecorate');\n  const setVersionSelection = useAtomStoreSet(store, 'versionSelection');\n  const setVersionValue = useAtomStoreSet(store, 'versionValue');\n  const setVersionEditor = useAtomStoreSet(store, 'versionEditor');\n\n  return React.useCallback(() => {\n    const nextVersion = previousVersionRef.current + 1;\n\n    switch (key) {\n      case 'versionDecorate': {\n        setVersionDecorate(nextVersion);\n\n        break;\n      }\n      case 'versionEditor': {\n        setVersionEditor(nextVersion);\n\n        break;\n      }\n      case 'versionSelection': {\n        setVersionSelection(nextVersion);\n\n        break;\n      }\n      case 'versionValue': {\n        setVersionValue(nextVersion);\n\n        break;\n      }\n    }\n\n    previousVersionRef.current = nextVersion;\n  }, [\n    key,\n    setVersionDecorate,\n    setVersionEditor,\n    setVersionSelection,\n    setVersionValue,\n  ]);\n};\n\nexport const useRedecorate = (id?: string) => {\n  const updateDecorate = useIncrementVersion('versionDecorate', id);\n\n  return React.useCallback(() => {\n    updateDecorate();\n  }, [updateDecorate]);\n};\n","export { atom } from 'jotai';\n\nexport {\n  createAtomStore,\n  useStoreAtomState,\n  useStoreAtomValue,\n  useStoreSetAtom,\n} from 'jotai-x';\n\nexport {\n  useStoreSelect,\n  useStoreState,\n  useStoreValue,\n  useTracked,\n  useTrackedStore,\n} from 'zustand-x';\n","import { type Editor, type Value, createEditor } from '@udecode/slate';\n\nimport type { AnyPlatePlugin } from '../plugin';\nimport type { EventEditorPlugin, SlateReactExtensionPlugin } from '../plugins';\nimport type { PlateEditor, TPlateEditor } from './PlateEditor';\n\nimport {\n  type AnyPluginConfig,\n  type BaseWithSlateOptions,\n  type CorePlugin,\n  type InferPlugins,\n  withSlate,\n} from '../../lib';\nimport { getPlateCorePlugins } from './getPlateCorePlugins';\n\nexport type PlateCorePlugin =\n  | CorePlugin\n  | typeof EventEditorPlugin\n  | typeof SlateReactExtensionPlugin;\n\nexport type WithPlateOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n> = BaseWithSlateOptions<P> &\n  Pick<\n    Partial<AnyPlatePlugin>,\n    | 'api'\n    | 'decorate'\n    | 'extendEditor'\n    | 'handlers'\n    | 'inject'\n    | 'normalizeInitialValue'\n    | 'options'\n    | 'override'\n    | 'priority'\n    | 'render'\n    | 'shortcuts'\n    | 'transforms'\n    | 'useHooks'\n  > & {\n    // override?: {\n    //   /** Enable or disable plugins */\n    //   enabled?: Partial<Record<KeyofPlugins<InferPlugins<P[]>>, boolean>>;\n    //   plugins?: Partial<\n    //     Record<\n    //       KeyofPlugins<InferPlugins<P[]>>,\n    //       Partial<EditorPlatePlugin<AnyPluginConfig>>\n    //     >\n    //   >;\n    // };\n    value?: ((editor: PlateEditor) => V) | V | string;\n    rootPlugin?: (plugin: AnyPlatePlugin) => AnyPlatePlugin;\n  };\n\n/**\n * Applies Plate enhancements to an editor instance (React version).\n *\n * @remarks\n *   This function supports React-specific features including component rendering,\n *   event handlers, and React hooks integration.\n * @see {@link createPlateEditor} for a higher-level React editor creation function.\n * @see {@link usePlateEditor} for a memoized version in React components.\n * @see {@link withSlate} for the non-React version of editor enhancement.\n */\nexport const withPlate = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n>(\n  e: Editor,\n  { plugins = [], ...options }: WithPlateOptions<V, P> = {}\n): TPlateEditor<V, InferPlugins<P[]>> => {\n  const editor = withSlate<V, P>(e, {\n    ...options,\n    plugins: [...getPlateCorePlugins(), ...plugins],\n  } as any) as unknown as TPlateEditor<V, InferPlugins<P[]>>;\n\n  return editor;\n};\n\nexport type CreatePlateEditorOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n> = WithPlateOptions<V, P> & {\n  /**\n   * Initial editor to be extended with `withPlate`.\n   *\n   * @default createEditor()\n   */\n  editor?: Editor;\n};\n\n/**\n * Creates a Plate editor (React version).\n *\n * This function creates a fully configured Plate editor instance with\n * React-specific enhancements including component rendering, event handlers,\n * and hooks integration. It applies all specified plugins and configurations to\n * create a functional editor.\n *\n * Examples:\n *\n * ```ts\n * const editor = createPlateEditor({\n *   plugins: [ParagraphPlugin, HeadingPlugin],\n *   value: [{ type: 'p', children: [{ text: 'Hello world!' }] }],\n * });\n *\n * // Editor with custom components\n * const editor = createPlateEditor({\n *   plugins: [ParagraphPlugin.withComponent(ParagraphElement)],\n *   components: { [CodePlugin.key]: CodeLeaf },\n * });\n *\n * // Editor with React-specific options\n * const editor = createPlateEditor({\n *   plugins: [ParagraphPlugin],\n *   handlers: { onKeyDown: customKeyHandler },\n * });\n * ```\n *\n * @see {@link createSlateEditor} for a non-React version of editor creation.\n * @see {@link usePlateEditor} for a memoized version in React components.\n * @see {@link withPlate} for the underlying function that applies Plate enhancements to an editor.\n */\nexport const createPlateEditor = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n>({\n  editor = createEditor(),\n  ...options\n}: CreatePlateEditorOptions<V, P> = {}): TPlateEditor<V, InferPlugins<P[]>> => {\n  return withPlate<V, P>(editor, options);\n};\n","import {\n  type Editor,\n  type TSelection,\n  type Value,\n  createEditor,\n} from '@udecode/slate';\nimport { nanoid } from 'nanoid';\n\nimport type { AnyPluginConfig, NodeComponents } from '../plugin/BasePlugin';\nimport type { AnySlatePlugin } from '../plugin/SlatePlugin';\nimport type { NodeIdConfig } from '../plugins/node-id/NodeIdPlugin';\nimport type { InferPlugins, SlateEditor, TSlateEditor } from './SlateEditor';\n\nimport { resolvePlugins } from '../../internal/plugin/resolvePlugins';\nimport { createSlatePlugin } from '../plugin/createSlatePlugin';\nimport { getPluginType, getSlatePlugin } from '../plugin/getSlatePlugin';\nimport { type CorePlugin, getCorePlugins } from '../plugins/getCorePlugins';\n\nexport type BaseWithSlateOptions<P extends AnyPluginConfig = CorePlugin> = {\n  /**\n   * Unique identifier for the editor instance.\n   *\n   * @default nanoid()\n   */\n  id?: string;\n  /**\n   * Determines which mark/element to apply at boundaries between different\n   * marks, based on cursor movement using the left/right arrow keys.\n   *\n   * Example: <text bold>Bold</text><cursor><text italic>Italic</text>\n   *\n   * If the cursor moved here from the left (via → key), typing applies\n   * **bold**.\n   *\n   * If the cursor moved here from the right (via ← key), typing applies\n   * _italic_.\n   *\n   * Without mark affinity, the preceding mark (**bold**) is always applied\n   * regardless of direction.\n   *\n   * @default true\n   */\n  affinity?: boolean;\n  /**\n   * Select the editor after initialization.\n   *\n   * @default false\n   *\n   * - `true` | 'end': Select the end of the editor\n   * - `false`: Do not select anything\n   * - `'start'`: Select the start of the editor\n   */\n  autoSelect?: boolean | 'end' | 'start';\n  /** Specifies the component for each plugin key. */\n  components?: NodeComponents;\n  /** Specifies the component for each plugin key. */\n  // components?: Partial<\n  //   Record<KeyofNodePlugins<InferPlugins<P[]>>, NodeComponent | null>\n  // >;\n  /**\n   * Specifies the maximum number of characters allowed in the editor. When the\n   * limit is reached, further input will be prevented.\n   */\n  maxLength?: number;\n  /**\n   * Configuration for automatic node ID generation and management.\n   *\n   * Unless set to `false`, the editor automatically adds unique IDs to nodes\n   * through the core NodeIdPlugin:\n   *\n   * - Normalizes the initial value for missing IDs\n   * - Adds IDs to new nodes during insertion\n   * - Preserves or reuses IDs on undo/redo and copy/paste operations\n   * - Handles ID conflicts and duplicates\n   *\n   * @default { idKey: 'id', filterInline: true, filterText: true, idCreator: () => nanoid(10) }\n   */\n  nodeId?: NodeIdConfig['options'] | boolean;\n  // override?: {\n  //   components?: Partial<\n  //     Record<KeyofNodePlugins<InferPlugins<P[]>>, NodeComponent | null>\n  //   >;\n  // };\n  /**\n   * Array of plugins to be loaded into the editor. Plugins extend the editor's\n   * functionality and define custom behavior.\n   */\n  plugins?: P[];\n  /**\n   * Editor read-only initial state. For dynamic read-only control, use the\n   * `Plate.readOnly` prop instead.\n   *\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * Initial selection state for the editor. Defines where the cursor should be\n   * positioned when the editor loads.\n   */\n  selection?: TSelection;\n  /**\n   * When `true`, normalizes the initial `value` passed to the editor. This is\n   * useful when adding normalization rules to already existing content or when\n   * the initial value might not conform to the current schema.\n   *\n   * Note: Normalization may take time for large documents.\n   *\n   * @default false\n   */\n  shouldNormalizeEditor?: boolean;\n  /**\n   * When `true`, skips the initial value, selection, and normalization logic.\n   * Useful when the editor state is managed externally (e.g., with Yjs\n   * collaboration) or when you want to manually control the initialization\n   * process.\n   *\n   * @default false\n   */\n  skipInitialization?: boolean;\n};\n\nexport type WithSlateOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n> = BaseWithSlateOptions<P> &\n  Pick<\n    Partial<AnySlatePlugin>,\n    | 'api'\n    | 'decorate'\n    | 'extendEditor'\n    | 'inject'\n    | 'normalizeInitialValue'\n    | 'options'\n    | 'override'\n    | 'transforms'\n  > & {\n    // override?: {\n    //   /** Enable or disable plugins */\n    //   enabled?: Partial<Record<KeyofPlugins<InferPlugins<P[]>>, boolean>>;\n    //   plugins?: Partial<\n    //     Record<\n    //       KeyofPlugins<InferPlugins<P[]>>,\n    //       PartialEditorPlugin<AnyPluginConfig>\n    //     >\n    //   >;\n    // };\n    /**\n     * Initial content for the editor.\n     *\n     * Can be:\n     *\n     * - A static value (array of nodes)\n     * - An HTML string that will be deserialized\n     * - A function that returns a value or Promise<value>\n     * - `null` for an empty editor\n     *\n     * @default [{ type: 'p'; children: [{ text: '' }] }]\n     */\n    value?: ((editor: SlateEditor) => Promise<V> | V) | V | string | null;\n    /** Function to configure the root plugin */\n    rootPlugin?: (plugin: AnySlatePlugin) => AnySlatePlugin;\n  };\n\n/**\n * Applies Plate enhancements to an editor instance (non-React version).\n *\n * @remarks\n *   This function supports server-side usage as it doesn't include React-specific\n *   features like component rendering or hooks integration.\n * @see {@link createSlateEditor} for a higher-level non-React editor creation function.\n * @see {@link createPlateEditor} for a React-specific version of editor creation.\n * @see {@link usePlateEditor} for a memoized React version.\n * @see {@link withPlate} for the React-specific enhancement function.\n */\nexport const withSlate = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n>(\n  e: Editor,\n  {\n    id,\n    affinity = true,\n    autoSelect,\n    maxLength,\n    nodeId,\n    plugins = [],\n    readOnly = false,\n    rootPlugin,\n    selection,\n    shouldNormalizeEditor,\n    skipInitialization,\n    value,\n    ...pluginConfig\n  }: WithSlateOptions<V, P> = {}\n): TSlateEditor<V, InferPlugins<P[]>> => {\n  const editor = e as SlateEditor;\n\n  editor.id = id ?? editor.id ?? nanoid();\n  editor.meta.key = editor.meta.key ?? nanoid();\n  editor.meta.isFallback = false;\n  editor.dom = {\n    composing: false,\n    currentKeyboardEvent: null,\n    focused: false,\n    prevSelection: null,\n    readOnly,\n  };\n\n  editor.getApi = () => editor.api as any;\n  editor.getTransforms = () => editor.transforms as any;\n  editor.getPlugin = (plugin) => getSlatePlugin(editor, plugin) as any;\n  editor.getType = (pluginKey) => getPluginType(editor, pluginKey);\n  editor.getInjectProps = (plugin) => {\n    const nodeProps =\n      editor.getPlugin<AnySlatePlugin>(plugin).inject?.nodeProps ?? ({} as any);\n\n    nodeProps.nodeKey = nodeProps.nodeKey ?? editor.getType(plugin.key);\n    nodeProps.styleKey = nodeProps.styleKey ?? nodeProps.nodeKey;\n\n    return nodeProps;\n  };\n  editor.getOptionsStore = (plugin) => {\n    return editor.getPlugin(plugin).optionsStore;\n  };\n  editor.getOptions = (plugin) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return editor.getPlugin(plugin).options;\n\n    return editor.getOptionsStore(plugin).get('state');\n  };\n  editor.getOption = (plugin, key, ...args) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return editor.getPlugin(plugin).options[key];\n\n    if (!(key in store.get('state')) && !(key in store.selectors)) {\n      editor.api.debug.error(\n        `editor.getOption: ${key as string} option is not defined in plugin ${plugin.key}.`,\n        'OPTION_UNDEFINED'\n      );\n      return;\n    }\n\n    return (store.get as any)(key, ...args);\n  };\n  editor.setOption = (plugin: any, key: any, ...args: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return;\n\n    if (!(key in store.get('state'))) {\n      editor.api.debug.error(\n        `editor.setOption: ${key} option is not defined in plugin ${plugin.key}.`,\n        'OPTION_UNDEFINED'\n      );\n      return;\n    }\n\n    (store.set as any)(key, ...args);\n  };\n  editor.setOptions = (plugin: any, options: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return;\n    if (typeof options === 'object') {\n      store.set('state', (draft: any) => {\n        Object.assign(draft, options);\n      });\n    } else if (typeof options === 'function') {\n      store.set('state', options);\n    }\n  };\n\n  // Plugin initialization code\n  const corePlugins = getCorePlugins({\n    affinity,\n    maxLength,\n    nodeId,\n    plugins,\n  });\n\n  let rootPluginInstance = createSlatePlugin({\n    key: 'root',\n    priority: 10_000,\n    ...pluginConfig,\n    override: {\n      ...pluginConfig.override,\n      components: {\n        ...pluginConfig.components,\n        ...pluginConfig.override?.components,\n      },\n    },\n    plugins: [...corePlugins, ...plugins],\n  });\n\n  // Apply rootPlugin configuration if provided\n  if (rootPlugin) {\n    rootPluginInstance = rootPlugin(rootPluginInstance) as any;\n  }\n\n  resolvePlugins(editor, [rootPluginInstance]);\n\n  /** Ignore normalizeNode overrides if shouldNormalizeNode returns false */\n  const normalizeNode = editor.tf.normalizeNode;\n  editor.tf.normalizeNode = (...args) => {\n    if (!editor.api.shouldNormalizeNode(args[0])) {\n      return;\n    }\n\n    return normalizeNode(...args);\n  };\n  editor.normalizeNode = editor.tf.normalizeNode;\n\n  if (!skipInitialization) {\n    void editor.tf.init({\n      autoSelect,\n      selection,\n      shouldNormalizeEditor,\n      value,\n    });\n  }\n\n  return editor as any;\n};\n\nexport type CreateSlateEditorOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n> = WithSlateOptions<V, P> & {\n  /**\n   * Initial editor to be extended with `withSlate`.\n   *\n   * @default createEditor()\n   */\n  editor?: Editor;\n};\n\n/**\n * Creates a Slate editor (non-React version).\n *\n * This function creates a fully configured Plate editor instance that can be\n * used in non-React environments or server-side contexts. It applies all the\n * specified plugins and configurations to create a functional editor.\n *\n * Examples:\n *\n * ```ts\n * const editor = createSlateEditor({\n *   plugins: [ParagraphPlugin, HeadingPlugin],\n *   value: [{ type: 'p', children: [{ text: 'Hello world!' }] }],\n * });\n *\n * // Editor with custom configuration\n * const editor = createSlateEditor({\n *   plugins: [ParagraphPlugin],\n *   maxLength: 1000,\n *   nodeId: { idCreator: () => uuidv4() },\n *   autoSelect: 'end',\n * });\n *\n * // Server-side editor\n * const editor = createSlateEditor({\n *   plugins: [ParagraphPlugin],\n *   value: '<p>HTML content</p>',\n *   skipInitialization: true,\n * });\n * ```\n *\n * @see {@link createPlateEditor} for a React-specific version of editor creation.\n * @see {@link usePlateEditor} for a memoized React version.\n * @see {@link withSlate} for the underlying function that applies Slate enhancements to an editor.\n */\nexport const createSlateEditor = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n>({\n  editor = createEditor(),\n  ...options\n}: CreateSlateEditorOptions<V, P> = {}) => {\n  return withSlate<V, P>(editor, options);\n};\n","import {\n  assignLegacyApi,\n  assignLegacyTransforms,\n  syncLegacyMethods,\n} from '@udecode/slate';\nimport { isDefined } from '@udecode/utils';\nimport merge from 'lodash/merge.js';\nimport { createZustandStore } from 'zustand-x';\n\nimport type { SlateEditor, SlatePlugin, SlatePlugins } from '../../lib';\n\nimport { getEditorPlugin } from '../../lib/plugin';\nimport { mergePlugins } from '../utils/mergePlugins';\nimport { resolvePlugin } from './resolvePlugin';\n\n/**\n * Initialize and configure the editor's plugin system. This function sets up\n * the editor's plugins, resolving core and custom plugins, and applying any\n * overrides specified in the plugins.\n */\nexport const resolvePlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins = []\n) => {\n  editor.plugins = {};\n  editor.meta.pluginList = [];\n  editor.meta.shortcuts = {} as Record<\n    string,\n    SlatePlugin['shortcuts'][string]\n  >;\n  editor.meta.components = {};\n  editor.meta.pluginCache = {\n    decorate: [],\n    handlers: {\n      onChange: [],\n    },\n    inject: {\n      nodeProps: [],\n    },\n    node: {\n      isContainer: [],\n      isElement: [],\n      isInline: [],\n      isLeaf: [],\n      isMarkableVoid: [],\n      isNotSelectable: [],\n      isStrictSiblings: [],\n      isVoid: [],\n      types: {},\n    },\n    normalizeInitialValue: [],\n    render: {\n      aboveEditable: [],\n      aboveNodes: [],\n      aboveSlate: [],\n      afterContainer: [],\n      afterEditable: [],\n      beforeContainer: [],\n      beforeEditable: [],\n      belowNodes: [],\n      belowRootNodes: [],\n    },\n    rules: {\n      match: [],\n    },\n    useHooks: [],\n  };\n\n  const resolvedPlugins = resolveAndSortPlugins(editor, plugins);\n\n  applyPluginsToEditor(editor, resolvedPlugins);\n\n  resolvePluginOverrides(editor);\n\n  resolvePluginStores(editor);\n\n  // Last pass\n  editor.meta.pluginList.forEach((plugin: SlatePlugin) => {\n    if (plugin.extendEditor) {\n      editor = plugin.extendEditor(getEditorPlugin(editor, plugin) as any);\n\n      // Sync any editor methods that were modified by extendEditor\n      syncLegacyMethods(editor);\n    }\n\n    // Sync overridden plugin methods to legacy editor methods\n    resolvePluginMethods(editor, plugin);\n\n    if (plugin.node?.isContainer) {\n      editor.meta.pluginCache.node.isContainer.push(plugin.key);\n    }\n\n    editor.meta.pluginCache.node.types[plugin.node.type] = plugin.key;\n\n    if (plugin.inject?.nodeProps) {\n      editor.meta.pluginCache.inject.nodeProps.push(plugin.key);\n    }\n\n    if (plugin.render?.node) {\n      editor.meta.components[plugin.key] = plugin.render.node;\n    }\n\n    if (plugin.node?.isLeaf) {\n      editor.meta.pluginCache.node.isLeaf.push(plugin.key);\n    }\n\n    if (plugin.node?.isElement) {\n      editor.meta.pluginCache.node.isElement.push(plugin.key);\n    }\n\n    if (plugin.node?.isInline) {\n      editor.meta.pluginCache.node.isInline.push(plugin.key);\n    }\n\n    if (plugin.node?.isVoid) {\n      editor.meta.pluginCache.node.isVoid.push(plugin.key);\n    }\n\n    if (plugin.node?.isMarkableVoid) {\n      editor.meta.pluginCache.node.isMarkableVoid.push(plugin.key);\n    }\n\n    if (plugin.node?.isStrictSiblings) {\n      editor.meta.pluginCache.node.isStrictSiblings.push(plugin.key);\n    }\n\n    if (plugin.node?.isSelectable === false) {\n      editor.meta.pluginCache.node.isNotSelectable.push(plugin.key);\n    }\n\n    if (plugin.render.aboveEditable) {\n      editor.meta.pluginCache.render.aboveEditable.push(plugin.key);\n    }\n\n    if (plugin.render.aboveSlate) {\n      editor.meta.pluginCache.render.aboveSlate.push(plugin.key);\n    }\n\n    if (plugin.render.afterEditable) {\n      editor.meta.pluginCache.render.afterEditable.push(plugin.key);\n    }\n\n    if (plugin.render.beforeEditable) {\n      editor.meta.pluginCache.render.beforeEditable.push(plugin.key);\n    }\n\n    if (plugin.rules?.match) {\n      editor.meta.pluginCache.rules.match.push(plugin.key);\n    }\n\n    if (plugin.render.afterContainer) {\n      editor.meta.pluginCache.render.afterContainer.push(plugin.key);\n    }\n\n    if (plugin.render.beforeContainer) {\n      editor.meta.pluginCache.render.beforeContainer.push(plugin.key);\n    }\n\n    if (plugin.render.belowRootNodes) {\n      editor.meta.pluginCache.render.belowRootNodes.push(plugin.key);\n    }\n\n    if (plugin.normalizeInitialValue) {\n      editor.meta.pluginCache.normalizeInitialValue.push(plugin.key);\n    }\n\n    if (plugin.decorate) {\n      editor.meta.pluginCache.decorate.push(plugin.key);\n    }\n\n    if (plugin.render.aboveNodes) {\n      editor.meta.pluginCache.render.aboveNodes.push(plugin.key);\n    }\n\n    if (plugin.render.belowNodes) {\n      editor.meta.pluginCache.render.belowNodes.push(plugin.key);\n    }\n\n    if ((plugin as any).useHooks) {\n      editor.meta.pluginCache.useHooks.push(plugin.key);\n    }\n\n    if ((plugin as any).handlers?.onChange) {\n      editor.meta.pluginCache.handlers.onChange.push(plugin.key);\n    }\n  });\n\n  resolvePluginShortcuts(editor);\n\n  return editor;\n};\n\nconst resolvePluginStores = (editor: SlateEditor) => {\n  // Create zustand stores for each plugin\n  editor.meta.pluginList.forEach((plugin) => {\n    let store = createZustandStore(plugin.options, {\n      mutative: true,\n      name: plugin.key,\n    });\n\n    // Apply option extensions\n    if (\n      (plugin as any).__selectorExtensions &&\n      (plugin as any).__selectorExtensions.length > 0\n    ) {\n      (plugin as any).__selectorExtensions.forEach((extension: any) => {\n        const extendedOptions = extension(getEditorPlugin(editor, plugin));\n\n        store = store.extendSelectors(() => extendedOptions);\n      });\n    }\n\n    plugin.optionsStore = store;\n  });\n};\n\nconst resolvePluginMethods = (editor: SlateEditor, plugin: any) => {\n  // Merge APIs\n  Object.entries(plugin.api).forEach(([apiKey, apiFunction]) => {\n    (editor.api as any)[apiKey] = apiFunction;\n  });\n\n  // Apply API and transform extensions\n  if (plugin.__apiExtensions && plugin.__apiExtensions.length > 0) {\n    plugin.__apiExtensions.forEach(\n      ({ extension, isOverride, isPluginSpecific, isTransform }: any) => {\n        const newExtensions = extension(getEditorPlugin(editor, plugin) as any);\n\n        if (isOverride) {\n          // Handle combined API and transforms override\n          if (newExtensions.api) {\n            merge(editor.api, newExtensions.api);\n            merge(plugin.api, newExtensions.api);\n            assignLegacyApi(editor, editor.api);\n          }\n          if (newExtensions.transforms) {\n            merge(editor.transforms, newExtensions.transforms);\n            merge(plugin.transforms, newExtensions.transforms);\n            assignLegacyTransforms(editor, newExtensions.transforms);\n          }\n        } else if (isTransform) {\n          // Handle transforms\n          if (isPluginSpecific) {\n            // Plugin-specific transform\n            if (!(editor.transforms as any)[plugin.key]) {\n              (editor.transforms as any)[plugin.key] = {};\n            }\n            if (!(plugin.transforms as any)[plugin.key]) {\n              (plugin.transforms as any)[plugin.key] = {};\n            }\n\n            merge((editor.transforms as any)[plugin.key], newExtensions);\n            merge((plugin.transforms as any)[plugin.key], newExtensions);\n          } else {\n            // Editor-wide transform\n            merge(editor.transforms, newExtensions);\n            merge(plugin.transforms, newExtensions);\n            assignLegacyTransforms(editor, newExtensions);\n          }\n        } else {\n          // Handle APIs\n          if (isPluginSpecific) {\n            // Plugin-specific API\n            if (!(editor.api as any)[plugin.key]) {\n              (editor.api as any)[plugin.key] = {};\n            }\n            if (!(plugin.api as any)[plugin.key]) {\n              (plugin.api as any)[plugin.key] = {};\n            }\n\n            merge((editor.api as any)[plugin.key], newExtensions);\n            merge((plugin.api as any)[plugin.key], newExtensions);\n          } else {\n            // Editor-wide API\n            merge(editor.api, newExtensions);\n            merge(plugin.api, newExtensions);\n            assignLegacyApi(editor, editor.api);\n          }\n        }\n      }\n    );\n    delete plugin.__apiExtensions;\n  }\n};\n\nconst resolvePluginShortcuts = (editor: SlateEditor) => {\n  editor.meta.shortcuts = {} as Record<\n    string,\n    SlatePlugin['shortcuts'][string]\n  >; // Initialize with a more specific type\n\n  editor.meta.pluginList.forEach((plugin) => {\n    Object.entries(plugin.shortcuts).forEach(([originalKey, hotkey]) => {\n      const namespacedKey = `${plugin.key}.${originalKey}`;\n\n      if (hotkey === null) {\n        // If hotkey is null, remove the namespaced shortcut\n        delete (\n          editor.meta.shortcuts as Record<\n            string,\n            SlatePlugin['shortcuts'][string]\n          >\n        )[namespacedKey];\n      } else if (hotkey && typeof hotkey === 'object') {\n        const resolvedHotkey = { ...hotkey } as NonNullable<\n          SlatePlugin['shortcuts'][string]\n        >;\n\n        // If no custom handler is provided, try to use plugin transform method as handler\n        if (!resolvedHotkey.handler) {\n          const pluginSpecificTransforms = (plugin.transforms as any)?.[\n            plugin.key\n          ];\n          const pluginSpecificApi = (plugin.api as any)?.[plugin.key];\n\n          if (pluginSpecificTransforms?.[originalKey]) {\n            resolvedHotkey.handler = () => {\n              return pluginSpecificTransforms[originalKey]();\n            };\n          } else if (pluginSpecificApi?.[originalKey]) {\n            resolvedHotkey.handler = () => {\n              return pluginSpecificApi[originalKey]();\n            };\n          }\n        }\n\n        // Set shortcut priority, falling back to plugin priority\n        resolvedHotkey.priority = resolvedHotkey.priority ?? plugin.priority;\n\n        (\n          editor.meta.shortcuts as Record<\n            string,\n            SlatePlugin['shortcuts'][string]\n          >\n        )[namespacedKey] = resolvedHotkey;\n      }\n    });\n  });\n};\n\nconst flattenAndResolvePlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n): Map<string, SlatePlugin> => {\n  const pluginMap = new Map<string, SlatePlugin>();\n\n  const processPlugin = (plugin: SlatePlugin) => {\n    const resolvedPlugin = resolvePlugin(editor, plugin);\n\n    if (resolvedPlugin.key) {\n      const existingPlugin = pluginMap.get(resolvedPlugin.key);\n\n      if (existingPlugin) {\n        pluginMap.set(\n          resolvedPlugin.key,\n          mergePlugins(existingPlugin, resolvedPlugin)\n        );\n      } else {\n        pluginMap.set(resolvedPlugin.key, resolvedPlugin);\n      }\n    } else {\n      // If the plugin has no key, we just just skip it.\n    }\n\n    if (resolvedPlugin.plugins && resolvedPlugin.plugins.length > 0) {\n      resolvedPlugin.plugins.forEach(processPlugin);\n    }\n  };\n\n  plugins.forEach(processPlugin);\n\n  return pluginMap;\n};\n\nexport const resolveAndSortPlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n): SlatePlugins => {\n  // Step 1: Resolve, flatten, and merge all plugins\n  const pluginMap = flattenAndResolvePlugins(editor, plugins);\n\n  // Step 2: Filter out disabled plugins\n  const enabledPlugins = Array.from(pluginMap.values()).filter(\n    (plugin) => plugin.enabled !== false\n  );\n\n  // Step 3: Sort plugins by priority\n  enabledPlugins.sort((a, b) => b.priority - a.priority);\n\n  // Step 4: Reorder based on dependencies\n  const orderedPlugins: SlatePlugins = [];\n  const visited = new Set<string>();\n\n  const visit = (plugin: SlatePlugin) => {\n    if (visited.has(plugin.key)) return;\n\n    visited.add(plugin.key);\n\n    plugin.dependencies?.forEach((depKey) => {\n      const depPlugin = pluginMap.get(depKey);\n\n      if (depPlugin) {\n        visit(depPlugin);\n      } else {\n        editor.api.debug.warn(\n          `Plugin \"${plugin.key}\" depends on missing plugin \"${depKey}\"`,\n          'PLUGIN_DEPENDENCY_MISSING'\n        );\n      }\n    });\n\n    orderedPlugins.push(plugin);\n  };\n\n  enabledPlugins.forEach(visit);\n\n  return orderedPlugins;\n};\n\nexport const applyPluginsToEditor = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n) => {\n  editor.meta.pluginList = plugins;\n  editor.plugins = Object.fromEntries(\n    plugins.map((plugin) => [plugin.key, plugin])\n  );\n};\n\nexport const resolvePluginOverrides = (editor: SlateEditor) => {\n  const applyOverrides = (plugins: SlatePlugin[]): SlatePlugin[] => {\n    let overriddenPlugins = [...plugins];\n\n    const enabledOverrides: Record<string, boolean> = {};\n    const componentOverrides: Record<\n      string,\n      { component: any; priority: number }\n    > = {};\n    const pluginOverrides: Record<string, Partial<SlatePlugin>> = {};\n\n    // Collect all overrides\n    for (const plugin of plugins) {\n      if (plugin.override.enabled) {\n        Object.assign(enabledOverrides, plugin.override.enabled);\n      }\n      // TODO react\n      if ((plugin.override as any).components) {\n        Object.entries((plugin.override as any).components).forEach(\n          ([key, component]) => {\n            if (\n              !componentOverrides[key] ||\n              plugin.priority > componentOverrides[key].priority\n            ) {\n              componentOverrides[key] = {\n                component,\n                priority: plugin.priority,\n              };\n            }\n          }\n        );\n      }\n      if (plugin.override.plugins) {\n        Object.entries(plugin.override.plugins).forEach(([key, value]) => {\n          pluginOverrides[key] = mergePlugins(pluginOverrides[key], value);\n\n          if (value.enabled !== undefined) {\n            enabledOverrides[key] = value.enabled;\n          }\n        });\n      }\n    }\n\n    // Apply overrides\n    overriddenPlugins = overriddenPlugins.map((p) => {\n      let updatedPlugin = { ...p };\n\n      // Apply plugin overrides\n      if (pluginOverrides[p.key]) {\n        updatedPlugin = mergePlugins(updatedPlugin, pluginOverrides[p.key]);\n      }\n      // Apply component overrides\n      // TODO react\n      if (\n        componentOverrides[p.key] &&\n        ((!(p as any).render.node && !(p as any).node.component) ||\n          componentOverrides[p.key].priority > p.priority)\n      ) {\n        (updatedPlugin as any).render.node =\n          componentOverrides[p.key].component;\n        (updatedPlugin as any).node.component =\n          componentOverrides[p.key].component;\n      }\n\n      // Apply enabled overrides\n      const enabled = enabledOverrides[p.key] ?? updatedPlugin.enabled;\n\n      if (isDefined(enabled)) {\n        updatedPlugin.enabled = enabled;\n      }\n\n      return updatedPlugin;\n    });\n\n    return overriddenPlugins\n      .filter((p) => p.enabled !== false)\n      .map((plugin) => ({\n        ...plugin,\n        plugins: applyOverrides(plugin.plugins || []),\n      }));\n  };\n\n  applyPluginsToEditor;\n\n  editor.meta.pluginList = applyOverrides(editor.meta.pluginList as any);\n  editor.plugins = Object.fromEntries(\n    editor.meta.pluginList.map((plugin) => [plugin.key, plugin])\n  );\n};\n","import { type Modify, isDefined } from '@udecode/utils';\n\nimport type { SlateEditor } from '../editor/SlateEditor';\nimport type { AnyPluginConfig, PluginConfig } from './BasePlugin';\nimport type {\n  SlatePlugin,\n  SlatePluginMethods,\n  SlatePlugins,\n} from './SlatePlugin';\n\nimport { isFunction } from '../../internal/utils/isFunction';\nimport { mergePlugins } from '../../internal/utils/mergePlugins';\n\ntype SlatePluginConfig<\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n  S = {},\n> = Omit<\n  Partial<\n    Modify<\n      SlatePlugin<PluginConfig<K, O, A, T, S>>,\n      { node?: Partial<SlatePlugin<PluginConfig<K, O, A, T, S>>['node']> }\n    >\n  >,\n  keyof SlatePluginMethods | 'optionsStore'\n>;\n\ntype TSlatePluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    Modify<\n      SlatePlugin<C>,\n      {\n        node?: Partial<SlatePlugin<C>['node']>;\n      }\n    >\n  >,\n  keyof SlatePluginMethods | 'optionsStore'\n>;\n\n/**\n * Creates a new Plate plugin with the given configuration.\n *\n * @remarks\n *   - The plugin's key is required and specified by the K generic.\n *   - The `__extensions` array stores functions to be applied when `resolvePlugin`\n *       is called with an editor.\n *   - The `extend` method adds new extensions to be applied later.\n *   - The `extendPlugin` method extends an existing plugin (including nested\n *       plugins) or adds a new one if not found.\n *\n * @example\n *   const myPlugin = createSlatePlugin<\n *     'myPlugin',\n *     MyOptions,\n *     MyApi,\n *     MyTransforms\n *   >({\n *     key: 'myPlugin',\n *     options: { someOption: true },\n *     transforms: { someTransform: () => {} },\n *   });\n *\n *   const extendedPlugin = myPlugin.extend({\n *     options: { anotherOption: false },\n *   });\n *\n *   const pluginWithNestedExtension = extendedPlugin.extendPlugin(\n *     nestedPlugin,\n *     { options: { nestedOption: true } }\n *   );\n *\n * @template K - The literal type of the plugin key.\n * @template O - The type of the plugin options.\n * @template A - The type of the plugin utilities.\n * @template T - The type of the plugin transforms.\n * @template S - The type of the plugin storage.\n * @param {Partial<SlatePlugin<K, O, A, T, S>>} config - The configuration\n *   object for the plugin.\n * @returns {SlatePlugin<K, O, A, T, S>} A new Plate plugin instance with the\n *   following properties and methods:\n *\n *   - All properties from the input config, merged with default values.\n *   - `configure`: A method to create a new plugin instance with updated options.\n *   - `extend`: A method to create a new plugin instance with additional\n *       configuration.\n *   - `extendPlugin`: A method to extend an existing plugin (including nested\n *       plugins) or add a new one if not found.\n */\nexport function createSlatePlugin<\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n  S = {},\n>(\n  config:\n    | ((editor: SlateEditor) => SlatePluginConfig<K, O, A, T, S>)\n    | SlatePluginConfig<K, O, A, T, S> = {}\n): SlatePlugin<PluginConfig<K, O, A, T, S>> {\n  let baseConfig: Partial<SlatePlugin<PluginConfig<K, O, A, T, S>>>;\n  let initialExtension: any;\n\n  if (isFunction(config)) {\n    baseConfig = { key: '' as K };\n    initialExtension = (editor: any) => config(editor);\n  } else {\n    baseConfig = config as any;\n  }\n\n  const key = baseConfig.key ?? '';\n\n  const plugin = mergePlugins(\n    {\n      key,\n      __apiExtensions: [],\n      __configuration: null,\n      __extensions: initialExtension ? [initialExtension] : [],\n      __selectorExtensions: [],\n      api: {},\n      dependencies: [],\n      editor: {},\n      handlers: {},\n      inject: {},\n      node: { type: key },\n      options: {},\n      override: {},\n      parser: {},\n      parsers: {},\n      plugins: [],\n      priority: 100,\n      render: {},\n      rules: {},\n      shortcuts: {},\n      transforms: {},\n    },\n    config\n  ) as unknown as SlatePlugin<PluginConfig<K, O, A, T, S>>;\n\n  if (plugin.node.isLeaf && !isDefined(plugin.node.isDecoration)) {\n    plugin.node.isDecoration = true;\n  }\n\n  plugin.configure = (config) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__configuration = (ctx) =>\n      isFunction(config) ? config(ctx as any) : config;\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.configurePlugin = (p, config) => {\n    const newPlugin = { ...plugin };\n\n    const configureNestedPlugin = (\n      plugins: SlatePlugins\n    ): { found: boolean; plugins: SlatePlugins } => {\n      let found = false;\n\n      const updatedPlugins = plugins.map((nestedPlugin) => {\n        if (nestedPlugin.key === p.key) {\n          found = true;\n\n          return createSlatePlugin({\n            ...nestedPlugin,\n            __configuration: (ctx: any) =>\n              isFunction(config) ? config(ctx) : config,\n          } as any);\n        }\n        if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {\n          const result = configureNestedPlugin(nestedPlugin.plugins);\n\n          if (result.found) {\n            found = true;\n\n            return { ...nestedPlugin, plugins: result.plugins };\n          }\n        }\n\n        return nestedPlugin;\n      });\n\n      return { found, plugins: updatedPlugins };\n    };\n\n    const result = configureNestedPlugin(newPlugin.plugins as any);\n    newPlugin.plugins = result.plugins as any;\n\n    // We're not adding a new plugin if not found\n\n    return createSlatePlugin(newPlugin);\n  };\n\n  plugin.extendEditorApi = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: false },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendSelectors = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__selectorExtensions = [\n      ...(newPlugin.__selectorExtensions as any),\n      extension,\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendApi = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendEditorTransforms = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: false, isTransform: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendTransforms = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: true, isTransform: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.overrideEditor = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      {\n        extension,\n        isOverride: true,\n        isPluginSpecific: false,\n        isTransform: true,\n      },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extend = (extendConfig) => {\n    let newPlugin = { ...plugin };\n\n    if (isFunction(extendConfig)) {\n      newPlugin.__extensions = [\n        ...(newPlugin.__extensions as any),\n        extendConfig,\n      ];\n    } else {\n      newPlugin = mergePlugins(newPlugin, extendConfig as any);\n    }\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.clone = () => mergePlugins(plugin);\n\n  plugin.extendPlugin = (p, extendConfig) => {\n    const newPlugin = { ...plugin };\n\n    const extendNestedPlugin = (\n      plugins: SlatePlugins\n    ): { found: boolean; plugins: SlatePlugins } => {\n      let found = false;\n      const updatedPlugins = plugins.map((nestedPlugin) => {\n        if (nestedPlugin.key === p.key) {\n          found = true;\n\n          return createSlatePlugin({\n            ...nestedPlugin,\n            __extensions: [\n              ...(nestedPlugin.__extensions as any),\n              (ctx: any) =>\n                isFunction(extendConfig) ? extendConfig(ctx) : extendConfig,\n            ],\n          } as any);\n        }\n        if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {\n          const result = extendNestedPlugin(nestedPlugin.plugins);\n\n          if (result.found) {\n            found = true;\n\n            return { ...nestedPlugin, plugins: result.plugins };\n          }\n        }\n\n        return nestedPlugin;\n      });\n\n      return { found, plugins: updatedPlugins };\n    };\n\n    const result = extendNestedPlugin(newPlugin.plugins as any);\n    newPlugin.plugins = result.plugins as any;\n\n    // If the plugin wasn't found at any level, add it at the top level\n    if (!result.found) {\n      newPlugin.plugins.push(\n        createSlatePlugin({\n          key: p.key,\n          __extensions: [\n            (ctx: any) =>\n              isFunction(extendConfig)\n                ? extendConfig(ctx as any)\n                : (extendConfig as any),\n          ],\n        } as any)\n      );\n    }\n\n    return createSlatePlugin(newPlugin);\n  };\n\n  plugin.withComponent = (component) => {\n    return plugin.extend({\n      node: { component },\n      render: { node: component },\n    }) as any;\n  };\n\n  return plugin;\n}\n\n/**\n * Explicitly typed version of `createSlatePlugin`.\n *\n * @remarks\n *   While `createSlatePlugin` uses type inference, this function requires an\n *   explicit type parameter. Use this when you need precise control over the\n *   plugin's type structure or when type inference doesn't provide the desired\n *   result.\n */\nexport function createTSlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  config:\n    | ((editor: SlateEditor) => TSlatePluginConfig<C>)\n    | TSlatePluginConfig<C> = {}\n): SlatePlugin<C> {\n  return createSlatePlugin(config as any) as any;\n}\n","export function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","import mergeWith from 'lodash/mergeWith.js';\n\nimport type { SlatePlugin } from '../../lib';\n\nexport function mergePlugins<T>(basePlugin: T, ...sourcePlugins: any[]): T {\n  return mergeWith(\n    {},\n    basePlugin,\n    ...sourcePlugins,\n    (objValue: unknown, srcValue: unknown, key: keyof SlatePlugin) => {\n      // Overwrite array (including plugins) without cloning\n      if (Array.isArray(srcValue)) {\n        return srcValue;\n      }\n      // Shallow merge options\n      if (key === 'options') {\n        return { ...(objValue as any), ...(srcValue as any) };\n      }\n    }\n  );\n}\n","import type { SlateEditor } from '../editor';\nimport type { AnyPluginConfig, WithRequiredKey } from './BasePlugin';\nimport type {\n  InferConfig,\n  SlatePlugin,\n  SlatePluginContext,\n} from './SlatePlugin';\n\nexport function getEditorPlugin<\n  P extends AnyPluginConfig | SlatePlugin<AnyPluginConfig>,\n>(\n  editor: SlateEditor,\n  p: WithRequiredKey<P>\n): SlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>> {\n  const plugin = editor.getPlugin(p) as any;\n\n  return {\n    api: editor.api,\n    editor,\n    plugin: plugin as any,\n    setOption: ((keyOrOptions: any, value: any) =>\n      editor.setOption(plugin, keyOrOptions, value)) as any,\n    setOptions: ((options: any) => editor.setOptions(plugin, options)) as any,\n    tf: editor.transforms,\n    type: plugin.node.type,\n    getOption: (key: any, ...args: any) =>\n      (editor.getOption as any)(plugin, key, ...args),\n    getOptions: () => editor.getOptions(plugin),\n  };\n}\n","import merge from 'lodash/merge.js';\n\nimport type { SlateEditor } from '../../lib/editor';\nimport type { PluginConfig } from '../../lib/plugin/BasePlugin';\nimport type { AnySlatePlugin, SlatePlugin } from '../../lib/plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../../lib/plugin/getEditorPlugin';\nimport { mergePlugins } from '../utils/mergePlugins';\n\n/**\n * Resolves and finalizes a plugin configuration for use in a Plate editor.\n *\n * This function processes a given plugin configuration, applying any extensions\n * and resolving nested plugins. It prepares the plugin for integration into the\n * Plate editor system by:\n *\n * 1. Cloning the plugin to avoid mutating the original\n * 2. Applying all stored extensions to the plugin\n * 3. Clearing the extensions array after application\n *\n * @example\n *   const plugin = createSlatePlugin({ key: 'myPlugin', ...otherOptions }).extend(...);\n *   const resolvedPlugin = resolvePlugin(editor, plugin);\n */\nexport const resolvePlugin = <P extends AnySlatePlugin>(\n  editor: SlateEditor,\n  _plugin: P\n): P => {\n  // Create a deep clone of the plugin\n  let plugin = mergePlugins({}, _plugin) as P;\n\n  plugin.__resolved = true;\n\n  // Apply the stored configuration first\n  if (plugin.__configuration) {\n    const configResult = plugin.__configuration(\n      getEditorPlugin(editor, plugin as any)\n    );\n\n    plugin = mergePlugins(plugin, configResult);\n\n    delete (plugin as any).__configuration;\n  }\n  // Apply all stored extensions\n  if (plugin.__extensions && plugin.__extensions.length > 0) {\n    plugin.__extensions.forEach((extension) => {\n      plugin = mergePlugins(\n        plugin,\n        extension(getEditorPlugin(editor, plugin as any))\n      );\n    });\n    plugin.__extensions = [];\n  }\n\n  const targetPluginToInject = plugin.inject?.targetPluginToInject;\n  const targetPlugins = plugin.inject?.targetPlugins;\n\n  if (targetPluginToInject && targetPlugins && targetPlugins.length > 0) {\n    plugin.inject = plugin.inject || {};\n    plugin.inject.plugins = merge(\n      {},\n      plugin.inject.plugins,\n      Object.fromEntries(\n        targetPlugins.map((targetPlugin) => {\n          const injectedPlugin = targetPluginToInject({\n            ...getEditorPlugin(editor, plugin as any),\n            targetPlugin,\n          });\n\n          return [targetPlugin, injectedPlugin];\n        })\n      )\n    );\n  }\n  if (plugin.node?.component) {\n    plugin.render.node = plugin.node.component;\n  }\n  if (plugin.render?.node) {\n    plugin.node.component = plugin.render.node;\n  }\n\n  validatePlugin(editor, plugin);\n\n  return plugin;\n};\n\nexport const validatePlugin = <\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n  S = {},\n>(\n  editor: SlateEditor,\n  plugin: SlatePlugin<PluginConfig<K, O, A, T, S>>\n) => {\n  if (!plugin.__extensions) {\n    editor.api.debug.error(\n      `Invalid plugin '${plugin.key}', you should use createSlatePlugin.`,\n      'USE_CREATE_PLUGIN'\n    );\n  }\n  if (plugin.node.isElement && plugin.node.isLeaf) {\n    editor.api.debug.error(\n      `Plugin ${plugin.key} cannot be both an element and a leaf.`,\n      'PLUGIN_NODE_TYPE'\n    );\n  }\n};\n","import type { SlateEditor } from '../editor';\nimport type {\n  AnyPluginConfig,\n  PluginConfig,\n  WithRequiredKey,\n} from './BasePlugin';\nimport type { AnySlatePlugin, SlatePlugin } from './SlatePlugin';\n\nimport { resolvePlugin } from '../../internal/plugin/resolvePlugin';\nimport { createSlatePlugin } from './createSlatePlugin';\n\n/** Get editor plugin by key or plugin object. */\nexport function getSlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  editor: SlateEditor,\n  p: WithRequiredKey<C>\n): C extends { node: any } ? C : SlatePlugin<C> {\n  let plugin = p as any;\n\n  const editorPlugin = editor.plugins[p.key] as any;\n\n  if (!editorPlugin) {\n    // When passing only { key }\n    if (!plugin.node) {\n      plugin = createSlatePlugin(plugin);\n    }\n\n    // Resolve is need when passing an external plugin with extensions (e.g. in withLink)\n    return plugin.__resolved ? plugin : resolvePlugin(editor, plugin);\n  }\n\n  return editorPlugin;\n}\n\n/** Get editor plugin type by key or plugin object. */\nexport function getPluginType(editor: SlateEditor, key: string): string {\n  const p = editor.getPlugin<AnySlatePlugin>({ key });\n\n  return p.node.type ?? p.key ?? '';\n}\n\n/** Get editor plugin types by key. */\nexport const getPluginTypes = (editor: SlateEditor, keys: string[]) =>\n  keys.map((key) => editor.getType(key));\n\nexport const getPluginKey = (\n  editor: SlateEditor,\n  type: string\n): string | undefined => editor.meta.pluginCache.node.types[type];\n\nexport const getPluginByType = (editor: SlateEditor, type: string) => {\n  const key = getPluginKey(editor, type);\n  if (!key) return null;\n\n  return editor.getPlugin({ key });\n};\n\nexport const getContainerTypes = (editor: SlateEditor) => {\n  return getPluginTypes(editor, editor.meta.pluginCache.node.isContainer);\n};\n","import { createSlatePlugin } from '../plugin';\n\n/**\n * Enables support for deserializing inserted content from Slate Ast format to\n * Slate format while apply a small bug fix.\n */\nexport const AstPlugin = createSlatePlugin({\n  key: 'ast',\n  parser: {\n    format: 'application/x-slate-fragment',\n    deserialize: ({ data }) => {\n      const decoded = decodeURIComponent(window.atob(data));\n      let parsed;\n\n      try {\n        parsed = JSON.parse(decoded);\n      } catch {\n        /* empty */\n      }\n\n      return parsed;\n    },\n  },\n});\n","import { withHistory } from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\n\nimport { type ExtendEditor, createSlatePlugin } from '../plugin';\n\nexport const withPlateHistory: ExtendEditor = ({ editor }) =>\n  withHistory(editor as any) as any as SlateEditor;\n\n/** @see {@link withHistory} */\nexport const HistoryPlugin = createSlatePlugin({\n  key: 'history',\n  extendEditor: withPlateHistory,\n});\n","import { type PluginConfig, createSlatePlugin } from '../../plugin';\n\nexport type ParagraphConfig = PluginConfig<'p'>;\n\nexport const BaseParagraphPlugin = createSlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          {\n            validNodeName: 'P',\n          },\n        ],\n        query: ({ element }) => element.style.fontFamily !== 'Consolas',\n      },\n    },\n  },\n  rules: {\n    merge: { removeEmpty: true },\n  },\n});\n","import { PathApi } from '@udecode/slate';\n\nimport type { OverrideEditor } from '../../plugin';\nimport type { BreakRules } from '../../plugin/BasePlugin';\n\nimport { getPluginByType } from '../../plugin/getSlatePlugin';\n\nexport const withBreakRules: OverrideEditor = (ctx) => {\n  const {\n    editor,\n    tf: { insertBreak },\n  } = ctx;\n  const checkMatchRulesOverride = (\n    rule: string,\n    blockNode: any,\n    blockPath: any\n  ): BreakRules | null => {\n    const matchRulesKeys = editor.meta.pluginCache.rules.match;\n    for (const key of matchRulesKeys) {\n      const overridePlugin = editor.getPlugin({ key });\n      if (\n        overridePlugin.rules?.break &&\n        overridePlugin.rules?.match?.({\n          ...ctx,\n          node: blockNode,\n          path: blockPath,\n          rule: rule as any,\n        })\n      ) {\n        return overridePlugin.rules.break;\n      }\n    }\n    return null;\n  };\n\n  const executeBreakAction = (\n    action: string | undefined,\n    blockPath: any\n  ): boolean => {\n    if (action === 'reset') {\n      editor.tf.resetBlock({ at: blockPath });\n      return true;\n    }\n    if (action === 'exit') {\n      editor.tf.insertExitBreak();\n      return true;\n    }\n    if (action === 'deleteExit') {\n      editor.tf.deleteBackward('character');\n      editor.tf.insertExitBreak();\n      return true;\n    }\n    if (action === 'lineBreak') {\n      editor.tf.insertSoftBreak();\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    transforms: {\n      insertBreak() {\n        if (editor.selection && editor.api.isCollapsed()) {\n          const block = editor.api.block();\n          if (block) {\n            const [blockNode, blockPath] = block;\n            const plugin = getPluginByType(editor, blockNode.type);\n\n            const breakRules = plugin?.rules.break;\n\n            // Handle 'empty' scenario\n            if (\n              editor.api.isEmpty(editor.selection, {\n                block: true,\n              })\n            ) {\n              const overrideBreakRules = checkMatchRulesOverride(\n                'break.empty',\n                blockNode,\n                blockPath\n              );\n              const effectiveBreakRules = overrideBreakRules || breakRules;\n              const emptyAction = effectiveBreakRules?.empty;\n\n              if (executeBreakAction(emptyAction, blockPath)) return;\n              // if 'default', fall through to breakRules.default or standard behavior\n            }\n\n            // Handle 'emptyLineEnd' scenario\n            if (\n              !editor.api.isEmpty(editor.selection, {\n                block: true,\n              }) &&\n              editor.api.isAt({ end: true })\n            ) {\n              const range = editor.api.range('before', editor.selection!);\n              if (range) {\n                const char = editor.api.string(range);\n                if (char === '\\n') {\n                  const overrideBreakRules = checkMatchRulesOverride(\n                    'break.emptyLineEnd',\n                    blockNode,\n                    blockPath\n                  );\n                  const effectiveBreakRules = overrideBreakRules || breakRules;\n                  const emptyLineEndAction = effectiveBreakRules?.emptyLineEnd;\n\n                  if (executeBreakAction(emptyLineEndAction, blockPath)) return;\n                }\n              }\n            }\n\n            // Handle 'default' scenario (or fallthrough from 'empty: default' or 'emptyLineEnd: default')\n            const overrideDefaultBreakRules = checkMatchRulesOverride(\n              'break.default',\n              blockNode,\n              blockPath\n            );\n            const defaultAction = (overrideDefaultBreakRules || breakRules)\n              ?.default;\n\n            if (executeBreakAction(defaultAction, blockPath)) return;\n\n            const overrideSplitResetBreakRules = checkMatchRulesOverride(\n              'break.splitReset',\n              blockNode,\n              blockPath\n            );\n            const splitReset =\n              overrideSplitResetBreakRules?.splitReset ??\n              breakRules?.splitReset;\n\n            if (splitReset) {\n              const isAtStart = editor.api.isAt({ start: true });\n\n              insertBreak();\n\n              editor.tf.resetBlock({\n                at: isAtStart ? blockPath : PathApi.next(blockPath),\n              });\n              return;\n            }\n          }\n        }\n\n        // Standard Slate insertBreak if no custom breakRules handled it\n        insertBreak();\n      },\n    },\n  };\n};\n","import { PointApi, RangeApi } from '@udecode/slate';\n\nimport type { OverrideEditor } from '../../plugin';\nimport type { DeleteRules } from '../../plugin/BasePlugin';\n\nimport { getPluginByType } from '../../plugin/getSlatePlugin';\n\nexport const withDeleteRules: OverrideEditor = (ctx) => {\n  const {\n    editor,\n    tf: { deleteBackward, deleteForward, deleteFragment },\n  } = ctx;\n\n  const resetMarks = () => {\n    if (editor.api.isAt({ start: true })) {\n      editor.tf.removeMarks();\n    }\n  };\n\n  const checkMatchRulesOverride = (\n    rule: string,\n    blockNode: any,\n    blockPath: any\n  ): DeleteRules | null => {\n    const matchRulesKeys = editor.meta.pluginCache.rules.match;\n    for (const key of matchRulesKeys) {\n      const overridePlugin = editor.getPlugin({ key });\n      if (\n        overridePlugin.rules?.delete &&\n        overridePlugin.rules?.match?.({\n          ...ctx,\n          node: blockNode,\n          path: blockPath,\n          rule: rule as any,\n        })\n      ) {\n        return overridePlugin.rules.delete;\n      }\n    }\n    return null;\n  };\n\n  const executeDeleteAction = (\n    action: string | undefined,\n    blockPath: any\n  ): boolean => {\n    if (action === 'reset') {\n      editor.tf.resetBlock({ at: blockPath });\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    transforms: {\n      deleteBackward(unit) {\n        if (editor.selection && editor.api.isCollapsed()) {\n          const block = editor.api.block();\n          if (block) {\n            const [blockNode, blockPath] = block;\n            const plugin = getPluginByType(editor, blockNode.type);\n\n            const deleteRules = plugin?.rules.delete;\n\n            // Handle 'start' scenario\n            if (editor.api.isAt({ start: true })) {\n              const overrideDeleteRules = checkMatchRulesOverride(\n                'delete.start',\n                blockNode,\n                blockPath\n              );\n              const effectiveDeleteRules = overrideDeleteRules || deleteRules;\n              const startAction = effectiveDeleteRules?.start;\n\n              if (executeDeleteAction(startAction, blockPath)) {\n                return;\n              }\n            }\n\n            // Handle 'empty' scenario\n            if (editor.api.isEmpty(editor.selection, { block: true })) {\n              const overrideDeleteRules = checkMatchRulesOverride(\n                'delete.empty',\n                blockNode,\n                blockPath\n              );\n              const effectiveDeleteRules = overrideDeleteRules || deleteRules;\n              const emptyAction = effectiveDeleteRules?.empty;\n\n              if (executeDeleteAction(emptyAction, blockPath)) return;\n            }\n          }\n\n          // Default behavior: reset first block when deleting at start of the document\n          if (\n            PointApi.equals(editor.selection!.anchor, editor.api.start([])!)\n          ) {\n            editor.tf.resetBlock({ at: [0] });\n            return;\n          }\n        }\n\n        deleteBackward(unit);\n        resetMarks();\n      },\n      deleteForward(unit) {\n        deleteForward(unit);\n        resetMarks();\n      },\n      deleteFragment(options) {\n        // Default behavior: reset entire editor when deleting full selection\n        if (\n          editor.selection &&\n          RangeApi.equals(editor.selection, editor.api.range([])!)\n        ) {\n          editor.tf.reset({\n            children: true,\n            select: true,\n          });\n          return;\n        }\n\n        deleteFragment(options);\n        resetMarks();\n      },\n    },\n  };\n};\n","import {\n  type Path,\n  type TElement,\n  ElementApi,\n  PathApi,\n  TextApi,\n} from '@udecode/slate';\n\nimport type { OverrideEditor } from '../../plugin';\nimport type { MergeRules } from '../../plugin/BasePlugin';\n\nimport { getPluginByType } from '../../plugin/getSlatePlugin';\n\nexport const withMergeRules: OverrideEditor = (ctx) => {\n  const {\n    editor,\n    tf: { removeNodes },\n  } = ctx;\n\n  const checkMatchRulesOverride = (\n    rule: string,\n    blockNode: any,\n    blockPath: any\n  ): MergeRules | null => {\n    const matchRulesKeys = editor.meta.pluginCache.rules.match;\n    for (const key of matchRulesKeys) {\n      const overridePlugin = editor.getPlugin({ key });\n      if (\n        overridePlugin.rules.merge &&\n        overridePlugin.rules?.match?.({\n          ...ctx,\n          node: blockNode,\n          path: blockPath,\n          rule: rule as any,\n        })\n      ) {\n        return overridePlugin.rules.merge;\n      }\n    }\n    return null;\n  };\n\n  return {\n    api: {\n      shouldMergeNodes(prevNodeEntry, nextNodeEntry, { reverse } = {}) {\n        const [prevNode, prevPath] = prevNodeEntry;\n        const [, nextPath] = nextNodeEntry;\n        const [curNode, curPath] = reverse ? prevNodeEntry : nextNodeEntry;\n        const [targetNode, targetPath] = reverse\n          ? nextNodeEntry\n          : prevNodeEntry;\n\n        if (\n          TextApi.isText(prevNode) &&\n          prevNode.text === '' &&\n          prevPath.at(-1) !== 0\n        ) {\n          editor.tf.removeNodes({ at: prevPath });\n          return false;\n        }\n\n        const shouldRemove = (node: TElement, path: Path) => {\n          // Override Slate's default: typically only pure text blocks like paragraph and heading nodes want this to be true, so plugin default is false.\n          const plugin = getPluginByType(editor, node.type);\n          if (!plugin) {\n            return true;\n          }\n\n          const mergeRules = plugin.rules.merge;\n          if (!mergeRules?.removeEmpty) {\n            return false;\n          }\n\n          // Check if any plugin with matchRules overrides the merge behavior\n          const overrideMergeRules = checkMatchRulesOverride(\n            'merge.removeEmpty',\n            node,\n            path\n          );\n\n          if (overrideMergeRules?.removeEmpty === false) {\n            return false;\n          }\n\n          return true;\n        };\n\n        // Don't delete target void blocks by default\n        if (ElementApi.isElement(targetNode) && editor.api.isVoid(targetNode)) {\n          // Remove if plugin allows it\n          if (shouldRemove(targetNode, targetPath)) {\n            editor.tf.removeNodes({ at: prevPath });\n          }\n          // Remove current node if empty before selecting the void block\n          else if (\n            ElementApi.isElement(curNode) &&\n            editor.api.isEmpty(curNode)\n          ) {\n            editor.tf.removeNodes({ at: curPath });\n          }\n          return false;\n        }\n\n        // Not void, remove prevNode if sibling and empty\n        if (\n          ElementApi.isElement(prevNode) &&\n          editor.api.isEmpty(prevNode) &&\n          PathApi.isSibling(prevPath, nextPath) &&\n          shouldRemove(prevNode, prevPath)\n        ) {\n          editor.tf.removeNodes({ at: prevPath });\n          return false;\n        }\n\n        return true;\n      },\n    },\n    transforms: {\n      removeNodes(options = {}) {\n        if (options.event?.type === 'mergeNodes' && options.at) {\n          const nodeEntry = editor.api.node(options.at);\n          if (nodeEntry) {\n            const [node, path] = nodeEntry;\n\n            if (ElementApi.isElement(node)) {\n              // Check if this node should be removed based on merge rules\n              const plugin = getPluginByType(editor, node.type);\n              if (plugin) {\n                const mergeRules = plugin.rules.merge;\n\n                // Check for override rules\n                const overrideMergeRules = checkMatchRulesOverride(\n                  'merge.removeEmpty',\n                  node,\n                  path\n                );\n\n                const shouldNotRemove =\n                  overrideMergeRules?.removeEmpty === false ||\n                  mergeRules?.removeEmpty === false;\n\n                if (shouldNotRemove) {\n                  // Don't remove the node, just return without calling removeNodes\n                  return;\n                }\n              }\n            }\n          }\n        }\n\n        removeNodes(options);\n      },\n    },\n  };\n};\n","import { ElementApi } from '@udecode/slate';\n\nimport type { NormalizeRules } from '../../plugin/BasePlugin';\nimport type { OverrideEditor } from '../../plugin/SlatePlugin';\n\nimport { getPluginByType } from '../../plugin/getSlatePlugin';\n\nexport const withNormalizeRules: OverrideEditor = (ctx) => {\n  const {\n    editor,\n    tf: { normalizeNode },\n  } = ctx;\n\n  const checkMatchRulesOverride = (\n    rule: string,\n    node: any,\n    path: any\n  ): NormalizeRules | null => {\n    const matchRulesKeys = editor.meta.pluginCache.rules.match;\n    for (const key of matchRulesKeys) {\n      const overridePlugin = editor.getPlugin({ key });\n      if (\n        overridePlugin.rules?.normalize &&\n        overridePlugin.rules?.match?.({\n          ...ctx,\n          node: node,\n          path: path,\n          rule: rule as any,\n        })\n      ) {\n        return overridePlugin.rules.normalize;\n      }\n    }\n    return null;\n  };\n\n  return {\n    transforms: {\n      normalizeNode([node, path]) {\n        if (ElementApi.isElement(node) && node.type) {\n          const plugin = getPluginByType(editor, node.type);\n          const normalizeRules = plugin?.rules.normalize;\n\n          // Handle 'removeEmpty' scenario\n          const overridenormalizeRules = checkMatchRulesOverride(\n            'normalize.removeEmpty',\n            node,\n            path\n          );\n          const effectivenormalizeRules =\n            overridenormalizeRules || normalizeRules;\n\n          if (\n            effectivenormalizeRules?.removeEmpty &&\n            editor.api.isEmpty(node)\n          ) {\n            editor.tf.removeNodes({ at: path });\n            return;\n          }\n        }\n\n        normalizeNode([node, path]);\n      },\n    },\n  };\n};\n","import type { OverrideEditor } from '../../plugin';\n\nimport { createSlatePlugin } from '../../plugin/createSlatePlugin';\nimport { BaseParagraphPlugin } from '../paragraph';\nimport { withBreakRules } from './withBreakRules';\nimport { withDeleteRules } from './withDeleteRules';\nimport { withMergeRules } from './withMergeRules';\nimport { withNormalizeRules } from './withNormalizeRules';\n\n/**\n * Merge and register all the inline types and void types from the plugins and\n * options, using `editor.api.isInline`, `editor.api.markableVoid` and\n * `editor.api.isVoid`\n */\nexport const withOverrides: OverrideEditor = ({\n  api: { isInline, isSelectable, isVoid, markableVoid },\n  editor,\n}) => {\n  // Use pre-computed arrays from plugin resolution\n  const voidTypes = editor.meta.pluginCache.node.isVoid;\n  const inlineTypes = editor.meta.pluginCache.node.isInline;\n  const markableVoidTypes = editor.meta.pluginCache.node.isMarkableVoid;\n  const notSelectableTypes = editor.meta.pluginCache.node.isNotSelectable;\n\n  return {\n    api: {\n      create: {\n        block: (node) => ({\n          children: [{ text: '' }],\n          type: editor.getType(BaseParagraphPlugin.key),\n          ...node,\n        }),\n      },\n      isInline(element) {\n        return inlineTypes.includes(element.type as any)\n          ? true\n          : isInline(element);\n      },\n      isSelectable(element) {\n        return notSelectableTypes.includes(element.type)\n          ? false\n          : isSelectable(element);\n      },\n      isVoid(element) {\n        return voidTypes.includes(element.type as any) ? true : isVoid(element);\n      },\n      markableVoid(element) {\n        return markableVoidTypes.includes(element.type)\n          ? true\n          : markableVoid(element);\n      },\n    },\n  };\n};\n\n/** Override the editor api and transforms based on the plugins. */\nexport const OverridePlugin = createSlatePlugin({\n  key: 'override',\n})\n  .overrideEditor(withOverrides)\n  .overrideEditor(withBreakRules)\n  .overrideEditor(withDeleteRules)\n  .overrideEditor(withMergeRules)\n  .overrideEditor(withNormalizeRules);\n","import type { Descendant } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../lib/editor';\nimport type { ParserOptions } from '../../lib/plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../../lib/plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../../lib/plugin';\n\n/** Pipe preInsert then insertFragment. */\nexport const pipeInsertFragment = (\n  editor: SlateEditor,\n  injectedPlugins: Partial<AnyEditorPlugin>[],\n  { fragment, ...options }: ParserOptions & { fragment: Descendant[] }\n) => {\n  editor.tf.withoutNormalizing(() => {\n    injectedPlugins.some((p) => {\n      return (\n        p.parser?.preInsert?.({\n          ...getEditorPlugin(editor, p as any),\n          fragment,\n          ...options,\n        }) === true\n      );\n    });\n\n    editor.tf.insertFragment(fragment);\n  });\n};\n","import type { SlateEditor } from '../../lib/editor';\nimport type { ParserOptions } from '../../lib/plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../../lib/plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../../lib/plugin';\n\n/** Pipe editor.tf.insertData.transformData */\nexport const pipeTransformData = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { data, dataTransfer }: ParserOptions\n) => {\n  plugins.forEach((p) => {\n    const transformData = p.parser?.transformData;\n\n    if (!transformData) return;\n\n    data = transformData({\n      ...getEditorPlugin(editor, p as any),\n      data,\n      dataTransfer,\n    });\n  });\n\n  return data;\n};\n","import type { Descendant } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../lib/editor';\nimport type { ParserOptions } from '../../lib/plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../../lib/plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../../lib/plugin';\n\n/** Pipe editor.tf.insertData.transformFragment */\nexport const pipeTransformFragment = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { fragment, ...options }: ParserOptions & { fragment: Descendant[] }\n) => {\n  plugins.forEach((p) => {\n    const transformFragment = p.parser?.transformFragment;\n\n    if (!transformFragment) return;\n\n    fragment = transformFragment({\n      fragment,\n      ...options,\n      ...getEditorPlugin(editor, p as any),\n    });\n  });\n\n  return fragment;\n};\n","import {\n  type NodeEntry,\n  type NodeOf,\n  type Path,\n  type QueryNodeOptions,\n  type TNode,\n  NodeApi,\n  queryNode,\n} from '@udecode/slate';\n\nexport interface ApplyDeepToNodesOptions<N extends TNode> {\n  // Function to call on each node following the query.\n  apply: (\n    node: NodeOf<N>,\n    source: (() => Record<string, any>) | Record<string, any>\n  ) => void;\n  // The destination node object.\n  node: N;\n  // The source object. Can be a factory.\n  source: (() => Record<string, any>) | Record<string, any>;\n  path?: Path;\n  // Query to filter the nodes.\n  query?: QueryNodeOptions;\n}\n\n/** Recursively apply an operation to children nodes with a query. */\nexport const applyDeepToNodes = <N extends TNode>({\n  apply,\n  node,\n  path = [],\n  query,\n  source,\n}: ApplyDeepToNodesOptions<N>) => {\n  const entry: NodeEntry<N> = [node, path];\n\n  if (queryNode<N>(entry, query)) {\n    if (typeof source === 'function') {\n      apply(node, source());\n    } else {\n      apply(node, source);\n    }\n  }\n  if (!NodeApi.isAncestor(node)) return;\n\n  node.children.forEach((child, index) => {\n    applyDeepToNodes({\n      apply,\n      node: child as any,\n      path: path.concat([index]),\n      query,\n      source,\n    });\n  });\n};\n","import type { TNode } from '@udecode/slate';\n\nimport defaults from 'lodash/defaults.js';\n\nimport {\n  type ApplyDeepToNodesOptions,\n  applyDeepToNodes,\n} from './applyDeepToNodes';\n\n/** Recursively merge a source object to children nodes with a query. */\nexport const defaultsDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: defaults });\n};\n","import { type Path, type TNode, ElementApi } from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\nimport type { EditorPlugin } from '../plugin';\n\nimport { getKeyByType, getKeysByTypes } from './getKeysByTypes';\n\nexport const getInjectMatch = <E extends SlateEditor>(\n  editor: E,\n  plugin: EditorPlugin\n) => {\n  return (node: TNode, path: Path) => {\n    const {\n      inject: {\n        excludeBelowPlugins,\n        excludePlugins,\n        isBlock: _isBlock,\n        isElement: _isElement,\n        isLeaf,\n        maxLevel,\n        targetPlugins,\n      },\n    } = plugin;\n\n    const element = ElementApi.isElement(node) ? node : undefined;\n\n    if (_isElement && !element) return false;\n    if (_isBlock && (!element || !editor.api.isBlock(element))) return false;\n    if (isLeaf && element) return false;\n    if (element?.type) {\n      // Exclude plugins\n      if (excludePlugins?.includes(getKeyByType(editor, element.type))) {\n        return false;\n      }\n      // Target plugins\n      if (\n        targetPlugins &&\n        !targetPlugins.includes(getKeyByType(editor, element.type))\n      ) {\n        return false;\n      }\n    }\n    // Exclude below plugins\n    if (excludeBelowPlugins || maxLevel) {\n      if (maxLevel && path.length > maxLevel) {\n        return false;\n      }\n      if (excludeBelowPlugins) {\n        const excludeTypes = getKeysByTypes(editor, excludeBelowPlugins);\n        const isBelow = editor.api.above({\n          at: path,\n          match: (n) =>\n            ElementApi.isElement(n) && excludeTypes.includes(n.type),\n        });\n\n        if (isBelow) return false;\n      }\n    }\n\n    return true;\n  };\n};\n","import type { SlateEditor } from '../editor';\n\n/** Get plugin keys by types */\nexport const getKeysByTypes = (\n  editor: SlateEditor,\n  types: string[]\n): string[] => {\n  return Object.values(editor.plugins)\n    .filter((plugin) => types.includes(plugin.node.type))\n    .map((plugin) => plugin.key);\n};\n\n/** Get plugin key by type */\nexport const getKeyByType = (editor: SlateEditor, type: string): string => {\n  const plugin = Object.values(editor.plugins).find(\n    (plugin) => plugin.node.type === type\n  );\n\n  return plugin?.key ?? type;\n};\n","import type { SlateEditor } from '../editor';\nimport type { AnyEditorPlugin, SlatePlugins } from '../plugin/SlatePlugin';\n\n/**\n * Get all plugins having a defined `inject.plugins[plugin.key]`. It includes\n * `plugin` itself.\n */\nexport const getInjectedPlugins = (\n  editor: SlateEditor,\n  plugin: AnyEditorPlugin\n): Partial<AnyEditorPlugin>[] => {\n  const injectedPlugins: SlatePlugins = [];\n\n  [...editor.meta.pluginList].reverse().forEach((p) => {\n    const injectedPlugin = p.inject.plugins?.[plugin.key];\n\n    if (injectedPlugin) injectedPlugins.push(injectedPlugin as any);\n  });\n\n  return [plugin, ...injectedPlugins];\n};\n","import type { TElement, TText } from '@udecode/slate';\nimport type { AnyObject } from '@udecode/utils';\n\nimport pick from 'lodash/pick.js';\n\nimport type { AnyEditorPlugin } from '../plugin';\n\nimport { type SlateRenderNodeProps, getNodeDataAttributeKeys } from '../static';\n\nexport const getPluginNodeProps = ({\n  attributes: nodeAttributes,\n  node,\n  plugin,\n  props,\n}: {\n  props: SlateRenderNodeProps;\n  attributes?: AnyObject;\n  node?: TElement | TText;\n  plugin?: AnyEditorPlugin;\n}): any => {\n  const newProps: any = { ...props, attributes: { ...props.attributes } };\n\n  if (plugin?.node.props) {\n    const pluginNodeProps =\n      (typeof plugin.node.props === 'function'\n        ? plugin.node.props(newProps as any)\n        : plugin.node.props) ?? {};\n\n    newProps.attributes = {\n      ...newProps.attributes,\n      ...pluginNodeProps,\n    };\n  }\n  if (nodeAttributes && plugin) {\n    // Add data attributes to attributes if attributes is already set\n    newProps.attributes = {\n      ...newProps.attributes,\n      ...pick(\n        nodeAttributes,\n        /**\n         * WARNING: Improper use of `dangerouslyAllowAttributes` WILL make your\n         * application vulnerable to cross-site scripting (XSS) or information\n         * exposure attacks.\n         *\n         * @see {@link BasePluginNode.dangerouslyAllowAttributes}\n         */\n        ...(plugin.node.dangerouslyAllowAttributes ?? []),\n        [...(node ? getNodeDataAttributeKeys(node) : [])]\n      ),\n    };\n  }\n\n  // remove attributes values that are undefined\n  Object.keys(newProps.attributes).forEach((key) => {\n    if (newProps.attributes?.[key] === undefined) {\n      delete newProps.attributes?.[key];\n    }\n  });\n\n  return newProps;\n};\n","import { type TElement, type TText, TextApi } from '@udecode/slate';\nimport kebabCase from 'lodash/kebabCase.js';\n\nimport type { SlateEditor } from '../../editor';\n\nimport { type AnyEditorPlugin, getEditorPlugin } from '../../plugin';\n\nexport const getNodeDataAttributes = (\n  editor: SlateEditor,\n  node: TElement | TText,\n  {\n    isElement,\n    isLeaf,\n    isText,\n  }: { isElement?: boolean; isLeaf?: boolean; isText?: boolean }\n) => {\n  const dataAttributes = Object.keys(node).reduce((acc, key) => {\n    if (typeof node[key] === 'object') return acc;\n    if (isElement && key === 'children') return acc;\n    if ((isLeaf || isText) && key === 'text') return acc;\n\n    const plugin = editor.getPlugin({ key });\n\n    if (isLeaf && plugin?.node.isLeaf && plugin?.node.isDecoration !== true) {\n      return acc;\n    }\n\n    if (isText && plugin?.node.isLeaf && plugin?.node.isDecoration !== false) {\n      return acc;\n    }\n\n    const attributeName = keyToDataAttribute(key);\n\n    return { ...acc, [attributeName]: node[key] };\n  }, {});\n\n  return dataAttributes;\n};\n\nexport const getPluginDataAttributes = (\n  editor: SlateEditor,\n  plugin: AnyEditorPlugin,\n  node: TElement | TText\n) => {\n  const isElement = plugin.node.isElement;\n  const isLeaf = plugin.node.isLeaf && plugin.node.isDecoration === true;\n  const isText = plugin.node.isLeaf && plugin.node.isDecoration === false;\n\n  const dataAttributes = getNodeDataAttributes(editor, node, {\n    isElement,\n    isLeaf,\n    isText,\n  });\n\n  const customAttributes =\n    plugin.node.toDataAttributes?.({\n      ...(plugin ? (getEditorPlugin(editor, plugin) as any) : {}),\n      node,\n    }) ?? {};\n\n  return { ...dataAttributes, ...customAttributes };\n};\n\nexport const getNodeDataAttributeKeys = (node: TElement | TText) => {\n  return Object.keys(node)\n    .filter(\n      (key) =>\n        typeof node[key] !== 'object' &&\n        (!TextApi.isText(node) || key !== 'text')\n    )\n    .map((key) => keyToDataAttribute(key));\n};\n\nexport const keyToDataAttribute = (key: string) => {\n  return `data-slate-${kebabCase(key)}`;\n};\n","import type { Path, TElement, TText } from '@udecode/slate';\n\nimport clsx from 'clsx';\n\nimport type { SlateEditor } from '../../lib/editor';\n\nimport { isEditOnly } from './isEditOnlyDisabled';\nimport { pluginInjectNodeProps } from './pluginInjectNodeProps';\n\n/** Inject plugin props, editor. */\nexport const pipeInjectNodeProps = (\n  editor: SlateEditor,\n  nodeProps: any,\n  getElementPath: (node: TElement | TText) => Path,\n  readOnly = false\n) => {\n  editor.meta.pluginCache.inject.nodeProps.forEach((key) => {\n    const plugin = editor.getPlugin({ key });\n\n    const newAttributes = pluginInjectNodeProps(\n      editor,\n      plugin,\n      nodeProps,\n      getElementPath\n    );\n\n    // Since `inject.nodeProps` can have hooks, we can't return early.\n    if (isEditOnly(readOnly, plugin, 'inject')) {\n      return;\n    }\n\n    if (!newAttributes) return;\n\n    const attributes = nodeProps.attributes;\n\n    nodeProps.attributes = {\n      ...attributes,\n      ...newAttributes,\n      className:\n        clsx(attributes?.className, newAttributes.className) || undefined,\n      style: {\n        ...attributes?.style,\n        ...newAttributes.style,\n      },\n    };\n  });\n\n  return nodeProps;\n};\n","const DEFAULT = {\n  handlers: true,\n  inject: true,\n  normalizeInitialValue: false,\n  render: true,\n};\n\n/**\n * Check if a plugin feature is disabled in read-only mode based on editOnly\n * configuration.\n *\n * @param plugin The plugin to check\n * @param isReadOnly Whether the editor is in read-only mode\n * @param feature The feature to check ('render' | 'handlers' | 'inject' |\n *   'normalizeInitialValue')\n * @returns True if the feature should be disabled\n */\nexport const isEditOnly = (\n  readOnly: boolean,\n  plugin: any,\n  feature: keyof typeof DEFAULT\n): boolean => {\n  if (!readOnly) return false;\n\n  // If editOnly is true, use the default value for the feature\n  if (plugin.editOnly === true) {\n    return DEFAULT[feature];\n  }\n\n  // If editOnly is an object, use its value if specified, otherwise use default\n  if (typeof plugin.editOnly === 'object') {\n    return plugin.editOnly[feature] ?? DEFAULT[feature];\n  }\n\n  return false;\n};\n","import type { Path, TElement, TText } from '@udecode/slate';\n\nimport { isDefined } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../lib/editor';\nimport type {\n  EditorPlugin,\n  TransformOptions,\n} from '../../lib/plugin/SlatePlugin';\n\nimport {\n  type GetInjectNodePropsOptions,\n  type GetInjectNodePropsReturnType,\n  getEditorPlugin,\n} from '../../lib/plugin';\nimport { getInjectMatch } from '../../lib/utils/getInjectMatch';\n\n/**\n * Return if `element`, `text`, `nodeKey` is defined. Return if `node.type` is\n * not in `targetPlugins` (if defined). Return if `value = node[nodeKey]` is not\n * in `validNodeValues` (if defined). If `classNames[value]` is defined,\n * override `className` with it. If `styleKey` is defined, override `style` with\n * `[styleKey]: value`.\n */\nexport const pluginInjectNodeProps = (\n  editor: SlateEditor,\n  plugin: EditorPlugin,\n  nodeProps: GetInjectNodePropsOptions,\n  getElementPath: (node: TElement | TText) => Path\n): GetInjectNodePropsReturnType | undefined => {\n  const {\n    key,\n    inject: { nodeProps: injectNodeProps },\n  } = plugin;\n\n  const { element, text } = nodeProps;\n\n  const node = element ?? text;\n\n  if (!node) return;\n  if (!injectNodeProps) return;\n\n  const {\n    classNames,\n    defaultNodeValue,\n    nodeKey = editor.getType(key),\n    query,\n    styleKey = nodeKey as any,\n    transformClassName,\n    transformNodeValue,\n    transformProps,\n    transformStyle,\n    validNodeValues,\n  } = injectNodeProps;\n\n  const injectMatch = getInjectMatch(editor, plugin);\n\n  if (!injectMatch(node, getElementPath(node))) return;\n\n  const queryResult = query?.({\n    ...injectNodeProps,\n    ...(getEditorPlugin(editor, plugin) as any),\n    nodeProps,\n  });\n\n  if (query && !queryResult) {\n    return;\n  }\n\n  const nodeValue = node[nodeKey!] as any;\n\n  // early return if there is no reason to inject props\n  if (\n    !transformProps &&\n    (!isDefined(nodeValue) ||\n      (validNodeValues && !validNodeValues.includes(nodeValue)) ||\n      nodeValue === defaultNodeValue)\n  ) {\n    return;\n  }\n\n  const transformOptions: TransformOptions = {\n    ...nodeProps,\n    ...(getEditorPlugin(editor, plugin) as any),\n    nodeValue,\n  };\n  const value = transformNodeValue?.(transformOptions) ?? nodeValue;\n  transformOptions.value = value;\n\n  let newProps: GetInjectNodePropsReturnType = {};\n\n  if (element && nodeKey && nodeValue) {\n    newProps.className = `slate-${nodeKey}-${nodeValue}`;\n  }\n  if (classNames?.[nodeValue] || transformClassName) {\n    newProps.className =\n      transformClassName?.(transformOptions) ?? classNames?.[value];\n  }\n  if (styleKey) {\n    newProps.style =\n      transformStyle?.(transformOptions) ??\n      ({\n        [styleKey as string]: value,\n      } as any);\n  }\n  if (transformProps) {\n    newProps =\n      transformProps({ ...transformOptions, props: newProps }) ?? newProps;\n  }\n\n  return newProps;\n};\n","import type { NodeEntry, TRange } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../editor';\nimport type { EditableProps } from '../../types/EditableProps';\n\nimport { getEditorPlugin } from '../../plugin';\n\n/**\n * @see {@link Decorate} .\n * Optimization: return undefined if empty list so Editable uses a memo.\n */\nexport const pipeDecorate = (\n  editor: SlateEditor,\n  decorateProp?:\n    | ((ctx: { editor: SlateEditor; entry: NodeEntry }) => TRange[] | undefined)\n    | null\n): EditableProps['decorate'] => {\n  if (editor.meta.pluginCache.decorate.length === 0 && !decorateProp) return;\n\n  return (entry: NodeEntry) => {\n    let ranges: TRange[] = [];\n\n    const addRanges = (newRanges?: TRange[]) => {\n      if (newRanges?.length) ranges = [...ranges, ...newRanges];\n    };\n\n    editor.meta.pluginCache.decorate.forEach((key) => {\n      const plugin = editor.getPlugin({ key });\n      addRanges(\n        plugin.decorate!({\n          ...(getEditorPlugin(editor, plugin) as any),\n          entry,\n        })\n      );\n    });\n\n    if (decorateProp) {\n      addRanges(\n        decorateProp({\n          editor,\n          entry,\n        })\n      );\n    }\n\n    return ranges;\n  };\n};\n","export const isSlateVoid = (element: HTMLElement) => {\n  return element.dataset.slateVoid === 'true';\n};\n\nexport const isSlateElement = (element: HTMLElement) => {\n  return element.dataset.slateNode === 'element';\n};\n\nexport const isSlateText = (element: HTMLElement) => {\n  return element.dataset.slateNode === 'text';\n};\n\nexport const isSlateString = (element: HTMLElement) => {\n  return element.dataset.slateString === 'true';\n};\n\nexport const isSlateLeaf = (element: HTMLElement) => {\n  return element.dataset.slateLeaf === 'true';\n};\n\nexport const isSlateEditor = (element: HTMLElement) => {\n  return element.dataset.slateEditor === 'true';\n};\n\nexport const isSlateNode = (element: HTMLElement) => {\n  return (\n    isSlateLeaf(element) ||\n    isSlateElement(element) ||\n    isSlateVoid(element) ||\n    isSlateString(element) ||\n    isSlateText(element)\n  );\n};\n\nexport const isSlatePluginElement = (\n  element: HTMLElement,\n  pluginKey: string\n) => {\n  return (\n    element.dataset.slateNode === 'element' &&\n    element.classList.contains(`slate-${pluginKey}`)\n  );\n};\n\nexport const isSlatePluginNode = (element: HTMLElement, pluginKey: string) => {\n  return element.classList.contains(`slate-${pluginKey}`);\n};\n\nexport const getSlateElements = (element: HTMLElement): HTMLElement[] => {\n  return Array.from(element.querySelectorAll('[data-slate-node=\"element\"]'));\n};\n","/** Get slate class name: slate-<type> */\nexport const getSlateClass = (type?: string) => (type ? `slate-${type}` : '');\n","import type { Editor } from '@udecode/slate';\n\nimport { IS_APPLE } from '@udecode/utils';\nimport { type KeyboardEventLike, isKeyHotkey } from 'is-hotkey';\n\nexport { isHotkey } from 'is-hotkey';\n\n/** Hotkey mappings for each platform. */\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  escape: 'escape',\n  extendBackward: 'shift+left',\n  extendDownward: 'shift+down',\n  extendForward: 'shift+right',\n  extendUpward: 'shift+up',\n  insertSoftBreak: 'shift+enter',\n  italic: 'mod+i',\n  moveBackward: 'left',\n  moveDownward: 'down',\n  moveForward: 'right',\n  moveUpward: 'up',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  selectAll: 'mod+a',\n  splitBlock: 'enter',\n  tab: 'tab',\n  undo: 'mod+z',\n  untab: 'shift+tab',\n};\n\nconst APPLE_HOTKEYS = {\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n};\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n};\n\n/** Create a platform-aware hotkey checker. */\n\nexport const createHotkey = (key: string) => {\n  const generic = (HOTKEYS as any)[key];\n  const apple = (APPLE_HOTKEYS as any)[key];\n  const windows = (WINDOWS_HOTKEYS as any)[key];\n  const isGeneric = generic && isKeyHotkey(generic);\n  const isApple = apple && isKeyHotkey(apple);\n  const isWindows = windows && isKeyHotkey(windows);\n\n  return (event: KeyboardEventLike) => {\n    if (isGeneric?.(event)) return true;\n    if (IS_APPLE && isApple?.(event)) return true;\n    if (!IS_APPLE && isWindows?.(event)) return true;\n\n    return false;\n  };\n};\n\nconst createComposing =\n  (key: string) =>\n  (\n    editor: Editor,\n    event: React.KeyboardEvent,\n    {\n      composing,\n    }: {\n      /** Ignore the event if composing. */\n      composing?: boolean;\n    } = {}\n  ) => {\n    if (!createHotkey(key)(event)) return false;\n    if (!!composing !== editor.api.isComposing()) return false;\n\n    return true;\n  };\n\nexport const Hotkeys = {\n  isBold: createHotkey('bold'),\n  isCompose: createHotkey('compose'),\n  isDeleteBackward: createHotkey('deleteBackward'),\n  isDeleteForward: createHotkey('deleteForward'),\n  isDeleteLineBackward: createHotkey('deleteLineBackward'),\n  isDeleteLineForward: createHotkey('deleteLineForward'),\n  isDeleteWordBackward: createHotkey('deleteWordBackward'),\n  isDeleteWordForward: createHotkey('deleteWordForward'),\n  isEscape: createHotkey('escape'),\n  isExtendBackward: createHotkey('extendBackward'),\n  isExtendDownward: createHotkey('extendDownward'),\n  isExtendForward: createHotkey('extendForward'),\n  isExtendLineBackward: createHotkey('extendLineBackward'),\n  isExtendLineForward: createHotkey('extendLineForward'),\n  isExtendUpward: createHotkey('extendUpward'),\n  isItalic: createHotkey('italic'),\n  isMoveBackward: createHotkey('moveBackward'),\n  isMoveDownward: createHotkey('moveDownward'),\n  isMoveForward: createHotkey('moveForward'),\n  isMoveLineBackward: createHotkey('moveLineBackward'),\n  isMoveLineForward: createHotkey('moveLineForward'),\n  isMoveUpward: createHotkey('moveUpward'),\n  isMoveWordBackward: createHotkey('moveWordBackward'),\n  isMoveWordForward: createHotkey('moveWordForward'),\n  isRedo: createHotkey('redo'),\n  isSelectAll: createHotkey('selectAll'),\n  isSoftBreak: createHotkey('insertSoftBreak'),\n  isSplitBlock: createHotkey('splitBlock'),\n  isTab: createComposing('tab'),\n  isTransposeCharacter: createHotkey('transposeCharacter'),\n  isUndo: createHotkey('undo'),\n  isUntab: createComposing('untab'),\n};\n","import type { TNode } from '@udecode/slate';\n\nimport merge from 'lodash/merge.js';\n\nimport {\n  type ApplyDeepToNodesOptions,\n  applyDeepToNodes,\n} from './applyDeepToNodes';\n\n/** Recursively merge a source object to children nodes with a query. */\nexport const mergeDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: merge });\n};\n","import {\n  type Descendant,\n  type Editor,\n  ElementApi,\n  TextApi,\n} from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\nimport type { WithRequiredKey } from '../plugin';\n\nimport { BaseParagraphPlugin } from '../plugins';\n\nconst isInlineNode = (editor: Editor) => (node: Descendant) =>\n  TextApi.isText(node) ||\n  (ElementApi.isElement(node) && editor.api.isInline(node));\n\nconst makeBlockLazy = (type: string) => (): Descendant => ({\n  children: [],\n  type,\n});\n\nconst hasDifferentChildNodes = (\n  descendants: Descendant[],\n  isInline: (node: Descendant) => boolean\n): boolean => {\n  return descendants.some((descendant, index, arr) => {\n    const prevDescendant = arr[index - 1];\n\n    if (index !== 0) {\n      return isInline(descendant) !== isInline(prevDescendant);\n    }\n\n    return false;\n  });\n};\n\n/**\n * Handles 3rd constraint: \"Block nodes can only contain other blocks, or inline\n * and text nodes.\"\n */\nconst normalizeDifferentNodeTypes = (\n  descendants: Descendant[],\n  isInline: (node: Descendant) => boolean,\n  makeDefaultBlock: () => Descendant\n): Descendant[] => {\n  const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline);\n\n  const { fragment } = descendants.reduce(\n    (memo, node) => {\n      if (hasDifferentNodes && isInline(node)) {\n        let block = memo.precedingBlock;\n\n        if (!block) {\n          block = makeDefaultBlock();\n          memo.precedingBlock = block;\n          memo.fragment.push(block);\n        }\n\n        (block.children as Descendant[]).push(node);\n      } else {\n        memo.fragment.push(node);\n        memo.precedingBlock = null;\n      }\n\n      return memo;\n    },\n    {\n      fragment: [] as Descendant[],\n      precedingBlock: null as Descendant | null,\n    }\n  );\n\n  return fragment;\n};\n\n/**\n * Handles 1st constraint: \"All Element nodes must contain at least one Text\n * descendant.\"\n */\nconst normalizeEmptyChildren = (descendants: Descendant[]): Descendant[] => {\n  if (descendants.length === 0) {\n    return [{ text: '' } as Descendant];\n  }\n\n  return descendants;\n};\n\nconst normalize = (\n  descendants: Descendant[],\n  isInline: (node: Descendant) => boolean,\n  makeDefaultBlock: () => Descendant\n): Descendant[] => {\n  descendants = normalizeEmptyChildren(descendants);\n  descendants = normalizeDifferentNodeTypes(\n    descendants,\n    isInline,\n    makeDefaultBlock\n  );\n\n  descendants = descendants.map((node) => {\n    if (ElementApi.isElement(node)) {\n      return {\n        ...node,\n        children: normalize(\n          node.children as Descendant[],\n          isInline,\n          makeDefaultBlock\n        ),\n      };\n    }\n\n    return node;\n  });\n\n  return descendants;\n};\n\n/** Normalize the descendants to a valid document fragment. */\nexport const normalizeDescendantsToDocumentFragment = (\n  editor: SlateEditor,\n  {\n    defaultElementPlugin = BaseParagraphPlugin,\n    descendants,\n  }: { descendants: Descendant[]; defaultElementPlugin?: WithRequiredKey }\n): Descendant[] => {\n  const isInline = isInlineNode(editor);\n  const defaultType = editor.getType(defaultElementPlugin.key);\n  const makeDefaultBlock = makeBlockLazy(defaultType);\n\n  return normalize(descendants, isInline, makeDefaultBlock as any);\n};\n","import {\n  type Path,\n  type TText,\n  ElementApi,\n  NodeApi,\n  TextApi,\n} from '@udecode/slate';\n\nimport type { PluginConfig } from '../../plugin/BasePlugin';\nimport type { EdgeNodes } from './types';\n\nimport { createTSlatePlugin } from '../../plugin/createSlatePlugin';\nimport { getPluginByType } from '../../plugin/getSlatePlugin';\nimport { getEdgeNodes } from './queries';\nimport { getMarkBoundaryAffinity } from './queries/getMarkBoundaryAffinity';\nimport { isNodesAffinity } from './queries/isNodeAffinity';\nimport { setAffinitySelection } from './transforms/setAffinitySelection';\n\nexport type ElementAffinity = {\n  affinity: 'backward' | 'forward';\n  at: Path;\n  type: string;\n};\n\nexport type AffinityConfig = PluginConfig<'affinity'>;\n\n// REVIEW: performance\nexport const AffinityPlugin = createTSlatePlugin<AffinityConfig>({\n  key: 'affinity',\n}).overrideEditor(({ editor, tf: { deleteBackward, insertText, move } }) => ({\n  transforms: {\n    /**\n     * On backspace, if the deletion results in the cursor being at a mark\n     * boundary, then the affinity should be forward. If the deletion removes a\n     * character from the left mark, then the affinity should be backward.\n     */\n    deleteBackward: (unit) => {\n      const apply = () => {\n        if (unit === 'character' && editor.api.isCollapsed()) {\n          const [start] = getEdgeNodes(editor) ?? [null];\n\n          const startText =\n            start &&\n            (TextApi.isText(start[0])\n              ? start[0].text\n              : NodeApi.string(start[0]));\n\n          deleteBackward(unit);\n\n          const edgeNodes = getEdgeNodes(editor);\n\n          if (\n            edgeNodes &&\n            isNodesAffinity(editor, edgeNodes, 'directional') &&\n            !hasElement(edgeNodes)\n          ) {\n            const affinity =\n              startText && startText.length > 1 ? 'backward' : 'forward';\n            setAffinitySelection(editor, edgeNodes, affinity);\n          }\n          return true;\n        }\n      };\n\n      if (apply()) return;\n\n      deleteBackward(unit);\n    },\n    insertText(text, options) {\n      /** This will be computed only for text nodes with marks. */\n      const applyOutwardAffinity = () => {\n        if (!editor.selection || editor.api.isExpanded()) {\n          return;\n        }\n\n        const textPath = editor.selection.focus.path;\n        const textNode = NodeApi.get<TText>(editor, textPath);\n\n        if (!textNode) {\n          return;\n        }\n\n        const marks = Object.keys(NodeApi.extractProps(textNode));\n        const outwardMarks = marks.filter(\n          (type) =>\n            getPluginByType(editor, type)?.rules.selection?.affinity ===\n            'outward'\n        );\n\n        if (\n          !outwardMarks.length ||\n          !editor.api.isEnd(editor.selection.focus, textPath)\n        ) {\n          return;\n        }\n\n        const nextPoint = editor.api.start(textPath, { next: true });\n        const marksToRemove: string[] = [];\n\n        // Get next text node once outside the loop\n        let nextTextNode: TText | null = null;\n        if (nextPoint) {\n          const nextTextPath = nextPoint.path;\n          nextTextNode = NodeApi.get<TText>(editor, nextTextPath) || null;\n        }\n\n        // Check each mark individually\n        for (const markKey of outwardMarks) {\n          if (!textNode[markKey]) {\n            continue; // Skip marks not present on current node\n          }\n\n          const isBetweenSameMarks = nextTextNode?.[markKey];\n\n          if (!isBetweenSameMarks) {\n            marksToRemove.push(markKey);\n          }\n        }\n\n        if (marksToRemove.length > 0) {\n          editor.tf.removeMarks(marksToRemove);\n        }\n      };\n\n      applyOutwardAffinity();\n\n      return insertText(text, options);\n    },\n    move: (options) => {\n      const apply = () => {\n        const {\n          distance = 1,\n          reverse = false,\n          unit = 'character',\n        } = options || {};\n\n        if (\n          unit === 'character' &&\n          distance === 1 &&\n          editor.api.isCollapsed()\n        ) {\n          const preEdgeNodes = getEdgeNodes(editor);\n\n          if (preEdgeNodes && isNodesAffinity(editor, preEdgeNodes, 'hard')) {\n            if (\n              preEdgeNodes &&\n              preEdgeNodes[reverse ? 0 : 1] === null &&\n              getMarkBoundaryAffinity(editor, preEdgeNodes) ===\n                (reverse ? 'forward' : 'backward')\n            ) {\n              setAffinitySelection(\n                editor,\n                preEdgeNodes,\n                reverse ? 'backward' : 'forward'\n              );\n\n              return true;\n            }\n\n            move({ ...options, unit: 'offset' });\n            return true;\n          }\n\n          move(options);\n\n          const postEdgeNodes = getEdgeNodes(editor);\n\n          /**\n           * If the move places the cursor at a mark boundary, then the affinity\n           * should be set to the direction the cursor came from.\n           */\n          if (\n            postEdgeNodes &&\n            isNodesAffinity(editor, postEdgeNodes, 'directional') &&\n            !hasElement(postEdgeNodes)\n          ) {\n            setAffinitySelection(\n              editor,\n              postEdgeNodes,\n              reverse ? 'forward' : 'backward'\n            );\n          }\n\n          return true;\n        }\n      };\n\n      if (apply()) return;\n\n      move(options);\n    },\n  },\n}));\n\nconst hasElement = (edgeNodes: EdgeNodes) => {\n  const [before, after] = edgeNodes;\n\n  return (\n    (before && ElementApi.isElement(before[0])) ||\n    (after && ElementApi.isElement(after[0]))\n  );\n};\n","import {\n  type TElement,\n  type TText,\n  ElementApi,\n  NodeApi,\n  PathApi,\n} from '@udecode/slate';\nimport { type NodeEntry, Path } from 'slate';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { EdgeNodes } from '../types';\n\nimport { getPluginByType } from '../../../plugin/getSlatePlugin';\n\n/**\n * When the cursor is at a mark edge, this function returns the inward node and\n * the outward node (if any). If the cursor is at the start of the text, then\n * the node before the text is returned. If the cursor is at the end of the\n * text, then the node after the text is returned. Otherwise, null is returned.\n */\nexport const getEdgeNodes = (editor: SlateEditor): EdgeNodes | null => {\n  if (!editor.api.isCollapsed()) return null;\n\n  const cursor = editor.selection!.anchor;\n\n  const textRange = editor.api.range(cursor.path);\n\n  if (!textRange) return null;\n\n  const edge = editor.api.isStart(cursor, textRange)\n    ? 'start'\n    : editor.api.isEnd(cursor, textRange)\n      ? 'end'\n      : null;\n\n  if (!edge) return null;\n\n  const parent: TElement | null = (NodeApi.parent(editor, cursor.path) ??\n    null) as TElement | null;\n\n  /** Inline elements */\n\n  const isAffinityInlineElement = (() => {\n    if (!parent || !ElementApi.isElement(parent)) return false;\n\n    const parentAffinity = getPluginByType(editor, parent.type)?.rules.selection\n      ?.affinity;\n\n    return parentAffinity === 'hard' || parentAffinity === 'directional';\n  })();\n\n  const nodeEntry: NodeEntry<TElement | TText> = isAffinityInlineElement\n    ? [parent!, PathApi.parent(cursor.path)]\n    : [NodeApi.get(editor, cursor.path)!, cursor.path];\n\n  if (\n    edge === 'start' &&\n    cursor.path.at(-1) === 0 &&\n    !isAffinityInlineElement\n  ) {\n    return [null, nodeEntry];\n  }\n\n  const siblingPath =\n    edge === 'end' ? Path.next(nodeEntry[1]) : Path.previous(nodeEntry[1]);\n  const siblingNode = NodeApi.get<TText>(editor, siblingPath);\n\n  const siblingEntry: NodeEntry<TText> | null = siblingNode\n    ? [siblingNode, siblingPath]\n    : null;\n\n  return edge === 'end' ? [nodeEntry, siblingEntry] : [siblingEntry, nodeEntry];\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n","export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie,\n\tStrictMode\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/**\n * Each iterates a map, set or array.\n * Or, if any other kind of object, all of its own properties.\n * Regardless whether they are enumerable or symbols\n */\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tReflect.ownKeys(obj).forEach(key => {\n\t\t\titer(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: StrictMode) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tconst isPlain = isPlainObject(base)\n\n\tif (strict === true || (strict === \"class_only\" && !isPlain)) {\n\t\t// Perform a strict copy\n\t\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\t\tdelete descriptors[DRAFT_STATE as any]\n\t\tlet keys = Reflect.ownKeys(descriptors)\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key: any = keys[i]\n\t\t\tconst desc = descriptors[key]\n\t\t\tif (desc.writable === false) {\n\t\t\t\tdesc.writable = true\n\t\t\t\tdesc.configurable = true\n\t\t\t}\n\t\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t\t// with libraries that trap values, like mobx or vue\n\t\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\t\tif (desc.get || desc.set)\n\t\t\t\tdescriptors[key] = {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\t\tvalue: base[key]\n\t\t\t\t}\n\t\t}\n\t\treturn Object.create(getPrototypeOf(base), descriptors)\n\t} else {\n\t\t// perform a sloppy copy\n\t\tconst proto = getPrototypeOf(base)\n\t\tif (proto !== null && isPlain) {\n\t\t\treturn {...base} // assumption: better inner class optimization than the assign below\n\t\t}\n\t\tconst obj = Object.create(proto)\n\t\treturn Object.assign(obj, base)\n\t}\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep)\n\t\t// See #590, don't recurse into non-enumerable / Symbol properties when freezing\n\t\t// So use Object.entries (only string-like, enumerables) instead of each()\n\t\tObject.entries(obj).forEach(([key, value]) => freeze(value, true))\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: readonly Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(value, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path)\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// Immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\t// Per #590, we never freeze symbolic properties. Just to make sure don't accidentally interfere\n\t\t// with other frameworks.\n\t\tif (\n\t\t\t(!parentState || !parentState.scope_.parent_) &&\n\t\t\ttypeof prop !== \"symbol\" &&\n\t\t\tObject.prototype.propertyIsEnumerable.call(targetObject, prop)\n\t\t)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport type StrictMode = boolean | \"class_only\";\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: StrictMode = false\n\n\tconstructor(config?: {\n\t\tautoFreeze?: boolean\n\t\tuseStrictShallowCopy?: StrictMode\n\t}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: StrictMode) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: readonly Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: readonly Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tWritableDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\tProducer,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish,\n\tStrictMode\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n  transform: (ref: PathRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PathRef: PathRefInterface = {\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Operation, Point } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: TextDirection | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n  transform: (ref: PointRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PointRef: PointRefInterface = {\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const RangeRef: RangeRefInterface = {\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const DIRTY_PATH_KEYS: WeakMap<Editor, Set<string>> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import {\n  InsertNodeOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  SplitNodeOperation,\n} from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface PathLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface PathTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PathInterface {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from shallowest to deepest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n  ancestors: (path: Path, options?: PathAncestorsOptions) => Path[]\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n  common: (path: Path, another: Path) => Path\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n  endsAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n  endsAt: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n  endsBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n  equals: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n  hasPrevious: (path: Path) => boolean\n\n  /**\n   * Check if a path is after another.\n   */\n  isAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n  isAncestor: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is before another.\n   */\n  isBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a child of another.\n   */\n  isChild: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n  isCommon: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n  isDescendant: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is the parent of another.\n   */\n  isParent: (path: Path, another: Path) => boolean\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n  isPath: (value: any) => value is Path\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n  isSibling: (path: Path, another: Path) => boolean\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n  levels: (path: Path, options?: PathLevelsOptions) => Path[]\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n  next: (path: Path) => Path\n\n  /**\n   * Returns whether this operation can affect paths or not. Used as an\n   * optimization when updating dirty paths during normalization\n   *\n   * NOTE: This *must* be kept in sync with the implementation of 'transform'\n   * below\n   */\n  operationCanTransformPath: (\n    operation: Operation\n  ) => operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n  parent: (path: Path) => Path\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n  previous: (path: Path) => Path\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n  relative: (path: Path, ancestor: Path) => Path\n\n  /**\n   * Transform a path by an operation.\n   */\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: PathTransformOptions\n  ) => Path | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Path: PathInterface = {\n  ancestors(path: Path, options: PathAncestorsOptions = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  levels(path: Path, options: PathLevelsOptions = {}): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  operationCanTransformPath(\n    operation: Operation\n  ): operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation {\n    switch (operation.type) {\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n      case 'move_node':\n        return true\n      default:\n        return false\n    }\n  },\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  transform(\n    path: Path | null,\n    operation: Operation,\n    options: PathTransformOptions = {}\n  ): Path | null {\n    if (!path) return null\n\n    // PERF: use destructing instead of immer\n    const p = [...path]\n    const { affinity = 'forward' } = options\n\n    // PERF: Exit early if the operation is guaranteed not to have an effect.\n    if (path.length === 0) {\n      return p\n    }\n\n    switch (operation.type) {\n      case 'insert_node': {\n        const { path: op } = operation\n\n        if (\n          Path.equals(op, p) ||\n          Path.endsBefore(op, p) ||\n          Path.isAncestor(op, p)\n        ) {\n          p[op.length - 1] += 1\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path: op } = operation\n\n        if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n          return null\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        } else if (Path.isAncestor(op, p)) {\n          p[op.length - 1] -= 1\n          p[op.length] += position\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p)) {\n          if (affinity === 'forward') {\n            p[p.length - 1] += 1\n          } else if (affinity === 'backward') {\n            // Nothing, because it still refers to the right path.\n          } else {\n            return null\n          }\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] += 1\n        } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n          p[op.length - 1] += 1\n          p[op.length] -= position\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path: op, newPath: onp } = operation\n\n        // If the old and new path are the same, it's a no-op.\n        if (Path.equals(op, onp)) {\n          return p\n        }\n\n        if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n          const copy = onp.slice()\n\n          if (Path.endsBefore(op, onp) && op.length < onp.length) {\n            copy[op.length - 1] -= 1\n          }\n\n          return copy.concat(p.slice(op.length))\n        } else if (\n          Path.isSibling(op, onp) &&\n          (Path.isAncestor(onp, p) || Path.equals(onp, p))\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else {\n            p[op.length - 1] += 1\n          }\n        } else if (\n          Path.endsBefore(onp, p) ||\n          Path.equals(onp, p) ||\n          Path.isAncestor(onp, p)\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          p[onp.length - 1] += 1\n        } else if (Path.endsBefore(op, p)) {\n          if (Path.equals(onp, p)) {\n            p[onp.length - 1] += 1\n          }\n\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n    }\n\n    return p\n  },\n}\n","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Ancestor,\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  Point,\n  Range,\n  Scrubber,\n  Selection,\n  Text,\n} from '../../index'\n\nexport interface GeneralTransforms {\n  /**\n   * Transform the editor by an operation.\n   */\n  transform: (editor: Editor, op: Operation) => void\n}\n\nconst applyToDraft = (editor: Editor, selection: Selection, op: Operation) => {\n  switch (op.type) {\n    case 'insert_node': {\n      const { path, node } = op\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (index > parent.children.length) {\n        throw new Error(\n          `Cannot apply an \"insert_node\" operation at path [${path}] because the destination is past the end of the node.`\n        )\n      }\n\n      parent.children.splice(index, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset)\n      node.text = before + text + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const node = Node.get(editor, path)\n      const prevPath = Path.previous(path)\n      const prev = Node.get(editor, prevPath)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      if (Text.isText(node) && Text.isText(prev)) {\n        prev.text += node.text\n      } else if (!Text.isText(node) && !Text.isText(prev)) {\n        prev.children.push(...node.children)\n      } else {\n        throw new Error(\n          `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${Scrubber.stringify(\n            node\n          )} ${Scrubber.stringify(prev)}`\n        )\n      }\n\n      parent.children.splice(index, 1)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.isAncestor(path, newPath)) {\n        throw new Error(\n          `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, op)!\n      const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n      const newIndex = truePath[truePath.length - 1]\n\n      newParent.children.splice(newIndex, 0, node)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const index = path[path.length - 1]\n      const parent = Node.parent(editor, path)\n      parent.children.splice(index, 1)\n\n      // Transform all the points in the value, but if the point was in the\n      // node that was removed we need to update the range or remove it.\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          const result = Point.transform(point, op)\n\n          if (selection != null && result != null) {\n            selection[key] = result\n          } else {\n            let prev: NodeEntry<Text> | undefined\n            let next: NodeEntry<Text> | undefined\n\n            for (const [n, p] of Node.texts(editor)) {\n              if (Path.compare(p, path) === -1) {\n                prev = [n, p]\n              } else {\n                next = [n, p]\n                break\n              }\n            }\n\n            let preferNext = false\n            if (prev && next) {\n              if (Path.equals(next[1], path)) {\n                preferNext = !Path.hasPrevious(next[1])\n              } else {\n                preferNext =\n                  Path.common(prev[1], path).length <\n                  Path.common(next[1], path).length\n              }\n            }\n\n            if (prev && !preferNext) {\n              point.path = prev[1]\n              point.offset = prev[0].text.length\n            } else if (next) {\n              point.path = next[1]\n              point.offset = 0\n            } else {\n              selection = null\n            }\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      if (text.length === 0) break\n      const node = Node.leaf(editor, path)\n      const before = node.text.slice(0, offset)\n      const after = node.text.slice(offset + text.length)\n      node.text = before + after\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n\n    case 'set_node': {\n      const { path, properties, newProperties } = op\n\n      if (path.length === 0) {\n        throw new Error(`Cannot set properties on the root node!`)\n      }\n\n      const node = Node.get(editor, path)\n\n      for (const key in newProperties) {\n        if (key === 'children' || key === 'text') {\n          throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n        }\n\n        const value = newProperties[<keyof Node>key]\n\n        if (value == null) {\n          delete node[<keyof Node>key]\n        } else {\n          node[<keyof Node>key] = value\n        }\n      }\n\n      // properties that were previously defined, but are now missing, must be deleted\n      for (const key in properties) {\n        if (!newProperties.hasOwnProperty(key)) {\n          delete node[<keyof Node>key]\n        }\n      }\n\n      break\n    }\n\n    case 'set_selection': {\n      const { newProperties } = op\n\n      if (newProperties == null) {\n        selection = newProperties\n      } else {\n        if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${Scrubber.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = { ...newProperties }\n        }\n\n        for (const key in newProperties) {\n          const value = newProperties[<keyof Range>key]\n\n          if (value == null) {\n            if (key === 'anchor' || key === 'focus') {\n              throw new Error(`Cannot remove the \"${key}\" selection property`)\n            }\n\n            delete selection[<keyof Range>key]\n          } else {\n            selection[<keyof Range>key] = value\n          }\n        }\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n\n      if (path.length === 0) {\n        throw new Error(\n          `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n        )\n      }\n\n      const node = Node.get(editor, path)\n      const parent = Node.parent(editor, path)\n      const index = path[path.length - 1]\n      let newNode: Descendant\n\n      if (Text.isText(node)) {\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n        newNode = {\n          ...(properties as Partial<Text>),\n          text: after,\n        }\n      } else {\n        const before = node.children.slice(0, position)\n        const after = node.children.slice(position)\n        node.children = before\n\n        newNode = {\n          ...(properties as Partial<Element>),\n          children: after,\n        }\n      }\n\n      parent.children.splice(index + 1, 0, newNode)\n\n      if (selection) {\n        for (const [point, key] of Range.points(selection)) {\n          selection[key] = Point.transform(point, op)!\n        }\n      }\n\n      break\n    }\n  }\n  return selection\n}\n\n// eslint-disable-next-line no-redeclare\nexport const GeneralTransforms: GeneralTransforms = {\n  transform(editor: Editor, op: Operation): void {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    try {\n      selection = applyToDraft(editor, selection, op)\n    } finally {\n      editor.children = finishDraft(editor.children)\n\n      if (selection) {\n        editor.selection = isDraft(selection)\n          ? (finishDraft(selection) as Range)\n          : selection\n      } else {\n        editor.selection = null\n      }\n    }\n  },\n}\n","import { Editor, Element, Location, Node, Path } from '../../index'\nimport { NodeMatch, PropsCompare, PropsMerge } from '../editor'\nimport { MaximizeMode, RangeMode } from '../../types/types'\n\nexport interface NodeInsertNodesOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: RangeMode\n  hanging?: boolean\n  select?: boolean\n  voids?: boolean\n  batchDirty?: boolean\n}\n\nexport interface NodeTransforms {\n  /**\n   * Insert nodes in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n\n  /**\n   * Split the nodes at a specific location.\n   */\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const NodeTransforms: NodeTransforms = {\n  insertNodes(editor, nodes, options) {\n    editor.insertNodes(nodes, options)\n  },\n  liftNodes(editor, options) {\n    editor.liftNodes(options)\n  },\n  mergeNodes(editor, options) {\n    editor.mergeNodes(options)\n  },\n  moveNodes(editor, options) {\n    editor.moveNodes(options)\n  },\n  removeNodes(editor, options) {\n    editor.removeNodes(options)\n  },\n  setNodes(editor, props, options) {\n    editor.setNodes(props, options)\n  },\n  splitNodes(editor, options) {\n    editor.splitNodes(options)\n  },\n  unsetNodes(editor, props, options) {\n    editor.unsetNodes(props, options)\n  },\n  unwrapNodes(editor, options) {\n    editor.unwrapNodes(options)\n  },\n  wrapNodes(editor, element, options) {\n    editor.wrapNodes(element, options)\n  },\n}\n","import { Editor, Location, Point, Range } from '../../index'\nimport { MoveUnit, SelectionEdge } from '../../types/types'\n\nexport interface SelectionCollapseOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionMoveOptions {\n  distance?: number\n  unit?: MoveUnit\n  reverse?: boolean\n  edge?: SelectionEdge\n}\n\nexport interface SelectionSetPointOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionTransforms {\n  /**\n   * Collapse the selection.\n   */\n  collapse: (editor: Editor, options?: SelectionCollapseOptions) => void\n\n  /**\n   * Unset the selection.\n   */\n  deselect: (editor: Editor) => void\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n  move: (editor: Editor, options?: SelectionMoveOptions) => void\n\n  /**\n   * Set the selection to a new value.\n   */\n  select: (editor: Editor, target: Location) => void\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: SelectionSetPointOptions\n  ) => void\n\n  /**\n   * Set new properties on the selection.\n   */\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const SelectionTransforms: SelectionTransforms = {\n  collapse(editor, options) {\n    editor.collapse(options)\n  },\n  deselect(editor) {\n    editor.deselect()\n  },\n  move(editor, options) {\n    editor.move(options)\n  },\n  select(editor, target) {\n    editor.select(target)\n  },\n  setPoint(editor, props, options) {\n    editor.setPoint(props, options)\n  },\n  setSelection(editor, props) {\n    editor.setSelection(props)\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\n\n/*\n  Custom deep equal comparison for Slate nodes.\n\n  We don't need general purpose deep equality;\n  Slate only supports plain values, Arrays, and nested objects.\n  Complex values nested inside Arrays are not supported.\n\n  Slate objects are designed to be serialised, so\n  missing keys are deliberately normalised to undefined.\n */\nexport const isDeepEqual = (\n  node: Record<string, any>,\n  another: Record<string, any>\n): boolean => {\n  for (const key in node) {\n    const a = node[key]\n    const b = another[key]\n    if (isPlainObject(a) && isPlainObject(b)) {\n      if (!isDeepEqual(a, b)) return false\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n    } else if (a !== b) {\n      return false\n    }\n  }\n\n  /*\n    Deep object equality is only necessary in one direction; in the reverse direction\n    we are only looking for keys that are missing.\n    As above, undefined keys are normalised to missing.\n  */\n\n  for (const key in another) {\n    if (node[key] === undefined && another[key] !== undefined) {\n      return false\n    }\n  }\n\n  return true\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","import { produce } from 'immer'\nimport { isPlainObject } from 'is-plain-object'\nimport { ExtendedType, Operation, Path, Point, PointEntry } from '..'\nimport { RangeDirection } from '../types/types'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeEdgesOptions {\n  reverse?: boolean\n}\n\nexport interface RangeTransformOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface RangeInterface {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n  edges: (range: Range, options?: RangeEdgesOptions) => [Point, Point]\n\n  /**\n   * Get the end point of a range.\n   */\n  end: (range: Range) => Point\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n  equals: (range: Range, another: Range) => boolean\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n  includes: (range: Range, target: Path | Point | Range) => boolean\n\n  /**\n   * Check if a range includes another range.\n   */\n  surrounds: (range: Range, target: Range) => boolean\n\n  /**\n   * Get the intersection of a range with another.\n   */\n  intersection: (range: Range, another: Range) => Range | null\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n  isBackward: (range: Range) => boolean\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n  isCollapsed: (range: Range) => boolean\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n  isExpanded: (range: Range) => boolean\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n  isForward: (range: Range) => boolean\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n  isRange: (value: any) => value is Range\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n\n  /**\n   * Get the start point of a range.\n   */\n  start: (range: Range) => Point\n\n  /**\n   * Transform a range by an operation.\n   */\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: RangeTransformOptions\n  ) => Range | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Range: RangeInterface = {\n  edges(range: Range, options: RangeEdgesOptions = {}): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  surrounds(range: Range, target: Range): boolean {\n    const intersectionRange = Range.intersection(range, target)\n    if (!intersectionRange) {\n      return false\n    }\n    return Range.equals(intersectionRange, target)\n  },\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  transform(\n    range: Range | null,\n    op: Operation,\n    options: RangeTransformOptions = {}\n  ): Range | null {\n    return produce(range, r => {\n      if (r === null) {\n        return null\n      }\n      const { affinity = 'inward' } = options\n      let affinityAnchor: 'forward' | 'backward' | null\n      let affinityFocus: 'forward' | 'backward' | null\n\n      if (affinity === 'inward') {\n        // If the range is collapsed, make sure to use the same affinity to\n        // avoid the two points passing each other and expanding in the opposite\n        // direction\n        const isCollapsed = Range.isCollapsed(r)\n        if (Range.isForward(r)) {\n          affinityAnchor = 'forward'\n          affinityFocus = isCollapsed ? affinityAnchor : 'backward'\n        } else {\n          affinityAnchor = 'backward'\n          affinityFocus = isCollapsed ? affinityAnchor : 'forward'\n        }\n      } else if (affinity === 'outward') {\n        if (Range.isForward(r)) {\n          affinityAnchor = 'backward'\n          affinityFocus = 'forward'\n        } else {\n          affinityAnchor = 'forward'\n          affinityFocus = 'backward'\n        }\n      } else {\n        affinityAnchor = affinity\n        affinityFocus = affinity\n      }\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { Ancestor, Descendant, Editor, ExtendedType, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementInterface {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n  isAncestor: (value: any) => value is Ancestor\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n  isElement: (value: any) => value is Element\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n  isElementList: (value: any) => value is Element[]\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n  isElementProps: (props: any) => props is Partial<Element>\n\n  /**\n   * Check if a value implements the `Element` interface and has elementKey with selected value.\n   * Default it check to `type` key value\n   */\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey?: string\n  ) => value is T\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\n/**\n * Shared the function with isElementType utility\n */\nconst isElement = (value: any): value is Element => {\n  return (\n    isPlainObject(value) &&\n    Node.isNodeList(value.children) &&\n    !Editor.isEditor(value)\n  )\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Element: ElementInterface = {\n  isAncestor(value: any): value is Ancestor {\n    return isPlainObject(value) && Node.isNodeList(value.children)\n  },\n\n  isElement,\n\n  isElementList(value: any): value is Element[] {\n    return Array.isArray(value) && value.every(val => Element.isElement(val))\n  },\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey: string = 'type'\n  ): value is T => {\n    return (\n      isElement(value) && value[<keyof Descendant>elementKey] === elementVal\n    )\n  },\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[<keyof Descendant>key] !== props[<keyof Descendant>key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\nexport type ElementEntry = [Element, Path]\n","import { produce } from 'immer'\nimport { Editor, Path, Range, Scrubber, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeChildrenOptions {\n  reverse?: boolean\n}\n\nexport interface NodeDescendantsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeElementsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeNodesOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (entry: NodeEntry) => boolean\n}\n\nexport interface NodeTextsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeInterface {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n  ancestor: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is top-down, from highest to lowest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go bottom-up.\n   */\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: NodeAncestorsOptions\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n  child: (root: Node, index: number) => Descendant\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n  children: (\n    root: Node,\n    path: Path,\n    options?: NodeChildrenOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n  descendant: (root: Node, path: Path) => Descendant\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n  descendants: (\n    root: Node,\n    options?: NodeDescendantsOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n  elements: (\n    root: Node,\n    options?: NodeElementsOptions\n  ) => Generator<ElementEntry, void, undefined>\n\n  /**\n   * Extract props from a Node.\n   */\n  extractProps: (node: Node) => NodeProps\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n  first: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n  fragment: (root: Node, range: Range) => Descendant[]\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n  get: (root: Node, path: Path) => Node\n\n  /**\n   * Similar to get, but returns undefined if the node does not exist.\n   */\n  getIf: (root: Node, path: Path) => Node | undefined\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n  has: (root: Node, path: Path) => boolean\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n  isNode: (value: any) => value is Node\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n  isNodeList: (value: any) => value is Node[]\n\n  /**\n   * Get the last node entry in a root node from a path.\n   */\n  last: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n  leaf: (root: Node, path: Path) => Text\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from highest to lowest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n  levels: (\n    root: Node,\n    path: Path,\n    options?: NodeLevelsOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Check if a node matches a set of props.\n   */\n  matches: (node: Node, props: Partial<Node>) => boolean\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n  nodes: (\n    root: Node,\n    options?: NodeNodesOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n  parent: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n  string: (node: Node) => string\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n  texts: (\n    root: Node,\n    options?: NodeTextsOptions\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\nconst IS_NODE_LIST_CACHE = new WeakMap<any[], boolean>()\n\n// eslint-disable-next-line no-redeclare\nexport const Node: NodeInterface = {\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: NodeAncestorsOptions = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${Scrubber.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  *children(\n    root: Node,\n    path: Path,\n    options: NodeChildrenOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *descendants(\n    root: Node,\n    options: NodeDescendantsOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  *elements(\n    root: Node,\n    options: NodeElementsOptions = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  get(root: Node, path: Path): Node {\n    const node = Node.getIf(root, path)\n    if (node === undefined) {\n      throw new Error(\n        `Cannot find a descendant at path [${path}] in node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n    return node\n  },\n\n  getIf(root: Node, path: Path): Node | undefined {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  isNodeList(value: any): value is Node[] {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    const cachedResult = IS_NODE_LIST_CACHE.get(value)\n    if (cachedResult !== undefined) {\n      return cachedResult\n    }\n    const isNodeList = value.every(val => Node.isNode(val))\n    IS_NODE_LIST_CACHE.set(value, isNodeList)\n    return isNodeList\n  },\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: NodeLevelsOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  *nodes(\n    root: Node,\n    options: NodeNodesOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  *texts(\n    root: Node,\n    options: NodeTextsOptions = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n","import { ExtendedType, Node, Path, Range } from '..'\nimport { isPlainObject } from 'is-plain-object'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type BaseOperation = NodeOperation | SelectionOperation | TextOperation\nexport type Operation = ExtendedType<'Operation', BaseOperation>\n\nexport interface OperationInterface {\n  /**\n   * Check if a value is a `NodeOperation` object.\n   */\n  isNodeOperation: (value: any) => value is NodeOperation\n\n  /**\n   * Check if a value is an `Operation` object.\n   */\n  isOperation: (value: any) => value is Operation\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n  isOperationList: (value: any) => value is Operation[]\n\n  /**\n   * Check if a value is a `SelectionOperation` object.\n   */\n  isSelectionOperation: (value: any) => value is SelectionOperation\n\n  /**\n   * Check if a value is a `TextOperation` object.\n   */\n  isTextOperation: (value: any) => value is TextOperation\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n  inverse: (op: Operation) => Operation\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Operation: OperationInterface = {\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { isPlainObject } from 'is-plain-object'\nimport { Range } from '../interfaces/range'\nimport { Node } from '../interfaces/node'\nimport { Operation } from '../interfaces/operation'\n\nconst IS_EDITOR_CACHE = new WeakMap<object, boolean>()\n\nexport const isEditor: EditorInterface['isEditor'] = (\n  value: any\n): value is Editor => {\n  const cachedIsEditor = IS_EDITOR_CACHE.get(value)\n  if (cachedIsEditor !== undefined) {\n    return cachedIsEditor\n  }\n\n  if (!isPlainObject(value)) {\n    return false\n  }\n\n  const isEditor =\n    typeof value.addMark === 'function' &&\n    typeof value.apply === 'function' &&\n    typeof value.deleteFragment === 'function' &&\n    typeof value.insertBreak === 'function' &&\n    typeof value.insertSoftBreak === 'function' &&\n    typeof value.insertFragment === 'function' &&\n    typeof value.insertNode === 'function' &&\n    typeof value.insertText === 'function' &&\n    typeof value.isElementReadOnly === 'function' &&\n    typeof value.isInline === 'function' &&\n    typeof value.isSelectable === 'function' &&\n    typeof value.isVoid === 'function' &&\n    typeof value.normalizeNode === 'function' &&\n    typeof value.onChange === 'function' &&\n    typeof value.removeMark === 'function' &&\n    typeof value.getDirtyPaths === 'function' &&\n    (value.marks === null || isPlainObject(value.marks)) &&\n    (value.selection === null || Range.isRange(value.selection)) &&\n    Node.isNodeList(value.children) &&\n    Operation.isOperationList(value.operations)\n  IS_EDITOR_CACHE.set(value, isEditor)\n  return isEditor\n}\n","import {\n  Ancestor,\n  Descendant,\n  Element,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n  Transforms,\n} from '..'\nimport {\n  LeafEdge,\n  MaximizeMode,\n  RangeDirection,\n  SelectionMode,\n  TextDirection,\n  TextUnit,\n  TextUnitAdjustment,\n} from '../types/types'\nimport { OmitFirstArg } from '../utils/types'\nimport { isEditor } from '../editor/is-editor'\nimport {\n  TextInsertFragmentOptions,\n  TextInsertTextOptions,\n} from './transforms/text'\nimport { NodeInsertNodesOptions } from './transforms/node'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\nexport interface BaseEditor {\n  // Core state.\n\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: EditorMarks | null\n\n  // Overrideable core methods.\n\n  apply: (operation: Operation) => void\n  getDirtyPaths: (operation: Operation) => Path[]\n  getFragment: () => Descendant[]\n  isElementReadOnly: (element: Element) => boolean\n  isSelectable: (element: Element) => boolean\n  markableVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry, options?: { operation?: Operation }) => void\n  onChange: (options?: { operation?: Operation }) => void\n  shouldNormalize: ({\n    iteration,\n    dirtyPaths,\n    operation,\n  }: {\n    iteration: number\n    initialDirtyPathsLength: number\n    dirtyPaths: Path[]\n    operation?: Operation\n  }) => boolean\n\n  // Overrideable core transforms.\n\n  addMark: OmitFirstArg<typeof Editor.addMark>\n  collapse: OmitFirstArg<typeof Transforms.collapse>\n  delete: OmitFirstArg<typeof Transforms.delete>\n  deleteBackward: (unit: TextUnit) => void\n  deleteForward: (unit: TextUnit) => void\n  deleteFragment: OmitFirstArg<typeof Editor.deleteFragment>\n  deselect: OmitFirstArg<typeof Transforms.deselect>\n  insertBreak: OmitFirstArg<typeof Editor.insertBreak>\n  insertFragment: OmitFirstArg<typeof Transforms.insertFragment>\n  insertNode: OmitFirstArg<typeof Editor.insertNode>\n  insertNodes: OmitFirstArg<typeof Transforms.insertNodes>\n  insertSoftBreak: OmitFirstArg<typeof Editor.insertSoftBreak>\n  insertText: OmitFirstArg<typeof Transforms.insertText>\n  liftNodes: OmitFirstArg<typeof Transforms.liftNodes>\n  mergeNodes: OmitFirstArg<typeof Transforms.mergeNodes>\n  move: OmitFirstArg<typeof Transforms.move>\n  moveNodes: OmitFirstArg<typeof Transforms.moveNodes>\n  normalize: OmitFirstArg<typeof Editor.normalize>\n  removeMark: OmitFirstArg<typeof Editor.removeMark>\n  removeNodes: OmitFirstArg<typeof Transforms.removeNodes>\n  select: OmitFirstArg<typeof Transforms.select>\n  setNodes: <T extends Node>(\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n  setNormalizing: OmitFirstArg<typeof Editor.setNormalizing>\n  setPoint: OmitFirstArg<typeof Transforms.setPoint>\n  setSelection: OmitFirstArg<typeof Transforms.setSelection>\n  splitNodes: OmitFirstArg<typeof Transforms.splitNodes>\n  unsetNodes: OmitFirstArg<typeof Transforms.unsetNodes>\n  unwrapNodes: OmitFirstArg<typeof Transforms.unwrapNodes>\n  withoutNormalizing: OmitFirstArg<typeof Editor.withoutNormalizing>\n  wrapNodes: OmitFirstArg<typeof Transforms.wrapNodes>\n\n  // Overrideable core queries.\n\n  above: <T extends Ancestor>(\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n  after: OmitFirstArg<typeof Editor.after>\n  before: OmitFirstArg<typeof Editor.before>\n  edges: OmitFirstArg<typeof Editor.edges>\n  elementReadOnly: OmitFirstArg<typeof Editor.elementReadOnly>\n  end: OmitFirstArg<typeof Editor.end>\n  first: OmitFirstArg<typeof Editor.first>\n  fragment: OmitFirstArg<typeof Editor.fragment>\n  getMarks: OmitFirstArg<typeof Editor.marks>\n  hasBlocks: OmitFirstArg<typeof Editor.hasBlocks>\n  hasInlines: OmitFirstArg<typeof Editor.hasInlines>\n  hasPath: OmitFirstArg<typeof Editor.hasPath>\n  hasTexts: OmitFirstArg<typeof Editor.hasTexts>\n  isBlock: OmitFirstArg<typeof Editor.isBlock>\n  isEdge: OmitFirstArg<typeof Editor.isEdge>\n  isEmpty: OmitFirstArg<typeof Editor.isEmpty>\n  isEnd: OmitFirstArg<typeof Editor.isEnd>\n  isInline: OmitFirstArg<typeof Editor.isInline>\n  isNormalizing: OmitFirstArg<typeof Editor.isNormalizing>\n  isStart: OmitFirstArg<typeof Editor.isStart>\n  isVoid: OmitFirstArg<typeof Editor.isVoid>\n  last: OmitFirstArg<typeof Editor.last>\n  leaf: OmitFirstArg<typeof Editor.leaf>\n  levels: <T extends Node>(\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  next: <T extends Descendant>(\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n  node: OmitFirstArg<typeof Editor.node>\n  nodes: <T extends Node>(\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  parent: OmitFirstArg<typeof Editor.parent>\n  path: OmitFirstArg<typeof Editor.path>\n  pathRef: OmitFirstArg<typeof Editor.pathRef>\n  pathRefs: OmitFirstArg<typeof Editor.pathRefs>\n  point: OmitFirstArg<typeof Editor.point>\n  pointRef: OmitFirstArg<typeof Editor.pointRef>\n  pointRefs: OmitFirstArg<typeof Editor.pointRefs>\n  positions: OmitFirstArg<typeof Editor.positions>\n  previous: <T extends Node>(\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n  range: OmitFirstArg<typeof Editor.range>\n  rangeRef: OmitFirstArg<typeof Editor.rangeRef>\n  rangeRefs: OmitFirstArg<typeof Editor.rangeRefs>\n  start: OmitFirstArg<typeof Editor.start>\n  string: OmitFirstArg<typeof Editor.string>\n  unhangRange: OmitFirstArg<typeof Editor.unhangRange>\n  void: OmitFirstArg<typeof Editor.void>\n  shouldMergeNodesRemovePrevNode: OmitFirstArg<\n    typeof Editor.shouldMergeNodesRemovePrevNode\n  >\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\nexport type EditorMarks = Omit<Text, 'text'>\n\nexport interface EditorAboveOptions<T extends Ancestor> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorAfterOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorBeforeOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorDirectedDeletionOptions {\n  unit?: TextUnit\n}\n\nexport interface EditorElementReadOnlyOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorFragmentDeletionOptions {\n  direction?: TextDirection\n}\n\nexport interface EditorLeafOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorLevelsOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  reverse?: boolean\n  voids?: boolean\n}\n\nexport interface EditorNextOptions<T extends Descendant> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorNodeOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorNodesOptions<T extends Node> {\n  at?: Location | Span\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  universal?: boolean\n  reverse?: boolean\n  voids?: boolean\n  pass?: (entry: NodeEntry) => boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorNormalizeOptions {\n  force?: boolean\n  operation?: Operation\n}\n\nexport interface EditorParentOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPointOptions {\n  edge?: LeafEdge\n}\n\nexport interface EditorPointRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPositionsOptions {\n  at?: Location\n  unit?: TextUnitAdjustment\n  reverse?: boolean\n  voids?: boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorPreviousOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorRangeRefOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface EditorStringOptions {\n  voids?: boolean\n}\n\nexport interface EditorUnhangRangeOptions {\n  voids?: boolean\n}\n\nexport interface EditorVoidOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorInterface {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n  addMark: (editor: Editor, key: string, value: any) => void\n\n  /**\n   * Get the point after a location.\n   */\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: EditorAfterOptions\n  ) => Point | undefined\n\n  /**\n   * Get the point before a location.\n   */\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: EditorBeforeOptions\n  ) => Point | undefined\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n  deleteBackward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n  deleteForward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete the content in the current selection.\n   */\n  deleteFragment: (\n    editor: Editor,\n    options?: EditorFragmentDeletionOptions\n  ) => void\n\n  /**\n   * Get the start and end points of a location.\n   */\n  edges: (editor: Editor, at: Location) => [Point, Point]\n\n  /**\n   * Match a read-only element in the current branch of the editor.\n   */\n  elementReadOnly: (\n    editor: Editor,\n    options?: EditorElementReadOnlyOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Get the end point of a location.\n   */\n  end: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the first node at a location.\n   */\n  first: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the fragment at a location.\n   */\n  fragment: (editor: Editor, at: Location) => Descendant[]\n\n  /**\n   * Check if a node has block children.\n   */\n  hasBlocks: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a node has inline and text children.\n   */\n  hasInlines: (editor: Editor, element: Element) => boolean\n\n  hasPath: (editor: Editor, path: Path) => boolean\n\n  /**\n   * Check if a node has text children.\n   */\n  hasTexts: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertBreak: (editor: Editor) => void\n\n  /**\n   * Inserts a fragment\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Atomically inserts `nodes`\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNode: <T extends Node>(\n    editor: Editor,\n    node: Node,\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Insert a soft break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertSoftBreak: (editor: Editor) => void\n\n  /**\n   * Insert a string of text\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n  isBlock: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n  isEditor: (value: any) => value is Editor\n\n  /**\n   * Check if a value is a read-only `Element` object.\n   */\n  isElementReadOnly: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n  isEmpty: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n  isInline: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n  isNormalizing: (editor: Editor) => boolean\n\n  /**\n   * Check if a value is a selectable `Element` object.\n   */\n  isSelectable: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n  isVoid: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Get the last node at a location.\n   */\n  last: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the leaf text node at a location.\n   */\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: EditorLeafOptions\n  ) => NodeEntry<Text>\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get the node at a location.\n   */\n  node: (editor: Editor, at: Location, options?: EditorNodeOptions) => NodeEntry\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n  normalize: (editor: Editor, options?: EditorNormalizeOptions) => void\n\n  /**\n   * Get the parent node of a location.\n   */\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: EditorParentOptions\n  ) => NodeEntry<Ancestor>\n\n  /**\n   * Get the path of a location.\n   */\n  path: (editor: Editor, at: Location, options?: EditorPathOptions) => Path\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: EditorPathRefOptions\n  ) => PathRef\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n  pathRefs: (editor: Editor) => Set<PathRef>\n\n  /**\n   * Get the start or end point of a location.\n   */\n  point: (editor: Editor, at: Location, options?: EditorPointOptions) => Point\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: EditorPointRefOptions\n  ) => PointRef\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n  pointRefs: (editor: Editor) => Set<PointRef>\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n  positions: (\n    editor: Editor,\n    options?: EditorPositionsOptions\n  ) => Generator<Point, void, undefined>\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get a range of a location.\n   */\n  range: (editor: Editor, at: Location, to?: Location) => Range\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: EditorRangeRefOptions\n  ) => RangeRef\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n  removeMark: (editor: Editor, key: string) => void\n\n  /**\n   * Manually set if the editor should currently be normalizing.\n   *\n   * Note: Using this incorrectly can leave the editor in an invalid state.\n   *\n   */\n  setNormalizing: (editor: Editor, isNormalizing: boolean) => void\n\n  /**\n   * Get the start point of a location.\n   */\n  start: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: EditorStringOptions\n  ) => string\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: EditorUnhangRangeOptions\n  ) => Range\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n  void: (\n    editor: Editor,\n    options?: EditorVoidOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n\n  /**\n   *  Call a function, Determine whether or not remove the previous node when merge.\n   */\n  shouldMergeNodesRemovePrevNode: (\n    editor: Editor,\n    prevNodeEntry: NodeEntry,\n    curNodeEntry: NodeEntry\n  ) => boolean\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Editor: EditorInterface = {\n  above(editor, options) {\n    return editor.above(options)\n  },\n\n  addMark(editor, key, value) {\n    editor.addMark(key, value)\n  },\n\n  after(editor, at, options) {\n    return editor.after(at, options)\n  },\n\n  before(editor, at, options) {\n    return editor.before(at, options)\n  },\n\n  deleteBackward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  deleteForward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  deleteFragment(editor, options) {\n    editor.deleteFragment(options)\n  },\n\n  edges(editor, at) {\n    return editor.edges(at)\n  },\n\n  elementReadOnly(editor: Editor, options: EditorElementReadOnlyOptions = {}) {\n    return editor.elementReadOnly(options)\n  },\n\n  end(editor, at) {\n    return editor.end(at)\n  },\n\n  first(editor, at) {\n    return editor.first(at)\n  },\n\n  fragment(editor, at) {\n    return editor.fragment(at)\n  },\n\n  hasBlocks(editor, element) {\n    return editor.hasBlocks(element)\n  },\n\n  hasInlines(editor, element) {\n    return editor.hasInlines(element)\n  },\n\n  hasPath(editor, path) {\n    return editor.hasPath(path)\n  },\n\n  hasTexts(editor, element) {\n    return editor.hasTexts(element)\n  },\n\n  insertBreak(editor) {\n    editor.insertBreak()\n  },\n\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n\n  insertNode(editor, node) {\n    editor.insertNode(node)\n  },\n\n  insertSoftBreak(editor) {\n    editor.insertSoftBreak()\n  },\n\n  insertText(editor, text) {\n    editor.insertText(text)\n  },\n\n  isBlock(editor, value) {\n    return editor.isBlock(value)\n  },\n\n  isEdge(editor, point, at) {\n    return editor.isEdge(point, at)\n  },\n\n  isEditor(value: any): value is Editor {\n    return isEditor(value)\n  },\n\n  isElementReadOnly(editor, element) {\n    return editor.isElementReadOnly(element)\n  },\n\n  isEmpty(editor, element) {\n    return editor.isEmpty(element)\n  },\n\n  isEnd(editor, point, at) {\n    return editor.isEnd(point, at)\n  },\n\n  isInline(editor, value) {\n    return editor.isInline(value)\n  },\n\n  isNormalizing(editor) {\n    return editor.isNormalizing()\n  },\n\n  isSelectable(editor: Editor, value: Element) {\n    return editor.isSelectable(value)\n  },\n\n  isStart(editor, point, at) {\n    return editor.isStart(point, at)\n  },\n\n  isVoid(editor, value) {\n    return editor.isVoid(value)\n  },\n\n  last(editor, at) {\n    return editor.last(at)\n  },\n\n  leaf(editor, at, options) {\n    return editor.leaf(at, options)\n  },\n\n  levels(editor, options) {\n    return editor.levels(options)\n  },\n\n  marks(editor) {\n    return editor.getMarks()\n  },\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ): NodeEntry<T> | undefined {\n    return editor.next(options)\n  },\n\n  node(editor, at, options) {\n    return editor.node(at, options)\n  },\n\n  nodes(editor, options) {\n    return editor.nodes(options)\n  },\n\n  normalize(editor, options) {\n    editor.normalize(options)\n  },\n\n  parent(editor, at, options) {\n    return editor.parent(at, options)\n  },\n\n  path(editor, at, options) {\n    return editor.path(at, options)\n  },\n\n  pathRef(editor, path, options) {\n    return editor.pathRef(path, options)\n  },\n\n  pathRefs(editor) {\n    return editor.pathRefs()\n  },\n\n  point(editor, at, options) {\n    return editor.point(at, options)\n  },\n\n  pointRef(editor, point, options) {\n    return editor.pointRef(point, options)\n  },\n\n  pointRefs(editor) {\n    return editor.pointRefs()\n  },\n\n  positions(editor, options) {\n    return editor.positions(options)\n  },\n\n  previous(editor, options) {\n    return editor.previous(options)\n  },\n\n  range(editor, at, to) {\n    return editor.range(at, to)\n  },\n\n  rangeRef(editor, range, options) {\n    return editor.rangeRef(range, options)\n  },\n\n  rangeRefs(editor) {\n    return editor.rangeRefs()\n  },\n\n  removeMark(editor, key) {\n    editor.removeMark(key)\n  },\n\n  setNormalizing(editor, isNormalizing) {\n    editor.setNormalizing(isNormalizing)\n  },\n\n  start(editor, at) {\n    return editor.start(at)\n  },\n\n  string(editor, at, options) {\n    return editor.string(at, options)\n  },\n\n  unhangRange(editor, range, options) {\n    return editor.unhangRange(range, options)\n  },\n\n  void(editor, options) {\n    return editor.void(options)\n  },\n\n  withoutNormalizing(editor, fn: () => void) {\n    editor.withoutNormalizing(fn)\n  },\n  shouldMergeNodesRemovePrevNode: (editor, prevNode, curNode) => {\n    return editor.shouldMergeNodesRemovePrevNode(prevNode, curNode)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n\nexport type PropsCompare = (prop: Partial<Node>, node: Partial<Node>) => boolean\nexport type PropsMerge = (prop: Partial<Node>, node: Partial<Node>) => object\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n  isLocation: (value: any) => value is Location\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Location: LocationInterface = {\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n  isSpan: (value: any) => value is Span\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Span: SpanInterface = {\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { produce } from 'immer'\nimport { ExtendedType, Operation, Path } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PointInterface {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n\n  /**\n   * Check if a point is after another.\n   */\n  isAfter: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is before another.\n   */\n  isBefore: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n  equals: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n  isPoint: (value: any) => value is Point\n\n  /**\n   * Transform a point by an operation.\n   */\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: PointTransformOptions\n  ) => Point | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Point: PointInterface = {\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  transform(\n    point: Point | null,\n    op: Operation,\n    options: PointTransformOptions = {}\n  ): Point | null {\n    return produce(point, p => {\n      if (p === null) {\n        return null\n      }\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (\n            Path.equals(op.path, path) &&\n            (op.offset < offset ||\n              (op.offset === offset && affinity === 'forward'))\n          ) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","export type Scrubber = (key: string, value: unknown) => unknown\n\nexport interface ScrubberInterface {\n  setScrubber(scrubber: Scrubber | undefined): void\n  stringify(value: any): string\n}\n\nlet _scrubber: Scrubber | undefined = undefined\n\n/**\n * This interface implements a stringify() function, which is used by Slate\n * internally when generating exceptions containing end user data. Developers\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\n * stringify() function.\n *\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\n *\n *    import { Scrubber } from 'slate';\n *    Scrubber.setScrubber((key, val) => {\n *      if (key === 'text') return '...scrubbed...'\n *      return val\n *    });\n *\n */\n// eslint-disable-next-line no-redeclare\nexport const Scrubber: ScrubberInterface = {\n  setScrubber(scrubber: Scrubber | undefined): void {\n    _scrubber = scrubber\n  },\n\n  stringify(value: any): string {\n    return JSON.stringify(value, _scrubber)\n  },\n}\n","import { isPlainObject } from 'is-plain-object'\nimport { Path, Range } from '..'\nimport { ExtendedType } from '../types/custom-types'\nimport { isDeepEqual } from '../utils/deep-equal'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface LeafPosition {\n  start: number\n  end: number\n  isFirst?: true\n  isLast?: true\n}\n\nexport interface TextEqualsOptions {\n  loose?: boolean\n}\n\nexport type DecoratedRange = Range & {\n  /**\n   * Customize how another decoration is merged into a text node. If not specified, `Object.assign` would be used.\n   * It is useful for overlapping decorations with the same key but different values.\n   */\n  merge?: (leaf: Text, decoration: object) => void\n}\n\nexport interface TextInterface {\n  /**\n   * Check if two text nodes are equal.\n   *\n   * When loose is set, the text is not compared. This is\n   * used to check whether sibling text nodes can be merged.\n   */\n  equals: (text: Text, another: Text, options?: TextEqualsOptions) => boolean\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n  isText: (value: any) => value is Text\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n  isTextList: (value: any) => value is Text[]\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n  isTextProps: (props: any) => props is Partial<Text>\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n  matches: (text: Text, props: Partial<Text>) => boolean\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n  decorations: (\n    node: Text,\n    decorations: DecoratedRange[]\n  ) => { leaf: Text; position?: LeafPosition }[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Text: TextInterface = {\n  equals(text: Text, another: Text, options: TextEqualsOptions = {}): boolean {\n    const { loose = false } = options\n\n    function omitText(obj: Record<any, any>) {\n      const { text, ...rest } = obj\n\n      return rest\n    }\n\n    return isDeepEqual(\n      loose ? omitText(text) : text,\n      loose ? omitText(another) : another\n    )\n  },\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (\n        !text.hasOwnProperty(key) ||\n        text[<keyof Text>key] !== props[<keyof Text>key]\n      ) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  decorations(\n    node: Text,\n    decorations: DecoratedRange[]\n  ): { leaf: Text; position?: LeafPosition }[] {\n    let leaves: { leaf: Text; position?: LeafPosition }[] = [\n      { leaf: { ...node } },\n    ]\n\n    for (const dec of decorations) {\n      const { anchor, focus, merge: mergeDecoration, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let leafEnd = 0\n      const decorationStart = start.offset\n      const decorationEnd = end.offset\n      const merge = mergeDecoration ?? Object.assign\n\n      for (const { leaf } of leaves) {\n        const { length } = leaf.text\n        const leafStart = leafEnd\n        leafEnd += length\n\n        // If the range encompasses the entire leaf, add the range.\n        if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n          merge(leaf, rest)\n          next.push({ leaf })\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (decorationStart !== decorationEnd &&\n            (decorationStart === leafEnd || decorationEnd === leafStart)) ||\n          decorationStart > leafEnd ||\n          decorationEnd < leafStart ||\n          (decorationEnd === leafStart && leafStart !== 0)\n        ) {\n          next.push({ leaf })\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (decorationEnd < leafEnd) {\n          const off = decorationEnd - leafStart\n          after = { leaf: { ...middle, text: middle.text.slice(off) } }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (decorationStart > leafStart) {\n          const off = decorationStart - leafStart\n          before = { leaf: { ...middle, text: middle.text.slice(0, off) } }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        merge(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push({ leaf: middle })\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    if (leaves.length > 1) {\n      let currentOffset = 0\n      for (const [index, item] of leaves.entries()) {\n        const start = currentOffset\n        const end = start + item.leaf.text.length\n        const position: LeafPosition = { start, end }\n\n        if (index === 0) position.isFirst = true\n        if (index === leaves.length - 1) position.isLast = true\n\n        item.position = position\n        currentOffset = end\n      }\n    }\n\n    return leaves\n  },\n}\n","import { Editor, Location } from '../interfaces'\n\n/**\n * Get the default location to insert content into the editor.\n * By default, use the selection as the target location. But if there is\n * no selection, insert at the end of the document since that is such a\n * common use case when inserting from a non-selected state.\n */\nexport const getDefaultInsertLocation = (editor: Editor): Location => {\n  if (editor.selection) {\n    return editor.selection\n  } else if (editor.children.length > 0) {\n    return Editor.end(editor, [])\n  } else {\n    return [0]\n  }\n}\n","import { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\n\nexport const matchPath = (\n  editor: Editor,\n  path: Path\n): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (str: string, isRTL = false): number => {\n  const isLTR = !isRTL\n  const codepoints = isRTL ? codepointsIteratorRTL(str) : str\n\n  let left: CodepointType = CodepointType.None\n  let right: CodepointType = CodepointType.None\n  let distance = 0\n  // Evaluation of these conditions are deferred.\n  let gb11: boolean | null = null // Is GB11 applicable?\n  let gb12Or13: boolean | null = null // Is GB12 or GB13 applicable?\n\n  for (const char of codepoints) {\n    const code = char.codePointAt(0)\n    if (!code) break\n\n    const type = getCodepointType(char, code)\n    ;[left, right] = isLTR ? [right, type] : [type, left]\n\n    if (\n      intersects(left, CodepointType.ZWJ) &&\n      intersects(right, CodepointType.ExtPict)\n    ) {\n      if (isLTR) {\n        gb11 = endsWithEmojiZWJ(str.substring(0, distance))\n      } else {\n        gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance))\n      }\n      if (!gb11) break\n    }\n\n    if (\n      intersects(left, CodepointType.RI) &&\n      intersects(right, CodepointType.RI)\n    ) {\n      if (gb12Or13 !== null) {\n        gb12Or13 = !gb12Or13\n      } else {\n        if (isLTR) {\n          gb12Or13 = true\n        } else {\n          gb12Or13 = endsWithOddNumberOfRIs(\n            str.substring(0, str.length - distance)\n          )\n        }\n      }\n      if (!gb12Or13) break\n    }\n\n    if (\n      left !== CodepointType.None &&\n      right !== CodepointType.None &&\n      isBoundaryPair(left, right)\n    ) {\n      break\n    }\n\n    distance += char.length\n  }\n\n  return distance || 1\n}\n\nconst SPACE = /\\s/\nconst PUNCTUATION =\n  /[\\u002B\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string, isRTL = false): number => {\n  let dist = 0\n  let started = false\n\n  while (text.length > 0) {\n    const charDist = getCharacterDistance(text, isRTL)\n    const [char, remaining] = splitByCharacterDistance(text, charDist, isRTL)\n\n    if (isWordCharacter(char, remaining, isRTL)) {\n      started = true\n      dist += charDist\n    } else if (!started) {\n      dist += charDist\n    } else {\n      break\n    }\n\n    text = remaining\n  }\n\n  return dist\n}\n\n/**\n * Split a string in two parts at a given distance starting from the end when\n * `isRTL` is set to `true`.\n */\n\nexport const splitByCharacterDistance = (\n  str: string,\n  dist: number,\n  isRTL?: boolean\n): [string, string] => {\n  if (isRTL) {\n    const at = str.length - dist\n    return [str.slice(at, str.length), str.slice(0, at)]\n  }\n\n  return [str.slice(0, dist), str.slice(dist)]\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (\n  char: string,\n  remaining: string,\n  isRTL = false\n): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    const charDist = getCharacterDistance(remaining, isRTL)\n    const [nextChar, nextRemaining] = splitByCharacterDistance(\n      remaining,\n      charDist,\n      isRTL\n    )\n\n    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Iterate on codepoints from right to left.\n */\n\nexport const codepointsIteratorRTL = function* (str: string) {\n  const end = str.length - 1\n\n  for (let i = 0; i < str.length; i++) {\n    const char1 = str.charAt(end - i)\n\n    if (isLowSurrogate(char1.charCodeAt(0))) {\n      const char2 = str.charAt(end - i - 1)\n      if (isHighSurrogate(char2.charCodeAt(0))) {\n        yield char2 + char1\n\n        i++\n        continue\n      }\n    }\n\n    yield char1\n  }\n}\n\n/**\n * Is `charCode` a high surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isHighSurrogate = (charCode: number) => {\n  return charCode >= 0xd800 && charCode <= 0xdbff\n}\n\n/**\n * Is `charCode` a low surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isLowSurrogate = (charCode: number) => {\n  return charCode >= 0xdc00 && charCode <= 0xdfff\n}\n\nenum CodepointType {\n  None = 0,\n  Extend = 1 << 0,\n  ZWJ = 1 << 1,\n  RI = 1 << 2,\n  Prepend = 1 << 3,\n  SpacingMark = 1 << 4,\n  L = 1 << 5,\n  V = 1 << 6,\n  T = 1 << 7,\n  LV = 1 << 8,\n  LVT = 1 << 9,\n  ExtPict = 1 << 10,\n  Any = 1 << 11,\n}\n\nconst reExtend = /^[\\p{Gr_Ext}\\p{EMod}]$/u\nconst rePrepend =\n  /^[\\u0600-\\u0605\\u06DD\\u070F\\u0890-\\u0891\\u08E2\\u0D4E\\u{110BD}\\u{110CD}\\u{111C2}-\\u{111C3}\\u{1193F}\\u{11941}\\u{11A3A}\\u{11A84}-\\u{11A89}\\u{11D46}]$/u\nconst reSpacingMark =\n  /^[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BF-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC1\\u0CC3-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0D02-\\u0D03\\u0D3F-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82-\\u0D83\\u0DD0-\\u0DD1\\u0DD8-\\u0DDE\\u0DF2-\\u0DF3\\u0E33\\u0EB3\\u0F3E-\\u0F3F\\u0F7F\\u1031\\u103B-\\u103C\\u1056-\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF7\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BE-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC\\u{11000}\\u{11002}\\u{11082}\\u{110B0}-\\u{110B2}\\u{110B7}-\\u{110B8}\\u{1112C}\\u{11145}-\\u{11146}\\u{11182}\\u{111B3}-\\u{111B5}\\u{111BF}-\\u{111C0}\\u{111CE}\\u{1122C}-\\u{1122E}\\u{11232}-\\u{11233}\\u{11235}\\u{112E0}-\\u{112E2}\\u{11302}-\\u{11303}\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}-\\u{11348}\\u{1134B}-\\u{1134D}\\u{11362}-\\u{11363}\\u{11435}-\\u{11437}\\u{11440}-\\u{11441}\\u{11445}\\u{114B1}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BC}\\u{114BE}\\u{114C1}\\u{115B0}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{11630}-\\u{11632}\\u{1163B}-\\u{1163C}\\u{1163E}\\u{116AC}\\u{116AE}-\\u{116AF}\\u{116B6}\\u{11726}\\u{1182C}-\\u{1182E}\\u{11838}\\u{11931}-\\u{11935}\\u{11937}-\\u{11938}\\u{1193D}\\u{11940}\\u{11942}\\u{119D1}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E4}\\u{11A39}\\u{11A57}-\\u{11A58}\\u{11A97}\\u{11C2F}\\u{11C3E}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D8A}-\\u{11D8E}\\u{11D93}-\\u{11D94}\\u{11D96}\\u{11EF5}-\\u{11EF6}\\u{16F51}-\\u{16F87}\\u{16FF0}-\\u{16FF1}\\u{1D166}\\u{1D16D}]$/u\nconst reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/u\nconst reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/u\nconst reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/u\nconst reLV =\n  /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/u\nconst reLVT =\n  /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/u\nconst reExtPict = /^\\p{ExtPict}$/u\n\nconst getCodepointType = (char: string, code: number): CodepointType => {\n  let type = CodepointType.Any\n  if (char.search(reExtend) !== -1) {\n    type |= CodepointType.Extend\n  }\n  if (code === 0x200d) {\n    type |= CodepointType.ZWJ\n  }\n  if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n    type |= CodepointType.RI\n  }\n  if (char.search(rePrepend) !== -1) {\n    type |= CodepointType.Prepend\n  }\n  if (char.search(reSpacingMark) !== -1) {\n    type |= CodepointType.SpacingMark\n  }\n  if (char.search(reL) !== -1) {\n    type |= CodepointType.L\n  }\n  if (char.search(reV) !== -1) {\n    type |= CodepointType.V\n  }\n  if (char.search(reT) !== -1) {\n    type |= CodepointType.T\n  }\n  if (char.search(reLV) !== -1) {\n    type |= CodepointType.LV\n  }\n  if (char.search(reLVT) !== -1) {\n    type |= CodepointType.LVT\n  }\n  if (char.search(reExtPict) !== -1) {\n    type |= CodepointType.ExtPict\n  }\n\n  return type\n}\n\nfunction intersects(x: CodepointType, y: CodepointType) {\n  return (x & y) !== 0\n}\n\nconst NonBoundaryPairs: [CodepointType, CodepointType][] = [\n  // GB6\n  [\n    CodepointType.L,\n    CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT,\n  ],\n  // GB7\n  [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],\n  // GB8\n  [CodepointType.LVT | CodepointType.T, CodepointType.T],\n  // GB9\n  [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],\n  // GB9a\n  [CodepointType.Any, CodepointType.SpacingMark],\n  // GB9b\n  [CodepointType.Prepend, CodepointType.Any],\n  // GB11\n  [CodepointType.ZWJ, CodepointType.ExtPict],\n  // GB12 and GB13\n  [CodepointType.RI, CodepointType.RI],\n]\n\nfunction isBoundaryPair(left: CodepointType, right: CodepointType) {\n  return (\n    NonBoundaryPairs.findIndex(\n      r => intersects(left, r[0]) && intersects(right, r[1])\n    ) === -1\n  )\n}\n\nconst endingEmojiZWJ = /\\p{ExtPict}[\\p{Gr_Ext}\\p{EMod}]*\\u200D$/u\nconst endsWithEmojiZWJ = (str: string): boolean => {\n  return str.search(endingEmojiZWJ) !== -1\n}\n\nconst endingRIs = /\\p{RI}+$/gu\nconst endsWithOddNumberOfRIs = (str: string): boolean => {\n  const match = str.match(endingRIs)\n  if (match === null) {\n    return false\n  } else {\n    // A RI is represented by a surrogate pair.\n    const numRIs = match[0].length / 2\n    return numRIs % 2 === 1\n  }\n}\n","import { Editor, Location, Node, Path, Range, Transforms } from '../../index'\nimport { TextUnit } from '../../types/types'\nimport { getDefaultInsertLocation } from '../../utils'\n\nexport interface TextDeleteOptions {\n  at?: Location\n  distance?: number\n  unit?: TextUnit\n  reverse?: boolean\n  hanging?: boolean\n  voids?: boolean\n}\n\nexport interface TextInsertFragmentOptions {\n  at?: Location\n  hanging?: boolean\n  voids?: boolean\n  batchDirty?: boolean\n}\n\nexport interface TextInsertTextOptions {\n  at?: Location\n  voids?: boolean\n}\n\nexport interface TextTransforms {\n  /**\n   * Delete content in the editor.\n   */\n  delete: (editor: Editor, options?: TextDeleteOptions) => void\n\n  /**\n   * Insert a fragment in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Insert a string of text in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const TextTransforms: TextTransforms = {\n  delete(editor, options) {\n    editor.delete(options)\n  },\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n  insertText(\n    editor: Editor,\n    text: string,\n    options: TextInsertTextOptions = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = getDefaultInsertLocation(editor) } = options\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n          const start = Range.start(at)\n          const startRef = Editor.pointRef(editor, start)\n          const endRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          const startPoint = startRef.unref()\n          const endPoint = endRef.unref()\n\n          at = startPoint || endPoint!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (\n        (!voids && Editor.void(editor, { at })) ||\n        Editor.elementReadOnly(editor, { at })\n      ) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n","// perf\n\nimport { Editor } from '../interfaces/editor'\n\nconst BATCHING_DIRTY_PATHS: WeakMap<Editor, boolean> = new WeakMap()\n\nexport const isBatchingDirtyPaths = (editor: Editor) => {\n  return BATCHING_DIRTY_PATHS.get(editor) || false\n}\n\nexport const batchDirtyPaths = (\n  editor: Editor,\n  fn: () => void,\n  update: () => void\n) => {\n  const value = BATCHING_DIRTY_PATHS.get(editor) || false\n  BATCHING_DIRTY_PATHS.set(editor, true)\n  try {\n    fn()\n    update()\n  } finally {\n    BATCHING_DIRTY_PATHS.set(editor, value)\n  }\n}\n","import { DIRTY_PATH_KEYS, DIRTY_PATHS } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Editor } from '../interfaces/editor'\n\n/**\n * update editor dirty paths\n *\n * @param newDirtyPaths: Path[]; new dirty paths\n * @param transform: (p: Path) => Path | null; how to transform existing dirty paths\n */\nexport function updateDirtyPaths(\n  editor: Editor,\n  newDirtyPaths: Path[],\n  transform?: (p: Path) => Path | null\n) {\n  const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n  const oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set()\n  let dirtyPaths: Path[]\n  let dirtyPathKeys: Set<string>\n\n  const add = (path: Path | null) => {\n    if (path) {\n      const key = path.join(',')\n\n      if (!dirtyPathKeys.has(key)) {\n        dirtyPathKeys.add(key)\n        dirtyPaths.push(path)\n      }\n    }\n  }\n\n  if (transform) {\n    dirtyPaths = []\n    dirtyPathKeys = new Set()\n    for (const path of oldDirtyPaths) {\n      const newPath = transform(path)\n      add(newPath)\n    }\n  } else {\n    dirtyPaths = oldDirtyPaths\n    dirtyPathKeys = oldDirtyPathKeys\n  }\n\n  for (const path of newDirtyPaths) {\n    add(path)\n  }\n\n  DIRTY_PATHS.set(editor, dirtyPaths)\n  DIRTY_PATH_KEYS.set(editor, dirtyPathKeys)\n}\n","import { PathRef } from '../interfaces/path-ref'\nimport { PointRef } from '../interfaces/point-ref'\nimport { RangeRef } from '../interfaces/range-ref'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\nimport { isBatchingDirtyPaths } from './batch-dirty-paths'\nimport { updateDirtyPaths } from './update-dirty-paths'\n\nexport const apply: WithEditorFirstArg<Editor['apply']> = (editor, op) => {\n  for (const ref of Editor.pathRefs(editor)) {\n    PathRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.pointRefs(editor)) {\n    PointRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.rangeRefs(editor)) {\n    RangeRef.transform(ref, op)\n  }\n\n  // update dirty paths\n  if (!isBatchingDirtyPaths(editor)) {\n    const transform = Path.operationCanTransformPath(op)\n      ? (p: Path) => Path.transform(p, op)\n      : undefined\n    updateDirtyPaths(editor, editor.getDirtyPaths(op), transform)\n  }\n\n  Transforms.transform(editor, op)\n  editor.operations.push(op)\n  Editor.normalize(editor, {\n    operation: op,\n  })\n\n  // Clear any formats applied to the cursor if the selection changes.\n  if (op.type === 'set_selection') {\n    editor.marks = null\n  }\n\n  if (!FLUSHING.get(editor)) {\n    FLUSHING.set(editor, true)\n\n    Promise.resolve().then(() => {\n      FLUSHING.set(editor, false)\n      editor.onChange({ operation: op })\n      editor.operations = []\n    })\n  }\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\nexport const getDirtyPaths: WithEditorFirstArg<Editor['getDirtyPaths']> = (\n  editor,\n  op\n) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","import { Editor, Node } from '../interfaces'\nimport { WithEditorFirstArg } from '../utils'\n\nexport const getFragment: WithEditorFirstArg<\n  Editor['getFragment']\n> = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    return Node.fragment(editor, selection)\n  }\n  return []\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Transforms } from '../interfaces/transforms'\nimport { Descendant, Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\nexport const normalizeNode: WithEditorFirstArg<Editor['normalizeNode']> = (\n  editor,\n  entry\n) => {\n  const [node, path] = entry\n\n  // There are no core normalizations for text nodes.\n  if (Text.isText(node)) {\n    return\n  }\n\n  // Ensure that block and inline nodes have at least one text child.\n  if (Element.isElement(node) && node.children.length === 0) {\n    const child = { text: '' }\n    Transforms.insertNodes(editor, child, {\n      at: path.concat(0),\n      voids: true,\n    })\n    return\n  }\n\n  // Determine whether the node should have block or inline children.\n  const shouldHaveInlines = Editor.isEditor(node)\n    ? false\n    : Element.isElement(node) &&\n      (editor.isInline(node) ||\n        node.children.length === 0 ||\n        Text.isText(node.children[0]) ||\n        editor.isInline(node.children[0]))\n\n  // Since we'll be applying operations while iterating, keep track of an\n  // index that accounts for any added/removed nodes.\n  let n = 0\n\n  for (let i = 0; i < node.children.length; i++, n++) {\n    const currentNode = Node.get(editor, path)\n    if (Text.isText(currentNode)) continue\n    const child = currentNode.children[n] as Descendant\n    const prev = currentNode.children[n - 1] as Descendant\n    const isLast = i === node.children.length - 1\n    const isInlineOrText =\n      Text.isText(child) || (Element.isElement(child) && editor.isInline(child))\n\n    // Only allow block nodes in the top-level children and parent blocks\n    // that only contain block nodes. Similarly, only allow inline nodes in\n    // other inline nodes, or parent blocks that only contain inlines and\n    // text.\n    if (isInlineOrText !== shouldHaveInlines) {\n      if (isInlineOrText) {\n        Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n      } else {\n        Transforms.unwrapNodes(editor, { at: path.concat(n), voids: true })\n      }\n      n--\n    } else if (Element.isElement(child)) {\n      // Ensure that inline nodes are surrounded by text nodes.\n      if (editor.isInline(child)) {\n        if (prev == null || !Text.isText(prev)) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n++\n        } else if (isLast) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n + 1),\n            voids: true,\n          })\n          n++\n        }\n      }\n    } else {\n      // If the child is not a text node, and doesn't have a `children` field,\n      // then we have an invalid node that will upset slate.\n      //\n      // eg: `{ type: 'some_node' }`.\n      //\n      // To prevent slate from breaking, we can add the `children` field,\n      // and now that it is valid, we can to many more operations easily,\n      // such as extend normalizers to fix erronous structure.\n      if (!Text.isText(child) && !('children' in child)) {\n        const elementChild = child as Element\n        elementChild.children = []\n      }\n\n      // Merge adjacent text nodes that are empty or match.\n      if (prev != null && Text.isText(prev)) {\n        if (Text.equals(child, prev, { loose: true })) {\n          Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (prev.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n - 1),\n            voids: true,\n          })\n          n--\n        } else if (child.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n--\n        }\n      }\n    }\n  }\n}\n","import { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\n\nexport const shouldNormalize: WithEditorFirstArg<Editor['shouldNormalize']> = (\n  editor,\n  { iteration, initialDirtyPathsLength }\n) => {\n  const maxIterations = initialDirtyPathsLength * 42 // HACK: better way?\n\n  if (iteration > maxIterations) {\n    throw new Error(\n      `Could not completely normalize the editor after ${maxIterations} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.`\n    )\n  }\n\n  return true\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\n\nexport const above: EditorInterface['above'] = (editor, options = {}) => {\n  const {\n    voids = false,\n    mode = 'lowest',\n    at = editor.selection,\n    match,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  const path = Editor.path(editor, at)\n  const reverse = mode === 'lowest'\n\n  for (const [n, p] of Editor.levels(editor, {\n    at: path,\n    voids,\n    match,\n    reverse,\n  })) {\n    if (Text.isText(n)) continue\n    if (Range.isRange(at)) {\n      if (\n        Path.isAncestor(p, at.anchor.path) &&\n        Path.isAncestor(p, at.focus.path)\n      ) {\n        return [n, p]\n      }\n    } else {\n      if (!Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  }\n}\n","import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const addMark: EditorInterface['addMark'] = (editor, key, value) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.setNodes(\n        editor,\n        { [key]: value },\n        {\n          match,\n          split: true,\n          voids: true,\n        }\n      )\n    } else {\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        [key]: value,\n      }\n\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const after: EditorInterface['after'] = (editor, at, options = {}) => {\n  const anchor = Editor.point(editor, at, { edge: 'end' })\n  const focus = Editor.end(editor, [])\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const before: EditorInterface['before'] = (editor, at, options = {}) => {\n  const anchor = Editor.start(editor, [])\n  const focus = Editor.point(editor, at, { edge: 'start' })\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n    reverse: true,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n","import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteBackward: WithEditorFirstArg<Editor['deleteBackward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit, reverse: true })\n  }\n}\n","import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteForward: WithEditorFirstArg<Editor['deleteForward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit })\n  }\n}\n","import { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const deleteFragment: EditorInterface['deleteFragment'] = (\n  editor,\n  { direction = 'forward' } = {}\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isExpanded(selection)) {\n    Transforms.delete(editor, { reverse: direction === 'backward' })\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const edges: EditorInterface['edges'] = (editor, at) => {\n  return [Editor.start(editor, at), Editor.end(editor, at)]\n}\n","import { Element } from '../interfaces/element'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const elementReadOnly: EditorInterface['elementReadOnly'] = (\n  editor,\n  options = {}\n) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isElementReadOnly(editor, n),\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const end: EditorInterface['end'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'end' })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const first: EditorInterface['first'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'start' })\n  return Editor.node(editor, path)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const fragment: EditorInterface['fragment'] = (editor, at) => {\n  const range = Editor.range(editor, at)\n  return Node.fragment(editor, range)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const getVoid: EditorInterface['void'] = (editor, options = {}) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isVoid(editor, n),\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const hasBlocks: EditorInterface['hasBlocks'] = (editor, element) => {\n  return element.children.some(\n    n => Element.isElement(n) && Editor.isBlock(editor, n)\n  )\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasInlines: EditorInterface['hasInlines'] = (editor, element) => {\n  return element.children.some(\n    n => Text.isText(n) || Editor.isInline(editor, n)\n  )\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const hasPath: EditorInterface['hasPath'] = (editor, path) => {\n  return Node.has(editor, path)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasTexts: EditorInterface['hasTexts'] = (editor, element) => {\n  return element.children.every(n => Text.isText(n))\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertBreak: EditorInterface['insertBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertNode: EditorInterface['insertNode'] = (\n  editor,\n  node,\n  options\n) => {\n  Transforms.insertNodes(editor, node, options)\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertSoftBreak: EditorInterface['insertSoftBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertText: EditorInterface['insertText'] = (\n  editor,\n  text,\n  options = {}\n) => {\n  const { selection, marks } = editor\n\n  if (selection) {\n    if (marks) {\n      const node = { text, ...marks }\n      Transforms.insertNodes(editor, node, {\n        at: options.at,\n        voids: options.voids,\n      })\n    } else {\n      Transforms.insertText(editor, text, options)\n    }\n\n    editor.marks = null\n  }\n}\n","import { EditorInterface } from '../interfaces/editor'\n\nexport const isBlock: EditorInterface['isBlock'] = (editor, value) => {\n  return !editor.isInline(value)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const isEdge: EditorInterface['isEdge'] = (editor, point, at) => {\n  return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const isEmpty: EditorInterface['isEmpty'] = (editor, element) => {\n  const { children } = element\n  const [first] = children\n  return (\n    children.length === 0 ||\n    (children.length === 1 &&\n      Text.isText(first) &&\n      first.text === '' &&\n      !editor.isVoid(element))\n  )\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isEnd: EditorInterface['isEnd'] = (editor, point, at) => {\n  const end = Editor.end(editor, at)\n  return Point.equals(point, end)\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const isNormalizing: EditorInterface['isNormalizing'] = editor => {\n  const isNormalizing = NORMALIZING.get(editor)\n  return isNormalizing === undefined ? true : isNormalizing\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isStart: EditorInterface['isStart'] = (editor, point, at) => {\n  // PERF: If the offset isn't `0` we know it's not the start.\n  if (point.offset !== 0) {\n    return false\n  }\n\n  const start = Editor.start(editor, at)\n  return Point.equals(point, start)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const last: EditorInterface['last'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'end' })\n  return Editor.node(editor, path)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const leaf: EditorInterface['leaf'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.leaf(editor, path)\n  return [node, path]\n}\n","import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorLevelsOptions } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport function* levels<T extends Node>(\n  editor: Editor,\n  options: EditorLevelsOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const { at = editor.selection, reverse = false, voids = false } = options\n  let { match } = options\n\n  if (match == null) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  const levels: NodeEntry<T>[] = []\n  const path = Editor.path(editor, at)\n\n  for (const [n, p] of Node.levels(editor, path)) {\n    if (!match(n, p)) {\n      continue\n    }\n\n    levels.push([n, p] as NodeEntry<T>)\n\n    if (!voids && Element.isElement(n) && Editor.isVoid(editor, n)) {\n      break\n    }\n  }\n\n  if (reverse) {\n    levels.reverse()\n  }\n\n  yield* levels\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { NodeEntry } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Point } from '../interfaces'\n\nexport const marks: EditorInterface['marks'] = (editor, options = {}) => {\n  const { marks, selection } = editor\n\n  if (!selection) {\n    return null\n  }\n  let { anchor, focus } = selection\n\n  if (marks) {\n    return marks\n  }\n\n  if (Range.isExpanded(selection)) {\n    const isBackward = Range.isBackward(selection)\n    if (isBackward) {\n      ;[focus, anchor] = [anchor, focus]\n    }\n    /**\n     * COMPAT: Make sure hanging ranges (caused by double clicking in Firefox)\n     * do not adversely affect the returned marks.\n     */\n    const isEnd = Editor.isEnd(editor, anchor, anchor.path)\n    if (isEnd) {\n      const after = Editor.after(editor, anchor as Point)\n      if (after) {\n        anchor = after\n      }\n    }\n\n    const [match] = Editor.nodes(editor, {\n      match: Text.isText,\n      at: {\n        anchor,\n        focus,\n      },\n    })\n\n    if (match) {\n      const [node] = match as NodeEntry<Text>\n      const { text, ...rest } = node\n      return rest\n    } else {\n      return {}\n    }\n  }\n\n  const { path } = anchor\n\n  let [node] = Editor.leaf(editor, path)\n\n  if (anchor.offset === 0) {\n    const prev = Editor.previous(editor, { at: path, match: Text.isText })\n    const markedVoid = Editor.above(editor, {\n      match: n =>\n        Element.isElement(n) &&\n        Editor.isVoid(editor, n) &&\n        editor.markableVoid(n),\n    })\n    if (!markedVoid) {\n      const block = Editor.above(editor, {\n        match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n  }\n\n  const { text, ...rest } = node\n  return rest\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const next: EditorInterface['next'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointAfterLocation = Editor.after(editor, at, { voids })\n\n  if (!pointAfterLocation) return\n\n  const [, to] = Editor.last(editor, [])\n\n  const span: Span = [pointAfterLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the next node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n  return next\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const node: EditorInterface['node'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.get(editor, path)\n  return [node, path]\n}\n","import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorNodesOptions } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\n\nexport function* nodes<T extends Node>(\n  editor: Editor,\n  options: EditorNodesOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const {\n    at = editor.selection,\n    mode = 'all',\n    universal = false,\n    reverse = false,\n    voids = false,\n    pass,\n    ignoreNonSelectable = false,\n  } = options\n  let { match } = options\n\n  if (!match) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  let from\n  let to\n\n  if (Span.isSpan(at)) {\n    from = at[0]\n    to = at[1]\n  } else {\n    const first = Editor.path(editor, at, { edge: 'start' })\n    const last = Editor.path(editor, at, { edge: 'end' })\n    from = reverse ? last : first\n    to = reverse ? first : last\n  }\n\n  const nodeEntries = Node.nodes(editor, {\n    reverse,\n    from,\n    to,\n    pass: ([node, path]) => {\n      if (pass && pass([node, path])) return true\n      if (!Element.isElement(node)) return false\n      if (\n        !voids &&\n        (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node))\n      )\n        return true\n      if (ignoreNonSelectable && !Editor.isSelectable(editor, node)) return true\n      return false\n    },\n  })\n\n  const matches: NodeEntry<T>[] = []\n  let hit: NodeEntry<T> | undefined\n\n  for (const [node, path] of nodeEntries) {\n    if (\n      ignoreNonSelectable &&\n      Element.isElement(node) &&\n      !Editor.isSelectable(editor, node)\n    ) {\n      continue\n    }\n\n    const isLower = hit && Path.compare(path, hit[1]) === 0\n\n    // In highest mode any node lower than the last hit is not a match.\n    if (mode === 'highest' && isLower) {\n      continue\n    }\n\n    if (!match(node, path)) {\n      // If we've arrived at a leaf text node that is not lower than the last\n      // hit, then we've found a branch that doesn't include a match, which\n      // means the match is not universal.\n      if (universal && !isLower && Text.isText(node)) {\n        return\n      } else {\n        continue\n      }\n    }\n\n    // If there's a match and it's lower than the last, update the hit.\n    if (mode === 'lowest' && isLower) {\n      hit = [node, path] as NodeEntry<T>\n      continue\n    }\n\n    // In lowest mode we emit the last hit, once it's guaranteed lowest.\n    const emit: NodeEntry<T> | undefined =\n      mode === 'lowest' ? hit : ([node, path] as NodeEntry<T>)\n\n    if (emit) {\n      if (universal) {\n        matches.push(emit)\n      } else {\n        yield emit\n      }\n    }\n\n    hit = [node, path] as NodeEntry<T>\n  }\n\n  // Since lowest is always emitting one behind, catch up at the end.\n  if (mode === 'lowest' && hit) {\n    if (universal) {\n      matches.push(hit)\n    } else {\n      yield hit\n    }\n  }\n\n  // Universal defers to ensure that the match occurs in every branch, so we\n  // yield all of the matches after iterating.\n  if (universal) {\n    yield* matches\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { DIRTY_PATH_KEYS, DIRTY_PATHS } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Element } from '../interfaces/element'\n\nexport const normalize: EditorInterface['normalize'] = (\n  editor,\n  options = {}\n) => {\n  const { force = false, operation } = options\n  const getDirtyPaths = (editor: Editor) => {\n    return DIRTY_PATHS.get(editor) || []\n  }\n\n  const getDirtyPathKeys = (editor: Editor) => {\n    return DIRTY_PATH_KEYS.get(editor) || new Set()\n  }\n\n  const popDirtyPath = (editor: Editor): Path => {\n    const path = getDirtyPaths(editor).pop()!\n    const key = path.join(',')\n    getDirtyPathKeys(editor).delete(key)\n    return path\n  }\n\n  if (!Editor.isNormalizing(editor)) {\n    return\n  }\n\n  if (force) {\n    const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n    const allPathKeys = new Set(allPaths.map(p => p.join(',')))\n    DIRTY_PATHS.set(editor, allPaths)\n    DIRTY_PATH_KEYS.set(editor, allPathKeys)\n  }\n\n  if (getDirtyPaths(editor).length === 0) {\n    return\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    /*\n      Fix dirty elements with no children.\n      editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\n      Running an initial pass avoids the catch-22 race condition.\n    */\n    for (const dirtyPath of getDirtyPaths(editor)) {\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        const [node, _] = entry\n\n        /*\n          The default normalizer inserts an empty text node in this scenario, but it can be customised.\n          So there is some risk here.\n\n          As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\n          by definition adding children to an empty node can't cause other paths to change.\n        */\n        if (Element.isElement(node) && node.children.length === 0) {\n          editor.normalizeNode(entry, { operation })\n        }\n      }\n    }\n\n    let dirtyPaths = getDirtyPaths(editor)\n    const initialDirtyPathsLength = dirtyPaths.length\n    let iteration = 0\n\n    while (dirtyPaths.length !== 0) {\n      if (\n        !editor.shouldNormalize({\n          dirtyPaths,\n          iteration,\n          initialDirtyPathsLength,\n          operation,\n        })\n      ) {\n        return\n      }\n\n      const dirtyPath = popDirtyPath(editor)\n\n      // If the node doesn't exist in the tree, it does not need to be normalized.\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        editor.normalizeNode(entry, { operation })\n      }\n      iteration++\n      dirtyPaths = getDirtyPaths(editor)\n    }\n  })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\n\nexport const parent: EditorInterface['parent'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const parentPath = Path.parent(path)\n  const entry = Editor.node(editor, parentPath)\n  return entry as NodeEntry<Ancestor>\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PathRef } from '../interfaces/path-ref'\n\nexport const pathRef: EditorInterface['pathRef'] = (\n  editor,\n  path,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PathRef = {\n    current: path,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pathRefs = Editor.pathRefs(editor)\n      pathRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pathRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { PATH_REFS } from '../utils/weak-maps'\n\nexport const pathRefs: EditorInterface['pathRefs'] = editor => {\n  let refs = PATH_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    PATH_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { EditorInterface, Node, Path, Point, Range } from '../interfaces'\n\nexport const path: EditorInterface['path'] = (editor, at, options = {}) => {\n  const { depth, edge } = options\n\n  if (Path.isPath(at)) {\n    if (edge === 'start') {\n      const [, firstPath] = Node.first(editor, at)\n      at = firstPath\n    } else if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      at = lastPath\n    }\n  }\n\n  if (Range.isRange(at)) {\n    if (edge === 'start') {\n      at = Range.start(at)\n    } else if (edge === 'end') {\n      at = Range.end(at)\n    } else {\n      at = Path.common(at.anchor.path, at.focus.path)\n    }\n  }\n\n  if (Point.isPoint(at)) {\n    at = at.path\n  }\n\n  if (depth != null) {\n    at = at.slice(0, depth)\n  }\n\n  return at\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PointRef } from '../interfaces/point-ref'\n\nexport const pointRef: EditorInterface['pointRef'] = (\n  editor,\n  point,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PointRef = {\n    current: point,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pointRefs = Editor.pointRefs(editor)\n      pointRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pointRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { POINT_REFS } from '../utils/weak-maps'\n\nexport const pointRefs: EditorInterface['pointRefs'] = editor => {\n  let refs = POINT_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    POINT_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\n\nexport const point: EditorInterface['point'] = (editor, at, options = {}) => {\n  const { edge = 'start' } = options\n\n  if (Path.isPath(at)) {\n    let path\n\n    if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      path = lastPath\n    } else {\n      const [, firstPath] = Node.first(editor, at)\n      path = firstPath\n    }\n\n    const node = Node.get(editor, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n      )\n    }\n\n    return { path, offset: edge === 'end' ? node.text.length : 0 }\n  }\n\n  if (Range.isRange(at)) {\n    const [start, end] = Range.edges(at)\n    return edge === 'start' ? start : end\n  }\n\n  return at\n}\n","import { Editor, EditorPositionsOptions } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\nimport { Range } from '../interfaces/range'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport {\n  getCharacterDistance,\n  getWordDistance,\n  splitByCharacterDistance,\n} from '../utils/string'\n\nexport function* positions(\n  editor: Editor,\n  options: EditorPositionsOptions = {}\n): Generator<Point, void, undefined> {\n  const {\n    at = editor.selection,\n    unit = 'offset',\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  /**\n   * Algorithm notes:\n   *\n   * Each step `distance` is dynamic depending on the underlying text\n   * and the `unit` specified.  Each step, e.g., a line or word, may\n   * span multiple text nodes, so we iterate through the text both on\n   * two levels in step-sync:\n   *\n   * `leafText` stores the text on a text leaf level, and is advanced\n   * through using the counters `leafTextOffset` and `leafTextRemaining`.\n   *\n   * `blockText` stores the text on a block level, and is shortened\n   * by `distance` every time it is advanced.\n   *\n   * We only maintain a window of one blockText and one leafText because\n   * a block node always appears before all of its leaf nodes.\n   */\n\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  const first = reverse ? end : start\n  let isNewBlock = false\n  let blockText = ''\n  let distance = 0 // Distance for leafText to catch up to blockText.\n  let leafTextRemaining = 0\n  let leafTextOffset = 0\n\n  // Iterate through all nodes in range, grabbing entire textual content\n  // of block nodes in blockText, and text nodes in leafText.\n  // Exploits the fact that nodes are sequenced in such a way that we first\n  // encounter the block node, then all of its text nodes, so when iterating\n  // through the blockText and leafText we just need to remember a window of\n  // one block node and leaf node, respectively.\n  for (const [node, path] of Editor.nodes(editor, {\n    at,\n    reverse,\n    voids,\n    ignoreNonSelectable,\n  })) {\n    /*\n     * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n     */\n    if (Element.isElement(node)) {\n      // Void nodes are a special case, so by default we will always\n      // yield their first point. If the `voids` option is set to true,\n      // then we will iterate over their content.\n      if (!voids && (editor.isVoid(node) || editor.isElementReadOnly(node))) {\n        yield Editor.start(editor, path)\n        continue\n      }\n\n      // Inline element nodes are ignored as they don't themselves\n      // contribute to `blockText` or `leafText` - their parent and\n      // children do.\n      if (editor.isInline(node)) continue\n\n      // Block element node - set `blockText` to its text content.\n      if (Editor.hasInlines(editor, node)) {\n        // We always exhaust block nodes before encountering a new one:\n        //   console.assert(blockText === '',\n        //     `blockText='${blockText}' - `+\n        //     `not exhausted before new block node`, path)\n\n        // Ensure range considered is capped to `range`, in the\n        // start/end edge cases where block extends beyond range.\n        // Equivalent to this, but presumably more performant:\n        //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n        //   blockRange = Range.intersection(range, blockRange) // intersect\n        //   blockText = Editor.string(editor, blockRange, { voids })\n        const e = Path.isAncestor(path, end.path)\n          ? end\n          : Editor.end(editor, path)\n        const s = Path.isAncestor(path, start.path)\n          ? start\n          : Editor.start(editor, path)\n\n        blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n        isNewBlock = true\n      }\n    }\n\n    /*\n     * TEXT LEAF NODE - Iterate through text content, yielding\n     * positions every `distance` offset according to `unit`.\n     */\n    if (Text.isText(node)) {\n      const isFirst = Path.equals(path, first.path)\n\n      // Proof that we always exhaust text nodes before encountering a new one:\n      //   console.assert(leafTextRemaining <= 0,\n      //     `leafTextRemaining=${leafTextRemaining} - `+\n      //     `not exhausted before new leaf text node`, path)\n\n      // Reset `leafText` counters for new text node.\n      if (isFirst) {\n        leafTextRemaining = reverse\n          ? first.offset\n          : node.text.length - first.offset\n        leafTextOffset = first.offset // Works for reverse too.\n      } else {\n        leafTextRemaining = node.text.length\n        leafTextOffset = reverse ? leafTextRemaining : 0\n      }\n\n      // Yield position at the start of node (potentially).\n      if (isFirst || isNewBlock || unit === 'offset') {\n        yield { path, offset: leafTextOffset }\n        isNewBlock = false\n      }\n\n      // Yield positions every (dynamically calculated) `distance` offset.\n      while (true) {\n        // If `leafText` has caught up with `blockText` (distance=0),\n        // and if blockText is exhausted, break to get another block node,\n        // otherwise advance blockText forward by the new `distance`.\n        if (distance === 0) {\n          if (blockText === '') break\n          distance = calcDistance(blockText, unit, reverse)\n          // Split the string at the previously found distance and use the\n          // remaining string for the next iteration.\n          blockText = splitByCharacterDistance(blockText, distance, reverse)[1]\n        }\n\n        // Advance `leafText` by the current `distance`.\n        leafTextOffset = reverse\n          ? leafTextOffset - distance\n          : leafTextOffset + distance\n        leafTextRemaining = leafTextRemaining - distance\n\n        // If `leafText` is exhausted, break to get a new leaf node\n        // and set distance to the overflow amount, so we'll (maybe)\n        // catch up to blockText in the next leaf text node.\n        if (leafTextRemaining < 0) {\n          distance = -leafTextRemaining\n          break\n        }\n\n        // Successfully walked `distance` offsets through `leafText`\n        // to catch up with `blockText`, so we can reset `distance`\n        // and yield this position in this node.\n        distance = 0\n        yield { path, offset: leafTextOffset }\n      }\n    }\n  }\n  // Proof that upon completion, we've exahusted both leaf and block text:\n  //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n  //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n  // Helper:\n  // Return the distance in offsets for a step of size `unit` on given string.\n  function calcDistance(text: string, unit: string, reverse?: boolean) {\n    if (unit === 'character') {\n      return getCharacterDistance(text, reverse)\n    } else if (unit === 'word') {\n      return getWordDistance(text, reverse)\n    } else if (unit === 'line' || unit === 'block') {\n      return text.length\n    }\n    return 1\n  }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const previous: EditorInterface['previous'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n  if (!pointBeforeLocation) {\n    return\n  }\n\n  const [, to] = Editor.first(editor, [])\n\n  // The search location is from the start of the document to the path of\n  // the point before the location passed in\n  const span: Span = [pointBeforeLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the previous node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [previous] = Editor.nodes(editor, {\n    reverse: true,\n    at: span,\n    match,\n    mode,\n    voids,\n  })\n\n  return previous\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { RangeRef } from '../interfaces/range-ref'\n\nexport const rangeRef: EditorInterface['rangeRef'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: RangeRef = {\n    current: range,\n    affinity,\n    unref() {\n      const { current } = ref\n      const rangeRefs = Editor.rangeRefs(editor)\n      rangeRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.rangeRefs(editor)\n  refs.add(ref)\n  return ref\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { RANGE_REFS } from '../utils/weak-maps'\n\nexport const rangeRefs: EditorInterface['rangeRefs'] = editor => {\n  let refs = RANGE_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    RANGE_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\n\nexport const range: EditorInterface['range'] = (editor, at, to) => {\n  if (Range.isRange(at) && !to) {\n    return at\n  }\n\n  const start = Editor.start(editor, at)\n  const end = Editor.end(editor, to || at)\n  return { anchor: start, focus: end }\n}\n","import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const removeMark: EditorInterface['removeMark'] = (editor, key) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.unsetNodes(editor, key, {\n        match,\n        split: true,\n        voids: true,\n      })\n    } else {\n      const marks = { ...(Editor.marks(editor) || {}) }\n      delete marks[<keyof Node>key]\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n","import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const setNormalizing: EditorInterface['setNormalizing'] = (\n  editor,\n  isNormalizing\n) => {\n  NORMALIZING.set(editor, isNormalizing)\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const start: EditorInterface['start'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'start' })\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Text } from '../interfaces/text'\nimport { Path } from '../interfaces/path'\n\nexport const string: EditorInterface['string'] = (editor, at, options = {}) => {\n  const { voids = false } = options\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  let text = ''\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: range,\n    match: Text.isText,\n    voids,\n  })) {\n    let t = node.text\n\n    if (Path.equals(path, end.path)) {\n      t = t.slice(0, end.offset)\n    }\n\n    if (Path.equals(path, start.path)) {\n      t = t.slice(start.offset)\n    }\n\n    text += t\n  }\n\n  return text\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\n\nexport const unhangRange: EditorInterface['unhangRange'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { voids = false } = options\n  let [start, end] = Range.edges(range)\n\n  // PERF: exit early if we can guarantee that the range isn't hanging.\n  if (\n    start.offset !== 0 ||\n    end.offset !== 0 ||\n    Range.isCollapsed(range) ||\n    Path.hasPrevious(end.path)\n  ) {\n    return range\n  }\n\n  const endBlock = Editor.above(editor, {\n    at: end,\n    match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n    voids,\n  })\n  const blockPath = endBlock ? endBlock[1] : []\n  const first = Editor.start(editor, start)\n  const before = { anchor: first, focus: end }\n  let skip = true\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: before,\n    match: Text.isText,\n    reverse: true,\n    voids,\n  })) {\n    if (skip) {\n      skip = false\n      continue\n    }\n\n    if (node.text !== '' || Path.isBefore(path, blockPath)) {\n      end = { path, offset: node.text.length }\n      break\n    }\n  }\n\n  return { anchor: start, focus: end }\n}\n","import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const withoutNormalizing: EditorInterface['withoutNormalizing'] = (\n  editor,\n  fn\n) => {\n  const value = Editor.isNormalizing(editor)\n  Editor.setNormalizing(editor, false)\n  try {\n    fn()\n  } finally {\n    Editor.setNormalizing(editor, value)\n  }\n  Editor.normalize(editor)\n}\n","import { EditorInterface, Element, Editor, Text } from '../interfaces'\n\nexport const shouldMergeNodesRemovePrevNode: EditorInterface['shouldMergeNodesRemovePrevNode'] =\n  (editor, [prevNode, prevPath], [curNode, curNodePath]) => {\n    // If the target node that we're merging with is empty, remove it instead\n    // of merging the two. This is a common rich text editor behavior to\n    // prevent losing formatting when deleting entire nodes when you have a\n    // hanging selection.\n    // if prevNode is first child in parent,don't remove it.\n\n    return (\n      (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n      (Text.isText(prevNode) &&\n        prevNode.text === '' &&\n        prevPath[prevPath.length - 1] !== 0)\n    )\n  }\n","import { TextTransforms } from '../interfaces/transforms/text'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { Element } from '../interfaces/element'\nimport { NodeEntry } from '../interfaces/node'\n\nexport const deleteText: TextTransforms['delete'] = (editor, options = {}) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      reverse = false,\n      unit = 'character',\n      distance = 1,\n      voids = false,\n    } = options\n    let { at = editor.selection, hanging = false } = options\n\n    if (!at) {\n      return\n    }\n\n    let isCollapsed = false\n    if (Range.isRange(at) && Range.isCollapsed(at)) {\n      isCollapsed = true\n      at = at.anchor\n    }\n\n    if (Point.isPoint(at)) {\n      const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n      if (!voids && furthestVoid) {\n        const [, voidPath] = furthestVoid\n        at = voidPath\n      } else {\n        const opts = { unit, distance }\n        const target = reverse\n          ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n          : Editor.after(editor, at, opts) || Editor.end(editor, [])\n        at = { anchor: at, focus: target }\n        hanging = true\n      }\n    }\n\n    if (Path.isPath(at)) {\n      Transforms.removeNodes(editor, { at, voids })\n      return\n    }\n\n    if (Range.isCollapsed(at)) {\n      return\n    }\n\n    if (!hanging) {\n      const [, end] = Range.edges(at)\n      const endOfDoc = Editor.end(editor, [])\n\n      if (!Point.equals(end, endOfDoc)) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n    }\n\n    let [start, end] = Range.edges(at)\n    const startBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: start,\n      voids,\n    })\n    const endBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: end,\n      voids,\n    })\n    const isAcrossBlocks =\n      startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n    const isSingleText = Path.equals(start.path, end.path)\n    const startNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: start, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: start, mode: 'highest' })\n    const endNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: end, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: end, mode: 'highest' })\n\n    // If the start or end points are inside an inline void, nudge them out.\n    if (startNonEditable) {\n      const before = Editor.before(editor, start)\n\n      if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n        start = before\n      }\n    }\n\n    if (endNonEditable) {\n      const after = Editor.after(editor, end)\n\n      if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n        end = after\n      }\n    }\n\n    // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n    const matches: NodeEntry[] = []\n    let lastPath: Path | undefined\n\n    for (const entry of Editor.nodes(editor, { at, voids })) {\n      const [node, path] = entry\n\n      if (lastPath && Path.compare(path, lastPath) === 0) {\n        continue\n      }\n\n      if (\n        (!voids &&\n          Element.isElement(node) &&\n          (Editor.isVoid(editor, node) ||\n            Editor.isElementReadOnly(editor, node))) ||\n        (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n      ) {\n        matches.push(entry)\n        lastPath = path\n      }\n    }\n\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n    const startRef = Editor.pointRef(editor, start)\n    const endRef = Editor.pointRef(editor, end)\n\n    let removedText = ''\n\n    if (!isSingleText && !startNonEditable) {\n      const point = startRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const { offset } = start\n      const text = node.text.slice(offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    pathRefs\n      .reverse()\n      .map(r => r.unref())\n      .filter((r): r is Path => r !== null)\n      .forEach(p => Transforms.removeNodes(editor, { at: p, voids }))\n\n    if (!endNonEditable) {\n      const point = endRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const offset = isSingleText ? start.offset : 0\n      const text = node.text.slice(offset, end.offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      Transforms.mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids,\n      })\n    }\n\n    // For Thai script, deleting N character(s) backward should delete\n    // N code point(s) instead of an entire grapheme cluster.\n    // Therefore, the remaining code points should be inserted back.\n    if (\n      isCollapsed &&\n      reverse &&\n      unit === 'character' &&\n      removedText.length > 1 &&\n      removedText.match(/[\\u0E00-\\u0E7F]+/)\n    ) {\n      Transforms.insertText(\n        editor,\n        removedText.slice(0, removedText.length - distance)\n      )\n    }\n\n    const startUnref = startRef.unref()\n    const endUnref = endRef.unref()\n    const point = reverse ? startUnref || endUnref : endUnref || startUnref\n\n    if (options.at == null && point) {\n      Transforms.select(editor, point)\n    }\n  })\n}\n","import { Transforms } from '../interfaces/transforms'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Node, NodeEntry } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { TextTransforms } from '../interfaces/transforms/text'\nimport { getDefaultInsertLocation } from '../utils'\n\nexport const insertFragment: TextTransforms['insertFragment'] = (\n  editor,\n  fragment,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false } = options\n    let { at = getDefaultInsertLocation(editor), batchDirty = true } = options\n\n    if (!fragment.length) {\n      return\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n\n        if (!voids && Editor.void(editor, { at: end })) {\n          return\n        }\n\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    } else if (Path.isPath(at)) {\n      at = Editor.start(editor, at)\n    }\n\n    if (!voids && Editor.void(editor, { at })) {\n      return\n    }\n\n    // If the insert point is at the edge of an inline node, move it outside\n    // instead since it will need to be split otherwise.\n    const inlineElementMatch = Editor.above(editor, {\n      at,\n      match: n => Element.isElement(n) && Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })\n\n    if (inlineElementMatch) {\n      const [, inlinePath] = inlineElementMatch\n\n      if (Editor.isEnd(editor, at, inlinePath)) {\n        const after = Editor.after(editor, inlinePath)!\n        at = after\n      } else if (Editor.isStart(editor, at, inlinePath)) {\n        const before = Editor.before(editor, inlinePath)!\n        at = before\n      }\n    }\n\n    const blockMatch = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at,\n      voids,\n    })!\n    const [, blockPath] = blockMatch\n    const isBlockStart = Editor.isStart(editor, at, blockPath)\n    const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n    const isBlockEmpty = isBlockStart && isBlockEnd\n    const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n    const mergeEnd = !isBlockEnd\n    const [, firstPath] = Node.first({ children: fragment }, [])\n    const [, lastPath] = Node.last({ children: fragment }, [])\n\n    const matches: NodeEntry[] = []\n    const matcher = ([n, p]: NodeEntry) => {\n      const isRoot = p.length === 0\n      if (isRoot) {\n        return false\n      }\n\n      if (isBlockEmpty) {\n        return true\n      }\n\n      if (\n        mergeStart &&\n        Path.isAncestor(p, firstPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      if (\n        mergeEnd &&\n        Path.isAncestor(p, lastPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      return true\n    }\n\n    for (const entry of Node.nodes({ children: fragment }, { pass: matcher })) {\n      if (matcher(entry)) {\n        matches.push(entry)\n      }\n    }\n\n    const starts = []\n    const middles = []\n    const ends = []\n    let starting = true\n    let hasBlocks = false\n\n    for (const [node] of matches) {\n      if (Element.isElement(node) && !editor.isInline(node)) {\n        starting = false\n        hasBlocks = true\n        middles.push(node)\n      } else if (starting) {\n        starts.push(node)\n      } else {\n        ends.push(node)\n      }\n    }\n\n    const [inlineMatch] = Editor.nodes(editor, {\n      at,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })!\n\n    const [, inlinePath] = inlineMatch\n    const isInlineStart = Editor.isStart(editor, at, inlinePath)\n    const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n    const middleRef = Editor.pathRef(\n      editor,\n      isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath\n    )\n\n    const endRef = Editor.pathRef(\n      editor,\n      isInlineEnd ? Path.next(inlinePath) : inlinePath\n    )\n\n    Transforms.splitNodes(editor, {\n      at,\n      match: n =>\n        hasBlocks\n          ? Element.isElement(n) && Editor.isBlock(editor, n)\n          : Text.isText(n) || Editor.isInline(editor, n),\n      mode: hasBlocks ? 'lowest' : 'highest',\n      always:\n        hasBlocks &&\n        (!isBlockStart || starts.length > 0) &&\n        (!isBlockEnd || ends.length > 0),\n      voids,\n    })\n\n    const startRef = Editor.pathRef(\n      editor,\n      !isInlineStart || (isInlineStart && isInlineEnd)\n        ? Path.next(inlinePath)\n        : inlinePath\n    )\n\n    Transforms.insertNodes(editor, starts, {\n      at: startRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n      batchDirty,\n    })\n\n    if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n      Transforms.delete(editor, { at: blockPath, voids })\n    }\n\n    Transforms.insertNodes(editor, middles, {\n      at: middleRef.current!,\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      mode: 'lowest',\n      voids,\n      batchDirty,\n    })\n\n    Transforms.insertNodes(editor, ends, {\n      at: endRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n      batchDirty,\n    })\n\n    if (!options.at) {\n      let path\n\n      if (ends.length > 0 && endRef.current) {\n        path = Path.previous(endRef.current)\n      } else if (middles.length > 0 && middleRef.current) {\n        path = Path.previous(middleRef.current)\n      } else if (startRef.current) {\n        path = Path.previous(startRef.current)\n      }\n\n      if (path) {\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n    }\n\n    startRef.unref()\n    middleRef.unref()\n    endRef.unref()\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\n\nexport const collapse: SelectionTransforms['collapse'] = (\n  editor,\n  options = {}\n) => {\n  const { edge = 'anchor' } = options\n  const { selection } = editor\n\n  if (!selection) {\n    return\n  } else if (edge === 'anchor') {\n    Transforms.select(editor, selection.anchor)\n  } else if (edge === 'focus') {\n    Transforms.select(editor, selection.focus)\n  } else if (edge === 'start') {\n    const [start] = Range.edges(selection)\n    Transforms.select(editor, start)\n  } else if (edge === 'end') {\n    const [, end] = Range.edges(selection)\n    Transforms.select(editor, end)\n  }\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\n\nexport const deselect: SelectionTransforms['deselect'] = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: null,\n    })\n  }\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const move: SelectionTransforms['move'] = (editor, options = {}) => {\n  const { selection } = editor\n  const { distance = 1, unit = 'character', reverse = false } = options\n  let { edge = null } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const opts = { distance, unit, ignoreNonSelectable: true }\n  const props: Partial<Range> = {}\n\n  if (edge == null || edge === 'anchor') {\n    const point = reverse\n      ? Editor.before(editor, anchor, opts)\n      : Editor.after(editor, anchor, opts)\n\n    if (point) {\n      props.anchor = point\n    }\n  }\n\n  if (edge == null || edge === 'focus') {\n    const point = reverse\n      ? Editor.before(editor, focus, opts)\n      : Editor.after(editor, focus, opts)\n\n    if (point) {\n      props.focus = point\n    }\n  }\n\n  Transforms.setSelection(editor, props)\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { Scrubber } from '../interfaces/scrubber'\n\nexport const select: SelectionTransforms['select'] = (editor, target) => {\n  const { selection } = editor\n  target = Editor.range(editor, target)\n\n  if (selection) {\n    Transforms.setSelection(editor, target)\n    return\n  }\n\n  if (!Range.isRange(target)) {\n    throw new Error(\n      `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${Scrubber.stringify(\n        target\n      )}`\n    )\n  }\n\n  editor.apply({\n    type: 'set_selection',\n    properties: selection,\n    newProperties: target,\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const setPoint: SelectionTransforms['setPoint'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  const { selection } = editor\n  let { edge = 'both' } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const point = edge === 'anchor' ? anchor : focus\n\n  Transforms.setSelection(editor, {\n    [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n  })\n}\n","import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\n\nexport const setSelection: SelectionTransforms['setSelection'] = (\n  editor,\n  props\n) => {\n  const { selection } = editor\n  const oldProps: Partial<Range> | null = {}\n  const newProps: Partial<Range> = {}\n\n  if (!selection) {\n    return\n  }\n\n  for (const k in props) {\n    if (\n      (k === 'anchor' &&\n        props.anchor != null &&\n        !Point.equals(props.anchor, selection.anchor)) ||\n      (k === 'focus' &&\n        props.focus != null &&\n        !Point.equals(props.focus, selection.focus)) ||\n      (k !== 'anchor' &&\n        k !== 'focus' &&\n        props[<keyof Range>k] !== selection[<keyof Range>k])\n    ) {\n      oldProps[<keyof Range>k] = selection[<keyof Range>k]\n      newProps[<keyof Range>k] = props[<keyof Range>k]\n    }\n  }\n\n  if (Object.keys(oldProps).length > 0) {\n    editor.apply({\n      type: 'set_selection',\n      properties: oldProps,\n      newProperties: newProps,\n    })\n  }\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Point } from '../interfaces/point'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { getDefaultInsertLocation } from '../utils'\nimport { batchDirtyPaths } from '../core/batch-dirty-paths'\nimport { BaseInsertNodeOperation } from '../interfaces'\nimport { updateDirtyPaths } from '../core/update-dirty-paths'\n\nexport const insertNodes: NodeTransforms['insertNodes'] = (\n  editor,\n  nodes,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      hanging = false,\n      voids = false,\n      mode = 'lowest',\n      batchDirty = true,\n    } = options\n    let { at, match, select } = options\n\n    if (Node.isNode(nodes)) {\n      nodes = [nodes]\n    }\n\n    if (nodes.length === 0) {\n      return\n    }\n\n    const [node] = nodes\n\n    if (!at) {\n      at = getDefaultInsertLocation(editor)\n      if (select !== false) {\n        select = true\n      }\n    }\n\n    if (select == null) {\n      select = false\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      if (match == null) {\n        if (Text.isText(node)) {\n          match = n => Text.isText(n)\n        } else if (editor.isInline(node)) {\n          match = n => Text.isText(n) || Editor.isInline(editor, n)\n        } else {\n          match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n        }\n      }\n\n      const [entry] = Editor.nodes(editor, {\n        at: at.path,\n        match,\n        mode,\n        voids,\n      })\n\n      if (entry) {\n        const [, matchPath] = entry\n        const pathRef = Editor.pathRef(editor, matchPath)\n        const isAtEnd = Editor.isEnd(editor, at, matchPath)\n        Transforms.splitNodes(editor, { at, match, mode, voids })\n        const path = pathRef.unref()!\n        at = isAtEnd ? Path.next(path) : path\n      } else {\n        return\n      }\n    }\n\n    const parentPath = Path.parent(at)\n    let index = at[at.length - 1]\n\n    if (!voids && Editor.void(editor, { at: parentPath })) {\n      return\n    }\n\n    if (batchDirty) {\n      // PERF: batch update dirty paths\n      // batched ops used to transform existing dirty paths\n      const batchedOps: BaseInsertNodeOperation[] = []\n      const newDirtyPaths: Path[] = Path.levels(parentPath)\n      batchDirtyPaths(\n        editor,\n        () => {\n          for (const node of nodes as Node[]) {\n            const path = parentPath.concat(index)\n            index++\n\n            const op: BaseInsertNodeOperation = {\n              type: 'insert_node',\n              path,\n              node,\n            }\n            editor.apply(op)\n            at = Path.next(at as Path)\n\n            batchedOps.push(op)\n            if (Text.isText(node)) {\n              newDirtyPaths.push(path)\n            } else {\n              newDirtyPaths.push(\n                ...Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n              )\n            }\n          }\n        },\n        () => {\n          updateDirtyPaths(editor, newDirtyPaths, p => {\n            let newPath: Path | null = p\n            for (const op of batchedOps) {\n              if (Path.operationCanTransformPath(op)) {\n                newPath = Path.transform(newPath, op)\n                if (!newPath) {\n                  return null\n                }\n              }\n            }\n            return newPath\n          })\n        }\n      )\n    } else {\n      for (const node of nodes as Node[]) {\n        const path = parentPath.concat(index)\n        index++\n\n        editor.apply({ type: 'insert_node', path, node })\n        at = Path.next(at as Path)\n      }\n    }\n\n    at = Path.previous(at)\n\n    if (select) {\n      const point = Editor.end(editor, at)\n\n      if (point) {\n        Transforms.select(editor, point)\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const liftNodes: NodeTransforms['liftNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { at = editor.selection, mode = 'lowest', voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!at) {\n      return\n    }\n\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path.length < 2) {\n        throw new Error(\n          `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n        )\n      }\n\n      const parentNodeEntry = Editor.node(editor, Path.parent(path))\n      const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n      const index = path[path.length - 1]\n      const { length } = parent.children\n\n      if (length === 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        Transforms.removeNodes(editor, { at: parentPath, voids })\n      } else if (index === 0) {\n        Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n      } else if (index === length - 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      } else {\n        const splitPath = Path.next(path)\n        const toPath = Path.next(parentPath)\n        Transforms.splitNodes(editor, { at: splitPath, voids })\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Text } from '../interfaces/text'\nimport { Scrubber } from '../interfaces/scrubber'\nimport { Node } from '../interfaces/node'\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\nexport const mergeNodes: NodeTransforms['mergeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection } = options\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (Range.isRange(at)) {\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n    }\n\n    const [current] = Editor.nodes(editor, { at, match, voids, mode })\n    const prev = Editor.previous(editor, { at, match, voids, mode })\n\n    if (!current || !prev) {\n      return\n    }\n\n    const [node, path] = current\n    const [prevNode, prevPath] = prev\n\n    if (path.length === 0 || prevPath.length === 0) {\n      return\n    }\n\n    const newPath = Path.next(prevPath)\n    const commonPath = Path.common(path, prevPath)\n    const isPreviousSibling = Path.isSibling(path, prevPath)\n    const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n      .slice(commonPath.length)\n      .slice(0, -1)\n\n    // Determine if the merge will leave an ancestor of the path empty as a\n    // result, in which case we'll want to remove it after merging.\n    const emptyAncestor = Editor.above(editor, {\n      at: path,\n      mode: 'highest',\n      match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n    })\n\n    const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n    let properties\n    let position\n\n    // Ensure that the nodes are equivalent, and figure out what the position\n    // and extra properties of the merge will be.\n    if (Text.isText(node) && Text.isText(prevNode)) {\n      const { text, ...rest } = node\n      position = prevNode.text.length\n      properties = rest as Partial<Text>\n    } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n      const { children, ...rest } = node\n      position = prevNode.children.length\n      properties = rest as Partial<Element>\n    } else {\n      throw new Error(\n        `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${Scrubber.stringify(\n          node\n        )} ${Scrubber.stringify(prevNode)}`\n      )\n    }\n\n    // If the node isn't already the next sibling of the previous node, move\n    // it so that it is before merging.\n    if (!isPreviousSibling) {\n      Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n    }\n\n    // If there was going to be an empty ancestor of the node that was merged,\n    // we remove it from the tree.\n    if (emptyRef) {\n      Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n    }\n\n    if (Editor.shouldMergeNodesRemovePrevNode(editor, prev, current)) {\n      Transforms.removeNodes(editor, { at: prevPath, voids })\n    } else {\n      editor.apply({\n        type: 'merge_node',\n        path: newPath,\n        position,\n        properties,\n      })\n    }\n\n    if (emptyRef) {\n      emptyRef.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\n\nexport const moveNodes: NodeTransforms['moveNodes'] = (editor, options) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      to,\n      at = editor.selection,\n      mode = 'lowest',\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    const toRef = Editor.pathRef(editor, to)\n    const targets = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const newPath = toRef.current!\n\n      if (path.length !== 0) {\n        editor.apply({ type: 'move_node', path, newPath })\n      }\n\n      if (\n        toRef.current &&\n        Path.isSibling(newPath, path) &&\n        Path.isAfter(newPath, path)\n      ) {\n        // When performing a sibling move to a later index, the path at the destination is shifted\n        // to before the insertion point instead of after. To ensure our group of nodes are inserted\n        // in the correct order we increment toRef to account for that\n        toRef.current = Path.next(toRef.current)\n      }\n    }\n\n    toRef.unref()\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\n\nexport const removeNodes: NodeTransforms['removeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    const depths = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path) {\n        const [node] = Editor.node(editor, path)\n        editor.apply({ type: 'remove_node', path, node })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\n\nexport const setNodes: NodeTransforms['setNodes'] = (\n  editor,\n  props: Partial<Node>,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection, compare, merge } = options\n    const {\n      hanging = false,\n      mode = 'lowest',\n      split = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (split && Range.isRange(at)) {\n      if (\n        Range.isCollapsed(at) &&\n        Editor.leaf(editor, at.anchor)[0].text.length > 0\n      ) {\n        // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n        // set that won't get normalized away\n        return\n      }\n      const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n      const [start, end] = Range.edges(at)\n      const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n      const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n      Transforms.splitNodes(editor, {\n        at: end,\n        match,\n        mode: splitMode,\n        voids,\n        always: !endAtEndOfNode,\n      })\n      const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n      Transforms.splitNodes(editor, {\n        at: start,\n        match,\n        mode: splitMode,\n        voids,\n        always: !startAtStartOfNode,\n      })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    if (!compare) {\n      compare = (prop, nodeProp) => prop !== nodeProp\n    }\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids,\n    })) {\n      const properties: Partial<Node> = {}\n      // FIXME: is this correct?\n      const newProperties: Partial<Node> & { [key: string]: unknown } = {}\n\n      // You can't set properties on the editor node.\n      if (path.length === 0) {\n        continue\n      }\n\n      let hasChanges = false\n\n      for (const k in props) {\n        if (k === 'children' || k === 'text') {\n          continue\n        }\n\n        if (compare(props[<keyof Node>k], node[<keyof Node>k])) {\n          hasChanges = true\n          // Omit new properties from the old properties list\n          if (node.hasOwnProperty(k))\n            properties[<keyof Node>k] = node[<keyof Node>k]\n          // Omit properties that have been removed from the new properties list\n          if (merge) {\n            if (props[<keyof Node>k] != null)\n              newProperties[<keyof Node>k] = merge(\n                node[<keyof Node>k],\n                props[<keyof Node>k]\n              )\n          } else {\n            if (props[<keyof Node>k] != null)\n              newProperties[<keyof Node>k] = props[<keyof Node>k]\n          }\n        }\n      }\n\n      if (hasChanges) {\n        editor.apply({\n          type: 'set_node',\n          path,\n          properties,\n          newProperties,\n        })\n      }\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { PointRef } from '../interfaces/point-ref'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\nimport { Point } from '../interfaces/point'\n\n/**\n * Convert a range into a point by deleting it's content.\n */\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nexport const splitNodes: NodeTransforms['splitNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection, height = 0, always = false } = options\n\n    if (match == null) {\n      match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Range.isRange(at)) {\n      at = deleteRange(editor, at)\n    }\n\n    // If the target is a path, the default height-skipping and position\n    // counters need to account for us potentially splitting at a non-leaf.\n    if (Path.isPath(at)) {\n      const path = at\n      const point = Editor.point(editor, path)\n      const [parent] = Editor.parent(editor, path)\n      match = n => n === parent\n      height = point.path.length - path.length + 1\n      at = point\n      always = true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const beforeRef = Editor.pointRef(editor, at, {\n      affinity: 'backward',\n    })\n    let afterRef: PointRef | undefined\n    try {\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Element.isElement(node) && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n    } finally {\n      beforeRef.unref()\n      afterRef?.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unsetNodes: NodeTransforms['unsetNodes'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  if (!Array.isArray(props)) {\n    props = [props]\n  }\n\n  const obj: any = {}\n\n  for (const key of props) {\n    obj[key] = null\n  }\n\n  Transforms.setNodes(editor, obj, options)\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unwrapNodes: NodeTransforms['unwrapNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Path.isPath(at)) {\n      at = Editor.range(editor, at)\n    }\n\n    const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(\n      matches,\n      ([, p]) => Editor.pathRef(editor, p)\n      // unwrapNode will call liftNode which does not support splitting the node when nested.\n      // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n      // that wrap target node. So we reverse the order.\n    ).reverse()\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const [node] = Editor.node(editor, path)\n      let range = Editor.range(editor, path)\n\n      if (split && rangeRef) {\n        range = Range.intersection(rangeRef.current!, range)!\n      }\n\n      Transforms.liftNodes(editor, {\n        at: range,\n        match: n => Element.isAncestor(node) && node.children.includes(n),\n        voids,\n      })\n    }\n\n    if (rangeRef) {\n      rangeRef.unref()\n    }\n  })\n}\n","import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const wrapNodes: NodeTransforms['wrapNodes'] = (\n  editor,\n  element,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        match = matchPath(editor, at)\n      } else if (editor.isInline(element)) {\n        match = n =>\n          (Element.isElement(n) && Editor.isInline(editor, n)) || Text.isText(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (split && Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      const rangeRef = Editor.rangeRef(editor, at, {\n        affinity: 'inward',\n      })\n      Transforms.splitNodes(editor, { at: end, match, voids })\n      Transforms.splitNodes(editor, { at: start, match, voids })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    const roots = Array.from(\n      Editor.nodes(editor, {\n        at,\n        match: editor.isInline(element)\n          ? n => Element.isElement(n) && Editor.isBlock(editor, n)\n          : n => Editor.isEditor(n),\n        mode: 'lowest',\n        voids,\n      })\n    )\n\n    for (const [, rootPath] of roots) {\n      const a = Range.isRange(at)\n        ? Range.intersection(at, Editor.range(editor, rootPath))\n        : at\n\n      if (!a) {\n        continue\n      }\n\n      const matches = Array.from(\n        Editor.nodes(editor, { at: a, match, mode, voids })\n      )\n\n      if (matches.length > 0) {\n        const [first] = matches\n        const last = matches[matches.length - 1]\n        const [, firstPath] = first\n        const [, lastPath] = last\n\n        if (firstPath.length === 0 && lastPath.length === 0) {\n          // if there's no matching parent - usually means the node is an editor - don't do anything\n          continue\n        }\n\n        const commonPath = Path.equals(firstPath, lastPath)\n          ? Path.parent(firstPath)\n          : Path.common(firstPath, lastPath)\n\n        const range = Editor.range(editor, firstPath, lastPath)\n        const commonNodeEntry = Editor.node(editor, commonPath)\n        const [commonNode] = commonNodeEntry\n        const depth = commonPath.length + 1\n        const wrapperPath = Path.next(lastPath.slice(0, depth))\n        const wrapper = { ...element, children: [] }\n        Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n        Transforms.moveNodes(editor, {\n          at: range,\n          match: n =>\n            Element.isAncestor(commonNode) && commonNode.children.includes(n),\n          to: wrapperPath.concat(0),\n          voids,\n        })\n      }\n    }\n  })\n}\n","import {\n  addMark,\n  deleteFragment,\n  Editor,\n  getDirtyPaths,\n  getFragment,\n  insertBreak,\n  insertFragment,\n  insertNode,\n  insertSoftBreak,\n  insertText,\n  normalizeNode,\n  removeMark,\n  shouldNormalize,\n} from './'\nimport { apply } from './core'\nimport {\n  above,\n  after,\n  before,\n  deleteBackward,\n  deleteForward,\n  edges,\n  elementReadOnly,\n  end,\n  first,\n  fragment,\n  getVoid,\n  hasBlocks,\n  hasInlines,\n  hasPath,\n  hasTexts,\n  isBlock,\n  isEdge,\n  isEmpty,\n  isEnd,\n  isNormalizing,\n  isStart,\n  last,\n  leaf,\n  levels,\n  marks,\n  next,\n  node,\n  nodes,\n  normalize,\n  parent,\n  path,\n  pathRef,\n  pathRefs,\n  point,\n  pointRef,\n  pointRefs,\n  positions,\n  previous,\n  range,\n  rangeRef,\n  rangeRefs,\n  setNormalizing,\n  shouldMergeNodesRemovePrevNode,\n  start,\n  string,\n  unhangRange,\n  withoutNormalizing,\n} from './editor'\nimport { deleteText } from './transforms-text'\nimport {\n  collapse,\n  deselect,\n  move,\n  select,\n  setPoint,\n  setSelection,\n} from './transforms-selection'\nimport {\n  insertNodes,\n  liftNodes,\n  mergeNodes,\n  moveNodes,\n  removeNodes,\n  setNodes,\n  splitNodes,\n  unsetNodes,\n  unwrapNodes,\n  wrapNodes,\n} from './transforms-node'\n\n/**\n * Create a new Slate `Editor` object.\n */\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isElementReadOnly: () => false,\n    isInline: () => false,\n    isSelectable: () => true,\n    isVoid: () => false,\n    markableVoid: () => false,\n    onChange: () => {},\n\n    // Core\n    apply: (...args) => apply(editor, ...args),\n\n    // Editor\n    addMark: (...args) => addMark(editor, ...args),\n    deleteBackward: (...args) => deleteBackward(editor, ...args),\n    deleteForward: (...args) => deleteForward(editor, ...args),\n    deleteFragment: (...args) => deleteFragment(editor, ...args),\n    getFragment: (...args) => getFragment(editor, ...args),\n    insertBreak: (...args) => insertBreak(editor, ...args),\n    insertSoftBreak: (...args) => insertSoftBreak(editor, ...args),\n    insertFragment: (...args) => insertFragment(editor, ...args),\n    insertNode: (...args) => insertNode(editor, ...args),\n    insertText: (...args) => insertText(editor, ...args),\n    normalizeNode: (...args) => normalizeNode(editor, ...args),\n    removeMark: (...args) => removeMark(editor, ...args),\n    getDirtyPaths: (...args) => getDirtyPaths(editor, ...args),\n    shouldNormalize: (...args) => shouldNormalize(editor, ...args),\n\n    // Editor interface\n    above: (...args) => above(editor, ...args),\n    after: (...args) => after(editor, ...args),\n    before: (...args) => before(editor, ...args),\n    collapse: (...args) => collapse(editor, ...args),\n    delete: (...args) => deleteText(editor, ...args),\n    deselect: (...args) => deselect(editor, ...args),\n    edges: (...args) => edges(editor, ...args),\n    elementReadOnly: (...args) => elementReadOnly(editor, ...args),\n    end: (...args) => end(editor, ...args),\n    first: (...args) => first(editor, ...args),\n    fragment: (...args) => fragment(editor, ...args),\n    getMarks: (...args) => marks(editor, ...args),\n    hasBlocks: (...args) => hasBlocks(editor, ...args),\n    hasInlines: (...args) => hasInlines(editor, ...args),\n    hasPath: (...args) => hasPath(editor, ...args),\n    hasTexts: (...args) => hasTexts(editor, ...args),\n    insertNodes: (...args) => insertNodes(editor, ...args),\n    isBlock: (...args) => isBlock(editor, ...args),\n    isEdge: (...args) => isEdge(editor, ...args),\n    isEmpty: (...args) => isEmpty(editor, ...args),\n    isEnd: (...args) => isEnd(editor, ...args),\n    isNormalizing: (...args) => isNormalizing(editor, ...args),\n    isStart: (...args) => isStart(editor, ...args),\n    last: (...args) => last(editor, ...args),\n    leaf: (...args) => leaf(editor, ...args),\n    levels: (...args) => levels(editor, ...args),\n    liftNodes: (...args) => liftNodes(editor, ...args),\n    mergeNodes: (...args) => mergeNodes(editor, ...args),\n    move: (...args) => move(editor, ...args),\n    moveNodes: (...args) => moveNodes(editor, ...args),\n    next: (...args) => next(editor, ...args),\n    node: (...args) => node(editor, ...args),\n    nodes: (...args) => nodes(editor, ...args),\n    normalize: (...args) => normalize(editor, ...args),\n    parent: (...args) => parent(editor, ...args),\n    path: (...args) => path(editor, ...args),\n    pathRef: (...args) => pathRef(editor, ...args),\n    pathRefs: (...args) => pathRefs(editor, ...args),\n    point: (...args) => point(editor, ...args),\n    pointRef: (...args) => pointRef(editor, ...args),\n    pointRefs: (...args) => pointRefs(editor, ...args),\n    positions: (...args) => positions(editor, ...args),\n    previous: (...args) => previous(editor, ...args),\n    range: (...args) => range(editor, ...args),\n    rangeRef: (...args) => rangeRef(editor, ...args),\n    rangeRefs: (...args) => rangeRefs(editor, ...args),\n    removeNodes: (...args) => removeNodes(editor, ...args),\n    select: (...args) => select(editor, ...args),\n    setNodes: (...args) => setNodes(editor, ...args),\n    setNormalizing: (...args) => setNormalizing(editor, ...args),\n    setPoint: (...args) => setPoint(editor, ...args),\n    setSelection: (...args) => setSelection(editor, ...args),\n    splitNodes: (...args) => splitNodes(editor, ...args),\n    start: (...args) => start(editor, ...args),\n    string: (...args) => string(editor, ...args),\n    unhangRange: (...args) => unhangRange(editor, ...args),\n    unsetNodes: (...args) => unsetNodes(editor, ...args),\n    unwrapNodes: (...args) => unwrapNodes(editor, ...args),\n    void: (...args) => getVoid(editor, ...args),\n    withoutNormalizing: (...args) => withoutNormalizing(editor, ...args),\n    wrapNodes: (...args) => wrapNodes(editor, ...args),\n    shouldMergeNodesRemovePrevNode: (...args) =>\n      shouldMergeNodesRemovePrevNode(editor, ...args),\n  }\n\n  return editor\n}\n","import type { TElement, TText } from '@udecode/slate';\n\nimport { IS_FIREFOX, NodeApi } from '@udecode/slate';\nimport isEqual from 'lodash/isEqual.js';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { EdgeNodes } from '../types';\n\nexport const getMarkBoundaryAffinity = (\n  editor: SlateEditor,\n  markBoundary: EdgeNodes\n): 'backward' | 'forward' | undefined => {\n  const { marks, selection } = editor;\n  if (!selection) return;\n\n  const marksMatchLeaf = (leaf: TElement | TText) => {\n    return (\n      marks &&\n      isEqual(NodeApi.extractProps(leaf), marks) &&\n      Object.keys(marks).length > 1\n    );\n  };\n\n  const [backwardLeafEntry, forwardLeafEntry] = markBoundary;\n\n  if (!backwardLeafEntry || !forwardLeafEntry) {\n    const leafEntry = backwardLeafEntry || forwardLeafEntry;\n    const affinityIsTowardsLeaf = !marks || marksMatchLeaf(leafEntry[0]);\n\n    if (affinityIsTowardsLeaf) {\n      return leafEntry === backwardLeafEntry ? 'backward' : 'forward';\n    }\n    return;\n  }\n\n  const marksDirection: 'backward' | 'forward' | null =\n    marks &&\n    (() => {\n      if (backwardLeafEntry && marksMatchLeaf(backwardLeafEntry[0]))\n        return 'backward';\n      if (forwardLeafEntry && marksMatchLeaf(forwardLeafEntry[0]))\n        return 'forward';\n      return null;\n    })();\n\n  const selectionDirection =\n    selection.anchor.offset === 0 ? 'forward' : 'backward';\n\n  if (selectionDirection === 'backward' && marksDirection === 'forward')\n    return 'forward';\n\n  if (\n    IS_FIREFOX &&\n    selectionDirection === 'forward' &&\n    marksDirection !== 'backward'\n  )\n    return 'forward';\n\n  return 'backward';\n};\n","import { type TElement, type TText, ElementApi, NodeApi } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { EdgeNodes } from '../types';\n\nimport { getPluginByType } from '../../../plugin/getSlatePlugin';\n\nexport const isNodeAffinity = (\n  editor: SlateEditor,\n  node: TElement | TText,\n  affinity: 'directional' | 'hard' | 'outward'\n) => {\n  const marks = Object.keys(NodeApi.extractProps(node));\n  const keys = ElementApi.isElement(node) ? [node.type] : marks;\n  return keys.some(\n    (type) =>\n      getPluginByType(editor, type)?.rules.selection?.affinity === affinity\n  );\n};\n\nexport const isNodesAffinity = (\n  editor: SlateEditor,\n  edgeNodes: EdgeNodes,\n  affinity: 'directional' | 'hard' | 'outward'\n) => {\n  const [backwardLeafEntry, forwardLeafEntry] = edgeNodes;\n\n  return (\n    (backwardLeafEntry &&\n      isNodeAffinity(editor, backwardLeafEntry[0], affinity)) ||\n    (forwardLeafEntry && isNodeAffinity(editor, forwardLeafEntry[0], affinity))\n  );\n};\n","import type { Point } from 'slate';\n\nimport { ElementApi, NodeApi } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { EdgeNodes } from '../types';\n\nexport const setAffinitySelection = (\n  editor: SlateEditor,\n  edgeNodes: EdgeNodes,\n  affinity: 'backward' | 'forward'\n) => {\n  const setMarks = (marks: typeof editor.marks) => {\n    editor.marks = marks;\n    editor.api.onChange();\n  };\n\n  const select = (point: Point) => {\n    editor.tf.setSelection({ anchor: point, focus: point });\n  };\n\n  const [before, after] = edgeNodes;\n\n  if (affinity === 'backward') {\n    if (before === null) {\n      setMarks({});\n      return;\n    }\n\n    const beforeEnd = editor.api.end(before[1]);\n    if (beforeEnd) {\n      select(beforeEnd);\n    }\n\n    if (ElementApi.isElement(before[0])) return;\n    setMarks(null);\n\n    return;\n  }\n\n  if (before === null) {\n    setMarks(null);\n    return;\n  }\n\n  if (after === null) {\n    setMarks({});\n    return;\n  }\n\n  const beforeEnd = editor.api.end(before[1])!;\n  select(beforeEnd);\n\n  if (ElementApi.isElement(after[0])) {\n    return;\n  } else {\n    setMarks(NodeApi.extractProps(after[0]));\n  }\n};\n","import type { DebugConfig } from '../getCorePlugins';\n\nimport { createTSlatePlugin } from '../../plugin';\n\nexport type DebugErrorType =\n  | (string & {})\n  | 'DEFAULT'\n  | 'OPTION_UNDEFINED'\n  | 'OVERRIDE_MISSING'\n  | 'PLUGIN_DEPENDENCY_MISSING'\n  | 'PLUGIN_MISSING'\n  | 'USE_CREATE_PLUGIN'\n  | 'USE_ELEMENT_CONTEXT';\n\nexport type LogLevel = 'error' | 'info' | 'log' | 'warn';\n\nexport class PlateError extends Error {\n  constructor(\n    message: string,\n    public type: DebugErrorType = 'DEFAULT'\n  ) {\n    super(`[${type}] ${message}`);\n    this.name = 'PlateError';\n  }\n}\n\nexport const DebugPlugin = createTSlatePlugin<DebugConfig>({\n  key: 'debug',\n  options: {\n    isProduction: process.env.NODE_ENV === 'production',\n    logger: {\n      error: (message, type, details) =>\n        console.error(`${type ? `[${type}] ` : ''}${message}`, details),\n      info: (message, type, details) =>\n        console.info(`${type ? `[${type}] ` : ''}${message}`, details),\n      log: (message, type, details) =>\n        console.log(`${type ? `[${type}] ` : ''}${message}`, details),\n      warn: (message, type, details) =>\n        console.warn(`${type ? `[${type}] ` : ''}${message}`, details),\n    },\n    logLevel:\n      process.env.NODE_ENV === 'production' ? 'error' : ('log' as LogLevel),\n    throwErrors: true,\n  },\n}).extendEditorApi<DebugConfig['api']>(({ getOptions }) => {\n  const logLevels: LogLevel[] = ['error', 'warn', 'info', 'log'];\n\n  const log = (\n    level: LogLevel,\n    message: any,\n    type?: DebugErrorType,\n    details?: any\n  ) => {\n    if (process.env.NODE_ENV === 'production') return;\n\n    const options = getOptions();\n\n    if (options.isProduction && level === 'log') return;\n    if (logLevels.indexOf(level) <= logLevels.indexOf(options.logLevel!)) {\n      if (level === 'error' && options.throwErrors) {\n        throw new PlateError(message, type);\n      } else {\n        options.logger[level]?.(message, type, details);\n      }\n    }\n  };\n\n  return {\n    debug: {\n      error: (message, type, details) => log('error', message, type, details),\n      info: (message, type, details) => log('info', message, type, details),\n      log: (message, type, details) => log('log', message, type, details),\n      warn: (message, type, details) => log('warn', message, type, details),\n    },\n  };\n});\n","import type { Operation, ScrollIntoViewOptions, TRange } from '@udecode/slate';\n\nimport { bindFirst } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../';\n\nimport { type PluginConfig, createTSlatePlugin } from '../../plugin';\nimport { withScrolling } from './withScrolling';\n\nexport const AUTO_SCROLL = new WeakMap<SlateEditor, boolean>();\n\nexport type AutoScrollOperationsMap = Partial<\n  Record<Operation['type'], boolean>\n>;\n\nexport type DomConfig = PluginConfig<\n  'dom',\n  {\n    /** Choose the first or last matching operation as the scroll target */\n    scrollMode?: ScrollMode;\n    /**\n     * Operations map; false to disable an operation, true or undefined to\n     * enable\n     */\n    scrollOperations?: AutoScrollOperationsMap;\n    /** Options passed to scrollIntoView */\n    scrollOptions?: ScrollIntoViewOptions;\n  }\n>;\n\n/** Mode for picking target op when multiple enabled */\nexport type ScrollMode = 'first' | 'last';\n\n/**\n * Placeholder plugin for DOM interaction, that could be replaced with\n * ReactPlugin.\n */\nexport const DOMPlugin = createTSlatePlugin<DomConfig>({\n  key: 'dom',\n  options: {\n    scrollMode: 'last',\n    scrollOperations: {\n      insert_node: true,\n      insert_text: true,\n    },\n    scrollOptions: {\n      scrollMode: 'if-needed',\n    },\n  },\n})\n  .extendEditorApi(({ editor }) => ({\n    isScrolling: () => {\n      return AUTO_SCROLL.get(editor) ?? false;\n    },\n  }))\n  .extendEditorTransforms(({ editor }) => ({\n    withScrolling: bindFirst(withScrolling, editor),\n  }))\n  .overrideEditor(({ api, editor, getOption, tf: { apply } }) => ({\n    transforms: {\n      apply(operation) {\n        if (api.isScrolling()) {\n          apply(operation);\n\n          // Check if this op type is enabled (default true)\n          const scrollOperations = getOption('scrollOperations')!;\n\n          if (!scrollOperations[operation.type]) return;\n\n          // Gather enabled ops in this batch\n          const matched = editor.operations.filter(\n            (op) => !!scrollOperations[op.type]\n          );\n\n          if (matched.length === 0) return;\n\n          const mode = getOption('scrollMode')!;\n\n          // Pick target\n          const targetOp = mode === 'first' ? matched[0] : matched.at(-1);\n\n          if (!targetOp) return;\n\n          const { offset, path } = (targetOp as any).path\n            ? (targetOp as any as { path: number[]; offset?: number })\n            : {};\n\n          if (!path) return;\n\n          const scrollOptions = getOption('scrollOptions')!;\n\n          const scrollTarget = {\n            offset: offset ?? 0,\n            path,\n          };\n\n          api.scrollIntoView(scrollTarget, scrollOptions);\n\n          return;\n        }\n\n        return apply(operation);\n      },\n    },\n  }))\n  .overrideEditor(({ editor, tf: { apply } }) => ({\n    transforms: {\n      apply(operation) {\n        if (operation.type === 'set_selection') {\n          const { properties } = operation;\n          editor.dom.prevSelection = properties as TRange | null;\n          apply(operation);\n          editor.dom.currentKeyboardEvent = null;\n          return;\n        }\n\n        apply(operation);\n      },\n    },\n  }));\n","import type { ScrollIntoViewOptions } from '@udecode/slate';\n\nimport isUndefined from 'lodash/isUndefined.js';\nimport omitBy from 'lodash/omitBy.js';\n\nimport type { SlateEditor } from '../../editor';\nimport type { AutoScrollOperationsMap, ScrollMode } from './DOMPlugin';\n\nimport { AUTO_SCROLL, DOMPlugin } from './DOMPlugin';\n\nexport interface WithAutoScrollOptions {\n  mode?: ScrollMode;\n  operations?: AutoScrollOperationsMap;\n  scrollOptions?: ScrollIntoViewOptions;\n}\n\nexport const withScrolling = (\n  editor: SlateEditor,\n  fn: () => void,\n  options?: WithAutoScrollOptions\n) => {\n  const prevOptions = editor.getOptions(DOMPlugin);\n  const prevAutoScroll = AUTO_SCROLL.get(editor) ?? false;\n\n  if (options) {\n    const ops = {\n      ...prevOptions,\n      ...omitBy(options, isUndefined),\n    };\n\n    editor.setOptions(DOMPlugin, ops);\n  }\n  AUTO_SCROLL.set(editor, true);\n  fn();\n  // reset\n  AUTO_SCROLL.set(editor, prevAutoScroll);\n  editor.setOptions(DOMPlugin, prevOptions);\n};\n","import { bindFirst } from '@udecode/utils';\n\nimport { createSlatePlugin } from '../../plugin';\nimport { deserializeHtml, parseHtmlDocument } from './utils';\n\n/**\n * Enables support for deserializing inserted content from HTML format to Slate\n * format and serializing Slate content to HTML format.\n */\nexport const HtmlPlugin = createSlatePlugin({\n  key: 'html',\n})\n  .extendApi(({ editor }) => ({\n    deserialize: bindFirst(deserializeHtml, editor),\n  }))\n  .extend({\n    parser: {\n      format: 'text/html',\n      deserialize: ({ api, data }) => {\n        const document = parseHtmlDocument(data);\n\n        return api.html.deserialize({\n          element: document.body,\n        });\n      },\n    },\n  });\n","export const isHtmlElement = (node: Node): node is Element =>\n  node.nodeType === Node.ELEMENT_NODE;\n","export const isHtmlText = (node: Node): node is Text =>\n  node.nodeType === Node.TEXT_NODE;\n","/**\n * # Methodology\n *\n * ## Step 1. Get the list of all standard tag names\n *\n * Go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element and run the\n * following in the console to generate a JSON array of tag names:\n *\n * ```js\n * JSON.stringify(\n *   Array.from(document.querySelectorAll('article table td:first-child'))\n *     .map((td) => {\n *       const body = document.createElement('body');\n *       body.innerHTML = td.textContent;\n *       return body.firstChild?.tagName;\n *     })\n *     .filter((tagName) => tagName)\n * );\n * ```\n *\n * Output (as of 2023-11-06):\n *\n * ```json\n * '[\"BASE\",\"LINK\",\"META\",\"STYLE\",\"TITLE\",\"ADDRESS\",\"ARTICLE\",\"ASIDE\",\"FOOTER\",\"HEADER\",\"H1\",\"HGROUP\",\"MAIN\",\"NAV\",\"SECTION\",\"SEARCH\",\"BLOCKQUOTE\",\"DD\",\"DIV\",\"DL\",\"DT\",\"FIGCAPTION\",\"FIGURE\",\"HR\",\"LI\",\"MENU\",\"OL\",\"P\",\"PRE\",\"UL\",\"A\",\"ABBR\",\"B\",\"BDI\",\"BDO\",\"BR\",\"CITE\",\"CODE\",\"DATA\",\"DFN\",\"EM\",\"I\",\"KBD\",\"MARK\",\"Q\",\"RP\",\"RT\",\"RUBY\",\"S\",\"SAMP\",\"SMALL\",\"SPAN\",\"STRONG\",\"SUB\",\"SUP\",\"TIME\",\"U\",\"VAR\",\"WBR\",\"AREA\",\"AUDIO\",\"IMG\",\"MAP\",\"TRACK\",\"VIDEO\",\"EMBED\",\"IFRAME\",\"OBJECT\",\"PICTURE\",\"PORTAL\",\"SOURCE\",\"svg\",\"math\",\"CANVAS\",\"NOSCRIPT\",\"SCRIPT\",\"DEL\",\"INS\",\"TABLE\",\"BUTTON\",\"DATALIST\",\"FIELDSET\",\"FORM\",\"INPUT\",\"LABEL\",\"LEGEND\",\"METER\",\"OPTGROUP\",\"OPTION\",\"OUTPUT\",\"PROGRESS\",\"SELECT\",\"TEXTAREA\",\"DETAILS\",\"DIALOG\",\"SUMMARY\",\"SLOT\",\"TEMPLATE\",\"ACRONYM\",\"BIG\",\"CENTER\",\"CONTENT\",\"DIR\",\"FONT\",\"IMG\",\"MARQUEE\",\"MENUITEM\",\"NOBR\",\"NOEMBED\",\"NOFRAMES\",\"PARAM\",\"PLAINTEXT\",\"RB\",\"RTC\",\"SHADOW\",\"STRIKE\",\"TT\",\"XMP\"]'\n * ```\n *\n * ## Step 2. For each tag name, determine the default browser style\n *\n * Open an empty HTML file in the browser and run the following in the console:\n *\n * ```js\n * const tagNames = JSON.parse(<JSON string from step 1>);\n *\n * JSON.stringify(\n *   tagNames.filter((tagName) => {\n *     const element = document.createElement(tagName);\n *     document.body.appendChild(element);\n *     const display = window.getComputedStyle(element).display;\n *     element.remove();\n *     return display.startsWith('inline');\n *   })\n * );\n * ```\n *\n * Place the result in the array below (accurate as of 2023-11-06).\n */\n\nexport const inlineTagNames = new Set([\n  'A',\n  'ABBR',\n  'ACRONYM',\n  'B',\n  'BDI',\n  'BDO',\n  'BIG',\n  'BR',\n  'BUTTON',\n  'CANVAS',\n  'CITE',\n  'CODE',\n  'CONTENT',\n  'DATA',\n  'DEL',\n  'DFN',\n  'EM',\n  'EMBED',\n  'FONT',\n  'I',\n  'IFRAME',\n  'IMG',\n  'IMG',\n  'INPUT',\n  'INS',\n  'KBD',\n  'LABEL',\n  'MAP',\n  'MARK',\n  'MARQUEE',\n  'math',\n  'MENUITEM',\n  'METER',\n  'NOBR',\n  'OBJECT',\n  'OUTPUT',\n  'PICTURE',\n  'PORTAL',\n  'PROGRESS',\n  'Q',\n  'S',\n  'SAMP',\n  'SELECT',\n  'SHADOW',\n  'SMALL',\n  'SOURCE',\n  'SPAN',\n  'STRIKE',\n  'STRONG',\n  'SUB',\n  'SUP',\n  'svg',\n  'TEXTAREA',\n  'TIME',\n  'TRACK',\n  'TT',\n  'U',\n  'VAR',\n  'VIDEO',\n  'WBR',\n]);\n","import { inlineTagNames } from './inlineTagNames';\nimport { isHtmlElement } from './isHtmlElement';\n\nexport const isHtmlInlineElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  const tagNameIsInline = inlineTagNames.has(element.tagName);\n\n  /**\n   * Valid display values include 'inline flow'. We only care about the first\n   * part.\n   */\n  const displayProperty = element.style.display.split(' ')[0];\n\n  if (displayProperty === '') {\n    return tagNameIsInline;\n  }\n  if (displayProperty.startsWith('inline')) {\n    return true;\n  }\n  if (displayProperty === 'inherit' && element.parentElement) {\n    return isHtmlInlineElement(element.parentElement);\n  }\n  /**\n   * Handle all special values manually, so that any unhandled values can be\n   * assumed to be block.\n   *\n   * Note: Ideally, content inside `display: none` elements should not be\n   * parsed. However, if such elements are parsed, it's best for their inline or\n   * block status to be left unchanged.\n   */\n  if (\n    ['contents', 'initial', 'none', 'revert', 'revert-layer', 'unset'].includes(\n      displayProperty\n    )\n  ) {\n    return tagNameIsInline;\n  }\n\n  return false;\n};\n","import { isHtmlElement } from './isHtmlElement';\nimport { isHtmlInlineElement } from './isHtmlInlineElement';\n\nexport const isHtmlBlockElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  return !isHtmlInlineElement(element);\n};\n","import type { TrimEndRule, TrimStartRule } from './types';\n\nexport const collapseString = (\n  text: string,\n  {\n    shouldCollapseWhiteSpace = true,\n    trimEnd = 'collapse',\n    trimStart = 'collapse',\n    whiteSpaceIncludesNewlines = true,\n  }: {\n    shouldCollapseWhiteSpace?: boolean;\n    trimEnd?: TrimEndRule;\n    trimStart?: TrimStartRule;\n    whiteSpaceIncludesNewlines?: boolean;\n  } = {}\n) => {\n  if (trimStart === 'all') {\n    text = text.replace(/^\\s+/, '');\n  }\n  if (trimEnd === 'single-newline') {\n    // Strip at most one newline from the end\n    text = text.replace(/\\n$/, '');\n  }\n  if (shouldCollapseWhiteSpace) {\n    if (whiteSpaceIncludesNewlines) {\n      text = text.replaceAll(/\\s+/g, ' ');\n    } else {\n      // Collapse horizontal whitespace\n      text = text.replaceAll(/[^\\S\\n\\r]+/g, ' ');\n\n      /**\n       * Trim horizontal whitespace from the start and end of lines (behavior of\n       * pre-line).\n       */\n      text = text.replaceAll(/^[^\\S\\n\\r]+/gm, '');\n      text = text.replaceAll(/[^\\S\\n\\r]+$/gm, '');\n    }\n  }\n\n  return text;\n};\n","import { isHtmlBlockElement } from '../isHtmlBlockElement';\n\nexport const isLastNonEmptyTextOfInlineFormattingContext = (\n  initialText: Text\n): boolean => {\n  let currentNode: Node | null = initialText;\n\n  while (true) {\n    if (currentNode.nextSibling) {\n      currentNode = currentNode.nextSibling;\n    } else {\n      // If there is no next sibling, ascend to the parent node\n      currentNode = currentNode.parentElement;\n\n      // If the parent node is a block, we've reached the end\n      if (currentNode && isHtmlBlockElement(currentNode)) {\n        return true;\n      }\n\n      // Otherwise, continue to the next sibling of the parent node\n      currentNode = currentNode?.nextSibling || null;\n    }\n    // If there's no next node, we've reached the end\n    if (!currentNode) {\n      return true;\n    }\n    // If the next node is a block, we've reached the end\n    if (isHtmlBlockElement(currentNode)) {\n      return true;\n    }\n    // If the next node is a non-empty text node, we're not at the end\n    if ((currentNode.textContent || '').length > 0) {\n      return false;\n    }\n\n    // Otherwise, continue to the next node\n  }\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nexport const upsertInlineFormattingContext = (\n  state: CollapseWhiteSpaceState\n) => {\n  if (state.inlineFormattingContext) {\n    state.inlineFormattingContext.atStart = false;\n  } else {\n    state.inlineFormattingContext = {\n      atStart: true,\n      lastHasTrailingWhiteSpace: false,\n    };\n  }\n};\n\nexport const endInlineFormattingContext = (state: CollapseWhiteSpaceState) => {\n  state.inlineFormattingContext = null;\n};\n","import type {\n  CollapseWhiteSpaceState,\n  TrimEndRule,\n  TrimStartRule,\n} from './types';\n\nimport { collapseString } from './collapseString';\nimport { isLastNonEmptyTextOfInlineFormattingContext } from './isLastNonEmptyTextOfInlineFormattingContext';\nimport { upsertInlineFormattingContext } from './stateTransforms';\n\nexport const collapseWhiteSpaceText = (\n  text: Text,\n  state: CollapseWhiteSpaceState\n) => {\n  const textContent = text.textContent || '';\n  const isWhiteSpaceOnly = textContent.trim() === '';\n\n  /**\n   * Do not start an inline formatting context with a text node containing only\n   * white space.\n   */\n  if (state.inlineFormattingContext || !isWhiteSpaceOnly) {\n    upsertInlineFormattingContext(state);\n  }\n\n  const { whiteSpaceRule } = state;\n\n  /**\n   * Note: Due to the way HTML strings are parsed in htmlStringToDOMNode, up to\n   * one newline is already trimmed from the start of text nodes inside <pre>\n   * elements. If we do so again here, we may remove too many newlines. This\n   * only applies to actual <pre> elements, not elements with the white-space\n   * CSS property.\n   */\n  const trimStart: TrimStartRule = (() => {\n    if (whiteSpaceRule !== 'normal') return 'collapse';\n    if (\n      !state.inlineFormattingContext ||\n      state.inlineFormattingContext.atStart ||\n      state.inlineFormattingContext.lastHasTrailingWhiteSpace\n    )\n      return 'all';\n\n    return 'collapse';\n  })();\n\n  const trimEnd: TrimEndRule = (() => {\n    if (whiteSpaceRule === 'normal') return 'collapse';\n    if (isLastNonEmptyTextOfInlineFormattingContext(text))\n      return 'single-newline';\n\n    return 'collapse';\n  })();\n\n  const shouldCollapseWhiteSpace: boolean = {\n    normal: true,\n    pre: false,\n    'pre-line': true,\n  }[whiteSpaceRule];\n\n  const whiteSpaceIncludesNewlines = whiteSpaceRule !== 'pre-line';\n\n  const collapsedTextContent = collapseString(textContent || '', {\n    shouldCollapseWhiteSpace,\n    trimEnd,\n    trimStart,\n    whiteSpaceIncludesNewlines,\n  });\n\n  if (state.inlineFormattingContext && shouldCollapseWhiteSpace) {\n    state.inlineFormattingContext.lastHasTrailingWhiteSpace =\n      collapsedTextContent.endsWith(' ');\n  }\n\n  text.textContent = collapsedTextContent;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlElement } from '../isHtmlElement';\nimport { isHtmlText } from '../isHtmlText';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\nimport { collapseWhiteSpaceText } from './collapseWhiteSpaceText';\n\nexport const collapseWhiteSpaceNode = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  if (isHtmlElement(node)) {\n    collapseWhiteSpaceElement(node as HTMLElement, state);\n\n    return;\n  }\n  if (isHtmlText(node)) {\n    collapseWhiteSpaceText(node as Text, state);\n\n    return;\n  }\n\n  collapseWhiteSpaceChildren(node, state);\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceNode } from './collapseWhiteSpaceNode';\n\nexport const collapseWhiteSpaceChildren = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  const childNodes = Array.from(node.childNodes);\n\n  for (const childNode of childNodes) {\n    collapseWhiteSpaceNode(childNode, state);\n  }\n};\n","import type { WhiteSpaceRule } from './types';\n\nexport const inferWhiteSpaceRule = (\n  element: HTMLElement\n): WhiteSpaceRule | null => {\n  const whiteSpaceProperty = element.style.whiteSpace;\n\n  switch (whiteSpaceProperty) {\n    case 'break-spaces':\n    case 'pre':\n    case 'pre-wrap': {\n      return 'pre';\n    }\n    case 'normal':\n    case 'nowrap': {\n      return 'normal';\n    }\n    case 'pre-line': {\n      return 'pre-line';\n    }\n  }\n\n  if (element.tagName === 'PRE') {\n    return 'pre';\n  }\n  if (whiteSpaceProperty === 'initial') {\n    return 'normal';\n  }\n\n  return null;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlInlineElement } from '../isHtmlInlineElement';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { inferWhiteSpaceRule } from './inferWhiteSpaceRule';\nimport { endInlineFormattingContext } from './stateTransforms';\n\n/**\n * Note: We do not want to start an inline formatting context until we encounter\n * a text node.\n */\nexport const collapseWhiteSpaceElement = (\n  element: HTMLElement,\n  state: CollapseWhiteSpaceState\n) => {\n  const isInlineElement = isHtmlInlineElement(element);\n  const previousWhiteSpaceRule = state.whiteSpaceRule;\n  const inferredWhiteSpaceRule = inferWhiteSpaceRule(element);\n\n  if (inferredWhiteSpaceRule) {\n    state.whiteSpaceRule = inferredWhiteSpaceRule;\n  }\n  // End any existing inline formatting context\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  collapseWhiteSpaceChildren(element, state);\n\n  // Do not let inline formatting context break out of block elements\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  // Restore previous whiteSpaceRule\n  state.whiteSpaceRule = previousWhiteSpaceRule;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\n\n// Entrypoint\nexport const collapseWhiteSpace = (element: HTMLElement) => {\n  const clonedElement = element.cloneNode(true) as HTMLElement;\n\n  // Mutable state object\n  const state: CollapseWhiteSpaceState = {\n    inlineFormattingContext: null,\n    whiteSpaceRule: 'normal',\n  };\n\n  collapseWhiteSpaceElement(clonedElement, state);\n\n  return clonedElement;\n};\n","import type { Descendant } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\n\njsx;\n\n/** Deserialize HTML body element to Fragment. */\nexport const htmlBodyToFragment = (\n  editor: SlateEditor,\n  element: HTMLElement\n): Descendant[] | undefined => {\n  if (element.nodeName === 'BODY') {\n    return jsx(\n      'fragment',\n      {},\n      deserializeHtmlNodeChildren(editor, element)\n    ) as Descendant[];\n  }\n};\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlChildren } from '../types';\n\nimport { isSlateNode } from '../../../static';\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\nexport const deserializeHtmlNodeChildren = (\n  editor: SlateEditor,\n  node: ChildNode | HTMLElement,\n  isSlateParent = false\n): DeserializeHtmlChildren[] => {\n  return Array.from(node.childNodes).flatMap((child) => {\n    if (\n      child.nodeType === 1 &&\n      !isSlateNode(child as HTMLElement) &&\n      isSlateParent\n    ) {\n      return deserializeHtmlNodeChildren(\n        editor,\n        child as HTMLElement,\n        isSlateParent\n      );\n    }\n\n    return deserializeHtmlNode(editor)(child);\n  }) as DeserializeHtmlChildren[];\n};\n","/** Deserialize HTML to break line. */\nexport const htmlBrToNewLine = (node: ChildNode | HTMLElement) => {\n  if (node.nodeName === 'BR') {\n    return '\\n';\n  }\n};\n","import type { Descendant } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { isSlateVoid } from '../../../static';\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlElement } from './pipeDeserializeHtmlElement';\n\n/** Deserialize HTML to Element. */\nexport const htmlElementToElement = (\n  editor: SlateEditor,\n  element: HTMLElement,\n  isSlate = false\n) => {\n  const deserialized = pipeDeserializeHtmlElement(editor, element);\n\n  if (deserialized) {\n    const { node, withoutChildren } = deserialized;\n\n    let descendants =\n      node.children ??\n      (deserializeHtmlNodeChildren(editor, element, isSlate) as Descendant[]);\n\n    if (descendants.length === 0 || withoutChildren || isSlateVoid(element)) {\n      descendants = [{ text: '' }];\n    }\n\n    return jsx('element', node, descendants) as Descendant;\n  }\n};\n","import { type AnyObject, type Nullable, isDefined } from '@udecode/utils';\nimport castArray from 'lodash/castArray.js';\n\nimport type { SlateEditor } from '../../../editor';\nimport type {\n  AnyEditorPlugin,\n  HtmlDeserializer,\n} from '../../../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../../../plugin';\nimport { isSlateNode } from '../../../static';\nimport { getInjectedPlugins } from '../../../utils/getInjectedPlugins';\nimport { getDataNodeProps } from './getDataNodeProps';\n\n/**\n * Get a deserializer and add default rules for deserializing plate static\n * elements\n */\nconst getDeserializedWithStaticRules = (plugin: AnyEditorPlugin) => {\n  let deserializer = plugin.parsers?.html?.deserializer;\n\n  const rules = deserializer?.rules ?? [];\n\n  // Check if rules already contain slate-xxx className\n  const hasSlateRule = rules.some((rule) =>\n    rule.validClassName?.includes(`slate-${plugin.key}`)\n  );\n\n  const staticRules = hasSlateRule\n    ? rules\n    : [\n        {\n          validClassName: `slate-${plugin.key}`,\n          validNodeName: '*',\n        },\n        ...rules,\n      ];\n\n  if (!deserializer) deserializer = { rules: staticRules };\n\n  deserializer.rules = staticRules;\n\n  return deserializer;\n};\n\n/** Get a deserializer by type, node names, class names and styles. */\nexport const pluginDeserializeHtml = (\n  editor: SlateEditor,\n  plugin: AnyEditorPlugin,\n  {\n    deserializeLeaf,\n    element: el,\n  }: { element: HTMLElement; deserializeLeaf?: boolean }\n): (Nullable<HtmlDeserializer> & { node: AnyObject }) | undefined => {\n  const {\n    node: { isElement: isElementRoot, isLeaf: isLeafRoot },\n  } = plugin;\n\n  const deserializer = getDeserializedWithStaticRules(plugin);\n\n  if (!deserializer) return;\n\n  const {\n    attributeNames,\n    isElement: isElementRule,\n    isLeaf: isLeafRule,\n    query,\n    rules,\n  } = deserializer;\n  let { parse } = deserializer;\n\n  const isElement = isElementRule || isElementRoot;\n  const isLeaf = isLeafRule || isLeafRoot;\n\n  if (!deserializeLeaf && !isElement) {\n    return;\n  }\n  if (deserializeLeaf && !isLeaf) {\n    return;\n  }\n  if (rules) {\n    const isValid = rules.some(\n      ({ validAttribute, validClassName, validNodeName = '*', validStyle }) => {\n        if (validNodeName) {\n          const validNodeNames = castArray<string>(validNodeName);\n\n          // Ignore if el nodeName is not included in rule validNodeNames (except *).\n          if (\n            validNodeNames.length > 0 &&\n            !validNodeNames.includes(el.nodeName) &&\n            validNodeName !== '*'\n          )\n            return false;\n        }\n        // Ignore if the rule className is not in el class list.\n        if (validClassName && !el.classList.contains(validClassName))\n          return false;\n        if (validStyle) {\n          for (const [key, value] of Object.entries(validStyle)) {\n            const values = castArray<string>(value);\n\n            // Ignore if el style value is not included in rule style values (except *)\n            if (!values.includes((el.style as any)[key]) && value !== '*')\n              return;\n            // Ignore if el style value is falsy (for value *)\n            if (value === '*' && !(el.style as any)[key]) return;\n\n            const defaultNodeValue = plugin.inject.nodeProps?.defaultNodeValue;\n\n            // Ignore if the style value = plugin.inject.nodeProps.defaultNodeValue\n            if (\n              defaultNodeValue &&\n              defaultNodeValue === (el.style as any)[key]\n            ) {\n              return false;\n            }\n          }\n        }\n        if (validAttribute) {\n          if (typeof validAttribute === 'string') {\n            if (!el.getAttributeNames().includes(validAttribute)) return false;\n          } else {\n            for (const [attributeName, attributeValue] of Object.entries(\n              validAttribute\n            )) {\n              const attributeValues = castArray<string>(attributeValue);\n              const elAttribute = el.getAttribute(attributeName);\n\n              if (\n                !isDefined(elAttribute) ||\n                !attributeValues.includes(elAttribute)\n              )\n                return false;\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (!isValid) return;\n  }\n  if (\n    query &&\n    !query({ ...(getEditorPlugin(editor, plugin) as any), element: el })\n  ) {\n    return;\n  }\n  if (!parse)\n    if (isElement) {\n      parse = ({ type }) => ({ type: type });\n    } else if (isLeaf) {\n      parse = ({ type }) => ({ [type!]: true });\n    } else {\n      return;\n    }\n\n  const parsedNode = (() => {\n    if (isSlateNode(el)) {\n      return {};\n    }\n\n    return (\n      parse({\n        ...(getEditorPlugin(editor, plugin) as any),\n        element: el,\n        node: {},\n      }) ?? {}\n    );\n  })();\n\n  const dataNodeProps = getDataNodeProps({\n    editor,\n    element: el,\n    plugin,\n  });\n\n  let node = {\n    ...parsedNode,\n    ...dataNodeProps,\n  };\n\n  if (Object.keys(node).length === 0) return;\n\n  const injectedPlugins = getInjectedPlugins(editor, plugin);\n\n  injectedPlugins.forEach((injectedPlugin) => {\n    const res = injectedPlugin.parsers?.html?.deserializer?.parse?.({\n      ...(getEditorPlugin(editor, plugin) as any),\n      element: el,\n      node,\n    });\n\n    if (res && !isSlateNode(el)) {\n      node = {\n        ...node,\n        ...res,\n      };\n    }\n  });\n\n  if (attributeNames) {\n    const elementAttributes = {};\n\n    const elementAttributeNames = el.getAttributeNames();\n\n    for (const elementAttributeName of elementAttributeNames) {\n      if (attributeNames.includes(elementAttributeName)) {\n        (elementAttributes as any)[elementAttributeName] =\n          el.getAttribute(elementAttributeName);\n      }\n    }\n\n    if (Object.keys(elementAttributes).length > 0) {\n      node.attributes = elementAttributes;\n    }\n  }\n\n  return { ...deserializer, node };\n};\n","import type { SlateEditor } from '../../../editor';\n\nimport { type AnyEditorPlugin, getEditorPlugin } from '../../../plugin';\nimport { isSlateLeaf, isSlatePluginNode } from '../../../static';\n\nconst getDefaultNodeProps = ({\n  element,\n  type,\n}: {\n  element: HTMLElement;\n  type: string;\n}) => {\n  if (!isSlatePluginNode(element, type) && !isSlateLeaf(element)) return;\n\n  const dataAttributes: Record<string, any> = {};\n\n  // Get all data-slate-* attributes from dataset\n  Object.entries(element.dataset).forEach(([key, value]) => {\n    if (\n      key.startsWith('slate') &&\n      value &&\n      // Ignore slate default attributes\n      !['slateInline', 'slateLeaf', 'slateNode', 'slateVoid'].includes(key)\n    ) {\n      // Remove 'slate' prefix and convert to camelCase\n      const attributeKey = key.slice(5).charAt(0).toLowerCase() + key.slice(6);\n\n      // Parse value if it's a boolean or number string\n\n      if (value === undefined) return;\n\n      let parsedValue: any = value;\n\n      if (value === 'true') parsedValue = true;\n      else if (value === 'false') parsedValue = false;\n      else if (!Number.isNaN(Number(value))) parsedValue = Number(value);\n\n      dataAttributes[attributeKey] = parsedValue;\n    }\n  });\n\n  if (Object.keys(dataAttributes).length > 0) {\n    return dataAttributes;\n  }\n};\n\nexport const getDataNodeProps = ({\n  editor,\n  element,\n  plugin,\n}: {\n  editor: SlateEditor;\n  element: HTMLElement;\n  plugin: AnyEditorPlugin;\n}) => {\n  const toNodeProps = plugin.parsers.html?.deserializer?.toNodeProps;\n\n  const disableDefaultNodeProps =\n    plugin.parsers.html?.deserializer?.disableDefaultNodeProps ?? false;\n\n  const defaultNodeProps = disableDefaultNodeProps\n    ? {}\n    : getDefaultNodeProps({\n        ...(getEditorPlugin(editor, plugin) as any),\n        element,\n      });\n\n  if (!toNodeProps) return defaultNodeProps;\n\n  const customNodeProps =\n    toNodeProps({\n      ...(getEditorPlugin(editor, plugin) as any),\n      element,\n    }) ?? {};\n\n  return {\n    ...defaultNodeProps,\n    ...customNodeProps,\n  };\n};\n","import type { AnyObject, Nullable } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { HtmlDeserializer } from '../../../plugin/SlatePlugin';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlElement = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  let result: (Nullable<HtmlDeserializer> & { node: AnyObject }) | undefined;\n\n  [...editor.meta.pluginList].reverse().some((plugin) => {\n    result = pluginDeserializeHtml(editor, plugin, { element });\n\n    return !!result;\n  });\n\n  return result;\n};\n","import { type Descendant, ElementApi, TextApi } from '@udecode/slate';\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { mergeDeepToNodes } from '../../../utils';\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlLeaf } from './pipeDeserializeHtmlLeaf';\n\n/**\n * Deserialize HTML to Descendant[] with marks on Text. Build the leaf from the\n * leaf deserializers of each plugin.\n */\nexport const htmlElementToLeaf = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  const node = pipeDeserializeHtmlLeaf(editor, element);\n\n  return deserializeHtmlNodeChildren(editor, element).reduce(\n    (arr: Descendant[], child) => {\n      if (!child) return arr;\n      if (ElementApi.isElement(child)) {\n        if (Object.keys(node).length > 0) {\n          mergeDeepToNodes({\n            node: child,\n            query: {\n              filter: ([n]) => TextApi.isText(n),\n            },\n            source: node,\n          });\n        }\n\n        arr.push(child);\n      } else {\n        const attributes = { ...node };\n\n        // attributes should not override child attributes\n        if (TextApi.isText(child) && child.text) {\n          Object.keys(attributes).forEach((key) => {\n            if (attributes[key] && child[key]) {\n              attributes[key] = child[key];\n            }\n          });\n        }\n\n        arr.push(jsx('text', attributes, child) as any);\n      }\n\n      return arr;\n    },\n    []\n  ) as Descendant[];\n};\n","import type { AnyObject } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlLeaf = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  let node: AnyObject = {};\n\n  [...editor.meta.pluginList].reverse().forEach((plugin) => {\n    const deserialized = pluginDeserializeHtml(editor, plugin, {\n      deserializeLeaf: true,\n      element,\n    });\n\n    if (!deserialized) return;\n\n    node = { ...node, ...deserialized.node };\n  });\n\n  return node;\n};\n","/** Deserialize HTML text node to text. */\nimport { isHtmlText } from './isHtmlText';\n\nexport const htmlTextNodeToString = (node: ChildNode | HTMLElement) => {\n  if (isHtmlText(node)) {\n    if (node.parentElement?.dataset.platePreventDeserialization) return '';\n\n    return node.textContent || '';\n  }\n};\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { isSlateNode } from '../../../static';\nimport { htmlBodyToFragment } from './htmlBodyToFragment';\nimport { htmlBrToNewLine } from './htmlBrToNewLine';\nimport { htmlElementToElement } from './htmlElementToElement';\nimport { htmlElementToLeaf } from './htmlElementToLeaf';\nimport { htmlTextNodeToString } from './htmlTextNodeToString';\nimport { isHtmlElement } from './isHtmlElement';\n\n/** Deserialize HTML element or child node. */\nexport const deserializeHtmlNode =\n  (editor: SlateEditor) =>\n  (node: ChildNode | HTMLElement): DeserializeHtmlNodeReturnType => {\n    const textNode = htmlTextNodeToString(node);\n\n    if (textNode) return textNode;\n    if (!isHtmlElement(node)) return null;\n\n    // break line\n    const breakLine = htmlBrToNewLine(node);\n\n    if (breakLine) return breakLine;\n\n    // body\n    const fragment = htmlBodyToFragment(editor, node as HTMLElement);\n\n    if (fragment) return fragment;\n\n    // element\n    const element = htmlElementToElement(\n      editor,\n      node as HTMLElement,\n      isSlateNode(node as HTMLElement)\n    );\n\n    if (element) return element;\n\n    // leaf\n    return htmlElementToLeaf(editor, node as HTMLElement);\n  };\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\n/** Deserialize HTML element to fragment. */\nexport const deserializeHtmlElement = (\n  editor: SlateEditor,\n  element: HTMLElement\n): DeserializeHtmlNodeReturnType => {\n  return deserializeHtmlNode(editor)(element);\n};\n","/** Convert HTML string into HTML element. */\nexport const htmlStringToDOMNode = (rawHtml: string) => {\n  const node = document.createElement('body');\n  node.innerHTML = rawHtml;\n\n  return node;\n};\n","import type { Descendant } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { WithRequiredKey } from '../../../plugin';\n\nimport { normalizeDescendantsToDocumentFragment } from '../../../utils/normalizeDescendantsToDocumentFragment';\nimport { collapseWhiteSpace } from './collapse-white-space';\nimport { deserializeHtmlElement } from './deserializeHtmlElement';\nimport { htmlStringToDOMNode } from './htmlStringToDOMNode';\n\n/** Deserialize HTML element to a valid document fragment. */\nexport const deserializeHtml = (\n  editor: SlateEditor,\n  {\n    collapseWhiteSpace: shouldCollapseWhiteSpace = true,\n    defaultElementPlugin,\n    element,\n  }: {\n    element: HTMLElement | string;\n    collapseWhiteSpace?: boolean;\n    defaultElementPlugin?: WithRequiredKey;\n  }\n): Descendant[] => {\n  // for serializer\n  if (typeof element === 'string') {\n    element = htmlStringToDOMNode(element);\n  }\n  if (shouldCollapseWhiteSpace) {\n    element = collapseWhiteSpace(element);\n  }\n\n  const fragment = deserializeHtmlElement(editor, element) as Descendant[];\n\n  return normalizeDescendantsToDocumentFragment(editor, {\n    defaultElementPlugin,\n    descendants: fragment,\n  });\n};\n","export const parseHtmlDocument = (html: string) => {\n  return new DOMParser().parseFromString(html, 'text/html');\n};\n","import type { LengthConfig } from '../getCorePlugins';\n\nimport { createTSlatePlugin } from '../../plugin';\n\nexport const LengthPlugin = createTSlatePlugin<LengthConfig>({\n  key: 'length',\n}).overrideEditor(({ editor, getOptions, tf: { apply } }) => ({\n  transforms: {\n    apply(operation) {\n      editor.tf.withoutNormalizing(() => {\n        apply(operation);\n\n        const options = getOptions();\n\n        if (options.maxLength) {\n          const length = editor.api.string([]).length;\n\n          // Make sure to remove overflow of text beyond character limit\n          if (length > options.maxLength) {\n            const overflowLength = length - options.maxLength;\n\n            editor.tf.delete({\n              distance: overflowLength,\n              reverse: true,\n              unit: 'character',\n            });\n          }\n        }\n      });\n    },\n  },\n}));\n","import {\n  type Descendant,\n  type QueryNodeOptions,\n  ElementApi,\n  queryNode,\n} from '@udecode/slate';\nimport { nanoid } from 'nanoid';\n\nimport type { PluginConfig } from '../../plugin/BasePlugin';\n\nimport { createTSlatePlugin } from '../../plugin/createSlatePlugin';\nimport { withNodeId } from './withNodeId';\n\nexport type NodeIdConfig = PluginConfig<\n  'nodeId',\n  {\n    /**\n     * By default, when a node inserted using editor.tf.insertNode(s) has an id,\n     * it will be used instead of the id generator, except if it already exists\n     * in the document. Set this option to true to disable this behavior.\n     */\n    disableInsertOverrides?: boolean;\n    /**\n     * Filter inline `Element` nodes.\n     *\n     * @default true\n     */\n    filterInline?: boolean;\n    /**\n     * Filter `Text` nodes.\n     *\n     * @default true\n     */\n    filterText?: boolean;\n    /**\n     * Node key to store the id.\n     *\n     * @default 'id'\n     */\n    idKey?: string;\n    /**\n     * Normalize initial value. If false, normalize only the first and last node\n     * are missing id. To disable this behavior, use `NodeIdPlugin.configure({\n     * normalizeInitialValue: null })`.\n     *\n     * @default false\n     */\n    normalizeInitialValue?: boolean;\n    /**\n     * Reuse ids on undo/redo and copy/pasting if not existing in the document.\n     * This is disabled by default to avoid duplicate ids across documents.\n     *\n     * @default false\n     */\n    reuseId?: boolean;\n    /**\n     * A function that generates and returns a unique ID.\n     *\n     * @default () => nanoid(10)\n     */\n    idCreator?: () => any;\n  } & QueryNodeOptions\n>;\n\n/** @see {@link withNodeId} */\nexport const NodeIdPlugin = createTSlatePlugin<NodeIdConfig>({\n  key: 'nodeId',\n  options: {\n    filterInline: true,\n    filterText: true,\n    idKey: 'id',\n    normalizeInitialValue: false,\n    filter: () => true,\n    idCreator: () => nanoid(10),\n  },\n  normalizeInitialValue: ({ editor, getOptions }) => {\n    const {\n      allow,\n      exclude,\n      filter,\n      filterInline,\n      filterText,\n      idKey,\n      normalizeInitialValue,\n    } = getOptions();\n\n    // Perf: check if normalization is needed by looking at the first node and last node\n    if (!normalizeInitialValue) {\n      const firstNode = editor.children[0];\n      const lastNode = editor.children.at(-1);\n\n      if (firstNode?.id && lastNode?.id) {\n        return;\n      }\n    }\n\n    const addNodeId = (entry: [Descendant, number[]]) => {\n      const [node, path] = entry;\n\n      if (\n        !node[idKey!] &&\n        queryNode([node, path], {\n          allow,\n          exclude,\n          filter: (entry) => {\n            const [node] = entry;\n\n            if (filterText && !ElementApi.isElement(node)) {\n              return false;\n            }\n            if (\n              filterInline &&\n              ElementApi.isElement(node) &&\n              !editor.api.isBlock(node)\n            ) {\n              return false;\n            }\n\n            return filter!(entry);\n          },\n        })\n      ) {\n        // Verify node exists at path before attempting to modify\n        const existingNode = editor.api.node(path);\n        if (!existingNode) {\n          return;\n        }\n\n        editor.tf.withoutSaving(() => {\n          editor.tf.setNodes(\n            { [idKey!]: getOptions().idCreator!() },\n            { at: path }\n          );\n        });\n      }\n\n      // Only traverse children if this is an Element node\n      if (ElementApi.isElement(node)) {\n        node.children.forEach((child: any, index: number) => {\n          addNodeId([child, [...path, index]]);\n        });\n      }\n    };\n\n    // Process top-level nodes in place\n    editor.children.forEach((node, index) => {\n      addNodeId([node, [index]]);\n    });\n  },\n}).overrideEditor(withNodeId);\n","import {\n  type Descendant,\n  type NodeEntry,\n  type NodeProps,\n  type TNode,\n  queryNode,\n} from '@udecode/slate';\nimport { isDefined } from '@udecode/utils';\nimport castArray from 'lodash/castArray.js';\nimport cloneDeep from 'lodash/cloneDeep.js';\n\nimport type { OverrideEditor } from '../../plugin';\nimport type { NodeIdConfig } from './NodeIdPlugin';\n\nimport { applyDeepToNodes, defaultsDeepToNodes } from '../../utils';\n\n/** Enables support for inserting nodes with an id key. */\nexport const withNodeId: OverrideEditor<NodeIdConfig> = ({\n  editor,\n  getOptions,\n  tf: { apply, insertNode, insertNodes },\n}) => {\n  const idPropsCreator = () => ({\n    [getOptions().idKey ?? '']: getOptions().idCreator!(),\n  });\n\n  const filterNode = (nodeEntry: NodeEntry) => {\n    const { filter, filterText } = getOptions();\n\n    return (\n      filter!(nodeEntry) && (!filterText || nodeEntry[0]?.type !== undefined)\n    );\n  };\n\n  const removeIdFromNodeIfDuplicate = <N extends Descendant>(node: N) => {\n    const { idKey = '', reuseId } = getOptions();\n\n    if (\n      !reuseId &&\n      editor.api.some({ at: [], match: { [idKey]: node[idKey] } })\n    ) {\n      delete node[idKey];\n    }\n  };\n\n  const overrideIdIfSet = (node: TNode) => {\n    const { idKey = '' } = getOptions();\n\n    if (isDefined(node._id)) {\n      const id = node._id;\n      delete node._id;\n\n      if (!editor.api.some({ at: [], match: { [idKey]: id } })) {\n        node[idKey] = id;\n      }\n    }\n  };\n\n  return {\n    transforms: {\n      apply(operation) {\n        const {\n          allow,\n          disableInsertOverrides,\n          exclude,\n          idCreator,\n          idKey = '',\n          reuseId,\n        } = getOptions();\n\n        const query = {\n          allow,\n          exclude,\n          filter: filterNode,\n        };\n\n        if (operation.type === 'insert_node') {\n          // clone to be able to write (read-only)\n          const node = cloneDeep(operation.node);\n\n          // Delete ids from node that are already being used\n          applyDeepToNodes({\n            apply: removeIdFromNodeIfDuplicate,\n            node,\n            query,\n            source: {},\n          });\n\n          defaultsDeepToNodes({\n            node,\n            path: operation.path,\n            query,\n            source: idPropsCreator,\n          });\n\n          if (!disableInsertOverrides) {\n            applyDeepToNodes({\n              apply: overrideIdIfSet,\n              node,\n              query,\n              source: {},\n            });\n          }\n\n          return apply({\n            ...operation,\n            node,\n          });\n        }\n        if (operation.type === 'split_node') {\n          const node = operation.properties as NodeProps<TNode>;\n          let id = (operation.properties as any)[idKey];\n\n          // only for elements (node with a type) or all nodes if `filterText=false`\n\n          if (queryNode([node as any, operation.path], query)) {\n            /**\n             * Create a new id if:\n             *\n             * - The id in the new node is already being used in the editor or,\n             * - The node has no id\n             */\n            if (\n              !reuseId ||\n              id === undefined ||\n              editor.api.some({\n                at: [],\n                match: { [idKey]: id },\n              })\n            ) {\n              id = idCreator!();\n            }\n\n            return apply({\n              ...operation,\n              properties: {\n                ...operation.properties,\n                [idKey]: id,\n              },\n            });\n          }\n          // if the node is allowed, we don't want to use the same id\n          if (id) {\n            delete (operation.properties as any)[idKey];\n          }\n        }\n\n        return apply(operation);\n      },\n\n      insertNode(node) {\n        const { disableInsertOverrides, idKey = '' } = getOptions();\n\n        if (!disableInsertOverrides && node[idKey]) {\n          if (!Object.isExtensible(node)) {\n            node = cloneDeep(node);\n          }\n\n          node._id = node[idKey];\n        }\n\n        insertNode(node);\n      },\n\n      insertNodes(_nodes, options) {\n        const nodes = castArray<Descendant>(_nodes as any).filter(\n          (node) => !!node\n        );\n\n        if (nodes.length === 0) return;\n\n        const { disableInsertOverrides, idKey = '' } = getOptions();\n\n        insertNodes(\n          nodes.map((node) => {\n            if (!disableInsertOverrides && node[idKey]) {\n              if (!Object.isExtensible(node)) {\n                node = cloneDeep(node);\n              }\n\n              node._id = node[idKey];\n            }\n\n            return node;\n          }),\n          options\n        );\n      },\n    },\n  };\n};\n","import { type OmitFirst, bindFirst } from '@udecode/utils';\n\nimport { type PluginConfig, createSlatePlugin } from '../../plugin';\nimport { init } from './transforms/init';\nimport { insertExitBreak } from './transforms/insertExitBreak';\nimport { resetBlock } from './transforms/resetBlock';\nimport { setValue } from './transforms/setValue';\n\nexport type SlateExtensionConfig = PluginConfig<\n  'slateExtension',\n  {},\n  {},\n  {\n    init: OmitFirst<typeof init>;\n    insertExitBreak: OmitFirst<typeof insertExitBreak>;\n    resetBlock: OmitFirst<typeof resetBlock>;\n    setValue: OmitFirst<typeof setValue>;\n  }\n>;\n\n/** Opinionated extension of slate default behavior. */\nexport const SlateExtensionPlugin = createSlatePlugin({\n  key: 'slateExtension',\n}).extendEditorTransforms(({ editor }) => ({\n  /**\n   * Initialize the editor value, selection and normalization. Set `value` to\n   * `null` to skip children initialization.\n   */\n  init: bindFirst(init, editor),\n  insertExitBreak: bindFirst(insertExitBreak, editor),\n  resetBlock: bindFirst(resetBlock, editor),\n  setValue: bindFirst(setValue, editor),\n}));\n","import type { SlateEditor } from '../../lib/editor';\n\nimport { getEditorPlugin } from '../../lib/plugin';\nimport { isEditOnly } from './isEditOnlyDisabled';\n\n/** Normalize initial value from editor plugins. Set into plate store if diff. */\nexport const pipeNormalizeInitialValue = (editor: SlateEditor) => {\n  editor.meta.pluginCache.normalizeInitialValue.forEach((key) => {\n    const p = editor.getPlugin({ key });\n\n    if (isEditOnly(editor.dom.readOnly, p, 'normalizeInitialValue')) {\n      return;\n    }\n\n    p.normalizeInitialValue?.({\n      ...getEditorPlugin(editor, p),\n      value: editor.children,\n    } as any);\n  });\n};\n","import type { EditorTransforms, TSelection, Value } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { pipeNormalizeInitialValue } from '../../../../internal/plugin/pipeNormalizeInitialValue';\n\n// import { pipeNormalizeInitialValue } from '../../../../internal/plugin/pipeNormalizeInitialValue';\n\nexport type InitOptions = {\n  autoSelect?: boolean | 'end' | 'start';\n  selection?: TSelection;\n  shouldNormalizeEditor?: boolean;\n  value?: any;\n};\n\nexport const init = async (\n  editor: SlateEditor,\n  { autoSelect, selection, shouldNormalizeEditor, value }: InitOptions\n) => {\n  if (value !== null) {\n    if (typeof value === 'string') {\n      editor.children = editor.api.html.deserialize({\n        element: value,\n      }) as Value;\n    } else if (typeof value === 'function') {\n      editor.children = await value(editor);\n    } else if (value) {\n      editor.children = value;\n    }\n    if (!editor.children || editor.children?.length === 0) {\n      editor.children = editor.api.create.value();\n    }\n  }\n\n  if (selection) {\n    editor.selection = selection;\n  } else if (autoSelect) {\n    const edge = autoSelect === 'start' ? 'start' : 'end';\n    const target = edge === 'start' ? editor.api.start([]) : editor.api.end([]);\n\n    editor.tf.select(target!);\n  }\n  if (editor.children.length > 0) {\n    pipeNormalizeInitialValue(editor);\n  }\n  if (shouldNormalizeEditor) {\n    (editor.tf as EditorTransforms).normalize({ force: true });\n  }\n};\n","import {\n  type EditorAboveOptions,\n  combineMatchOptions,\n  PathApi,\n} from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { getPluginTypes } from '../../../plugin/getSlatePlugin';\n\nexport type InsertExitBreakOptions = {\n  match?: EditorAboveOptions['match'];\n  reverse?: boolean;\n};\n\n/**\n * Exits the current block structure by creating a new block next to the\n * appropriate ancestor.\n *\n * This function automatically determines the exit point by finding the first\n * ancestor that doesn't have strict sibling constraints (`isStrictSiblings:\n * false`), allowing standard text blocks to be inserted as siblings.\n *\n * For example:\n *\n * - In `column_group > column > codeblock > codeline`, exits after `codeblock`,\n *   then after `column_group`\n * - In `table > tr > td > p`, exits after `table`\n */\nexport const insertExitBreak = (\n  editor: SlateEditor,\n  { match, reverse }: InsertExitBreakOptions = {}\n) => {\n  if (!editor.selection || !editor.api.isCollapsed()) return;\n\n  const block = editor.api.block();\n\n  if (!block) return;\n\n  // Find the nearest ancestor that allows arbitrary block siblings (isStrictSiblings: false)\n  // We traverse up the tree until we find an element that can have paragraph siblings\n  const target = editor.api.above({\n    at: block[1],\n    match: combineMatchOptions(\n      editor,\n      (n, p) =>\n        p.length === 1 ||\n        (p.length > 1 &&\n          !!n.type &&\n          !getPluginTypes(\n            editor,\n            editor.meta.pluginCache.node.isStrictSiblings\n          ).includes(n.type as string)),\n      { match }\n    ),\n  });\n\n  const ancestorPath = target?.[1] ?? block[1];\n\n  const targetPath = reverse ? ancestorPath : PathApi.next(ancestorPath);\n\n  if (!targetPath) return;\n\n  editor.tf.insertNodes(editor.api.create.block(), {\n    at: targetPath,\n    select: true,\n  });\n\n  return true;\n};\n","import { type Path, NodeApi } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { BaseParagraphPlugin } from '../../paragraph';\n\n/**\n * Reset the current block to a paragraph, removing all properties except id and\n * type.\n */\nexport const resetBlock = (editor: SlateEditor, { at }: { at?: Path } = {}) => {\n  const entry = editor.api.block({ at });\n  if (!entry?.[0]) return;\n\n  const [block, path] = entry;\n\n  editor.tf.withoutNormalizing(() => {\n    // Extract only id and type, unset all other properties\n    const { id, type, ...otherProps } = NodeApi.extractProps(block);\n\n    // Unset all properties except id and type\n    Object.keys(otherProps).forEach((key) => {\n      editor.tf.unsetNodes(key, { at: path });\n    });\n\n    const paragraphType = editor.getType(BaseParagraphPlugin.key);\n\n    if (block.type !== paragraphType) {\n      // Set the new type to paragraph\n      editor.tf.setNodes({ type: paragraphType }, { at: path });\n    }\n  });\n\n  return true;\n};\n","import type { Descendant, EditorTransforms, Value } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\n\nexport const setValue = <V extends Value>(\n  editor: SlateEditor,\n  value?: V | string\n) => {\n  let children: Descendant[] = value as any;\n\n  if (typeof value === 'string') {\n    children = editor.api.html.deserialize({\n      element: value,\n    });\n  } else if (!value || value.length === 0) {\n    children = editor.api.create.value();\n  }\n\n  (editor.tf as EditorTransforms).replaceNodes(children, {\n    at: [],\n    children: true,\n  });\n};\n","import type { SlateEditor } from '../editor';\nimport type { ParserOptions } from '../plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Is the plugin disabled by another plugin. */\nexport const pipeInsertDataQuery = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { data, dataTransfer }: ParserOptions\n) =>\n  plugins.every((p) => {\n    const query = p.parser?.query;\n\n    return (\n      !query ||\n      query({\n        ...getEditorPlugin(editor, p as any),\n        data,\n        dataTransfer,\n      })\n    );\n  });\n","import { pipeInsertFragment } from '../../internal/plugin/pipeInsertFragment';\nimport { pipeTransformData } from '../../internal/plugin/pipeTransformData';\nimport { pipeTransformFragment } from '../../internal/plugin/pipeTransformFragment';\nimport { createSlatePlugin, getEditorPlugin } from '../plugin';\nimport { getInjectedPlugins } from '../utils';\nimport { pipeInsertDataQuery } from '../utils/pipeInsertDataQuery';\n\nexport const ParserPlugin = createSlatePlugin({\n  key: 'parser',\n}).overrideEditor(({ editor, tf: { insertData } }) => ({\n  transforms: {\n    insertData(dataTransfer: DataTransfer) {\n      const inserted = [...editor.meta.pluginList].reverse().some((plugin) => {\n        const parser = plugin.parser;\n\n        if (!parser) return false;\n\n        const injectedPlugins = getInjectedPlugins(editor, plugin);\n        const { deserialize, format, mimeTypes } = parser;\n\n        if (!format) return false;\n\n        // Handle both string and string[] formats\n        const formats = Array.isArray(format) ? format : [format];\n        const mimeTypeList =\n          mimeTypes ||\n          formats.map((fmt) => (fmt.includes('/') ? fmt : `text/${fmt}`));\n\n        for (const mimeType of mimeTypeList) {\n          let data = dataTransfer.getData(mimeType);\n\n          if (!data) continue;\n          if (\n            !pipeInsertDataQuery(editor, injectedPlugins, {\n              data,\n              dataTransfer,\n            })\n          ) {\n            continue;\n          }\n\n          data = pipeTransformData(editor, injectedPlugins, {\n            data,\n            dataTransfer,\n          });\n\n          let fragment = deserialize?.({\n            ...getEditorPlugin(editor, plugin),\n            data,\n            dataTransfer,\n          });\n\n          if (!fragment?.length) continue;\n\n          fragment = pipeTransformFragment(editor, injectedPlugins, {\n            data,\n            dataTransfer,\n            fragment,\n          });\n\n          if (fragment.length === 0) continue;\n\n          pipeInsertFragment(editor, injectedPlugins, {\n            data,\n            dataTransfer,\n            fragment,\n          });\n\n          return true;\n        }\n\n        return false;\n      });\n\n      if (inserted) return;\n\n      insertData(dataTransfer);\n    },\n  },\n}));\n","/* eslint-disable perfectionist/sort-imports */\nimport type { AnyPluginConfig, PluginConfig } from '../plugin/BasePlugin';\nimport type { SlatePlugin } from '../plugin/SlatePlugin';\n\nimport { AstPlugin } from './AstPlugin';\nimport { HistoryPlugin } from './HistoryPlugin';\nimport { OverridePlugin } from './override/OverridePlugin';\nimport { ParserPlugin } from './ParserPlugin';\nimport { type DebugErrorType, type LogLevel, DebugPlugin } from './debug';\nimport { DOMPlugin } from './dom';\nimport { HtmlPlugin } from './html';\nimport { LengthPlugin } from './length';\nimport { AffinityPlugin } from './affinity';\nimport { type NodeIdConfig, NodeIdPlugin } from './node-id/NodeIdPlugin';\nimport { BaseParagraphPlugin } from './paragraph';\nimport {\n  type SlateExtensionConfig,\n  SlateExtensionPlugin,\n} from './slate-extension';\n\nexport type CorePlugin = ReturnType<typeof getCorePlugins>[number];\n\nexport type GetCorePluginsOptions = {\n  /** Enable mark/element affinity. */\n  affinity?: boolean;\n  /** Specifies the maximum number of characters allowed in the editor. */\n  maxLength?: number;\n  /** Configure the node id plugin. */\n  nodeId?: NodeIdConfig['options'] | boolean;\n  /** Override the core plugins using the same key. */\n  plugins?: AnyPluginConfig[];\n};\n\nexport const getCorePlugins = ({\n  affinity,\n  maxLength,\n  nodeId,\n  plugins = [],\n}: GetCorePluginsOptions) => {\n  // Disable nodeId by default in test environment for deterministic tests\n  let resolvedNodeId: any = nodeId;\n  if (process.env.NODE_ENV === 'test' && nodeId === undefined) {\n    resolvedNodeId = false;\n  }\n\n  let corePlugins = [\n    DebugPlugin as SlatePlugin<DebugConfig>,\n    SlateExtensionPlugin,\n    DOMPlugin,\n    HistoryPlugin,\n    OverridePlugin,\n    ParserPlugin,\n    maxLength\n      ? LengthPlugin.configure({ options: { maxLength } })\n      : LengthPlugin,\n    HtmlPlugin,\n    AstPlugin,\n    NodeIdPlugin.configure({\n      enabled: resolvedNodeId !== false,\n      options: resolvedNodeId === false ? undefined : resolvedNodeId,\n    }),\n    AffinityPlugin.configure({ enabled: affinity }),\n    BaseParagraphPlugin,\n  ];\n\n  // Create a map for quick lookup of custom plugins\n  const customPluginsMap = new Map(\n    plugins.map((plugin) => [plugin.key, plugin])\n  );\n\n  // Replace core plugins with custom plugins if they exist and remove them from plugins\n  corePlugins = corePlugins.map((corePlugin) => {\n    const customPlugin = customPluginsMap.get(corePlugin.key);\n\n    if (customPlugin) {\n      // Remove the custom plugin from the plugins array\n      const index = plugins.findIndex((p) => p.key === corePlugin.key);\n\n      if (index !== -1) {\n        plugins.splice(index, 1);\n      }\n\n      return customPlugin;\n    }\n\n    return corePlugin as any;\n  });\n\n  return corePlugins;\n};\n\nexport type CorePluginTransforms = SlateExtensionConfig['transforms'];\nexport type CorePluginApi = SlateExtensionConfig['api'];\n\nexport type DebugConfig = PluginConfig<\n  'debug',\n  {\n    isProduction: boolean;\n    logger: Partial<Record<LogLevel, LogFunction>>;\n    logLevel: LogLevel;\n    throwErrors: boolean;\n  },\n  {\n    debug: {\n      error: (\n        message: string | unknown,\n        type?: DebugErrorType,\n        details?: any\n      ) => void;\n      info: (message: string, type?: DebugErrorType, details?: any) => void;\n      log: (message: string, type?: DebugErrorType, details?: any) => void;\n      warn: (message: string, type?: DebugErrorType, details?: any) => void;\n    };\n  }\n>;\n\nexport type LengthConfig = PluginConfig<\n  'length',\n  {\n    maxLength: number;\n  }\n>;\n\ntype LogFunction = (\n  message: string,\n  type?: DebugErrorType,\n  details?: any\n) => void;\n","export type { TStateApi as ZustandStoreApi } from 'zustand-x';\n\nexport { createZustandStore } from 'zustand-x';\n","import { isDefined } from '@udecode/utils';\n\nimport { Hotkeys, SlateExtensionPlugin } from '../../lib';\nimport { toPlatePlugin } from '../plugin';\n\nexport const SlateReactExtensionPlugin = toPlatePlugin(SlateExtensionPlugin, {\n  handlers: {\n    onKeyDown: ({ editor, event }: any) => {\n      // React 16.x needs this event to be persistented due to it's event pooling implementation.\n      // https://reactjs.org/docs/legacy-event-pooling.html\n      event.persist();\n      editor.dom.currentKeyboardEvent = event;\n\n      if (Hotkeys.isMoveUpward(event)) {\n        if (editor.tf.moveLine({ reverse: true })) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      } else if (Hotkeys.isMoveDownward(event)) {\n        if (editor.tf.moveLine({ reverse: false })) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      } else if (\n        Hotkeys.isTab(editor, event) ||\n        Hotkeys.isUntab(editor, event)\n      ) {\n        if (editor.tf.tab({ reverse: Hotkeys.isUntab(editor, event) })) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      } else if (Hotkeys.isSelectAll(event)) {\n        if (editor.tf.selectAll()) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      } else if (Hotkeys.isEscape(event) && editor.tf.escape()) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n  },\n})\n  .extendEditorApi(({ editor }) => ({\n    redecorate: () => {\n      editor.api.debug.warn(\n        `The method editor.api.redecorate() has not been overridden. ` +\n          `This may cause unexpected behavior. Please ensure that all required editor methods are properly defined.`,\n        'OVERRIDE_MISSING'\n      );\n    },\n  }))\n  .extendEditorTransforms(({ editor, tf: { reset } }) => ({\n    reset(options) {\n      const isFocused = editor.api.isFocused();\n\n      reset(options);\n\n      if (isFocused) {\n        editor.tf.focus({ edge: 'startEditor' });\n      }\n    },\n  }))\n  .overrideEditor(({ editor, tf: { normalizeNode } }) => ({\n    transforms: {\n      normalizeNode(entry, options) {\n        if (isDefined(entry[0]._memo)) {\n          editor.tf.unsetNodes('_memo', { at: entry[1] });\n\n          return;\n        }\n\n        normalizeNode(entry, options);\n      },\n    },\n  }));\n","import type {\n  AnyPluginConfig,\n  InferApi,\n  InferOptions,\n  InferSelectors,\n  InferTransforms,\n  PluginConfig,\n  SlatePlugin,\n} from '../../lib';\nimport type {\n  PlatePlugin,\n  PlatePluginContext,\n  PlatePluginMethods,\n} from './PlatePlugin';\n\ntype PlatePluginConfig<\n  C extends AnyPluginConfig,\n  EO = {},\n  EA = {},\n  ET = {},\n  ES = {},\n> = Omit<\n  Partial<\n    PlatePlugin<\n      PluginConfig<\n        C['key'],\n        EO & InferOptions<C>,\n        EA & InferApi<C>,\n        ET & InferTransforms<C>,\n        ES & InferSelectors<C>\n      >\n    >\n  >,\n  keyof PlatePluginMethods | 'api' | 'node' | 'options' | 'transforms'\n> & {\n  api?: EA & Partial<InferApi<C>>;\n  node?: Partial<PlatePlugin<C>['node']>;\n  options?: EO & Partial<InferOptions<C>>;\n  selectors?: ES & Partial<InferSelectors<C>>;\n  transforms?: ET & Partial<InferTransforms<C>>;\n};\n\nconst methodsToWrap: (keyof SlatePlugin)[] = [\n  'configure',\n  'configurePlugin',\n  'extendEditorApi',\n  'extendSelectors',\n  'extendApi',\n  'extendEditorTransforms',\n  'extendTransforms',\n  'overrideEditor',\n  'extend',\n  'extendPlugin',\n];\n\n/**\n * Extends a SlatePlugin to create a React PlatePlugin.\n *\n * @remarks\n *   This function transforms a SlatePlugin into a React PlatePlugin, allowing for\n *   React-specific functionality to be added.\n * @param basePlugin - The base SlatePlugin to be extended.\n * @param extendConfig - A function or object that provides the extension\n *   configuration. If a function, it receives the plugin context and should\n *   return a partial PlatePlugin. If an object, it should be a partial\n *   PlatePlugin configuration.\n * @returns A new PlatePlugin that combines the base SlatePlugin functionality\n *   with React-specific features defined in the extension configuration.\n */\nexport function toPlatePlugin<\n  C extends AnyPluginConfig,\n  EO = {},\n  EA = {},\n  ET = {},\n  ES = {},\n>(\n  basePlugin: SlatePlugin<C>,\n  extendConfig?:\n    | ((ctx: PlatePluginContext<C>) => PlatePluginConfig<C, EO, EA, ET>)\n    | PlatePluginConfig<C, EO, EA, ET>\n): PlatePlugin<\n  PluginConfig<\n    C['key'],\n    EO & InferOptions<C>,\n    EA & InferApi<C>,\n    ET & InferTransforms<C>,\n    ES & InferSelectors<C>\n  >\n> {\n  const plugin = { ...basePlugin } as unknown as PlatePlugin;\n\n  methodsToWrap.forEach((method) => {\n    const originalMethod = plugin[method];\n\n    (plugin as any)[method] = (...args: any[]) => {\n      const slatePlugin = originalMethod(...args);\n\n      return toPlatePlugin(slatePlugin);\n    };\n  });\n\n  if (!extendConfig) return plugin as any;\n\n  const extendedPlugin = plugin.extend(extendConfig as any);\n\n  return extendedPlugin as any;\n}\n\ntype ExtendPluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    PlatePlugin<\n      PluginConfig<\n        C['key'],\n        Partial<InferOptions<C>>,\n        Partial<InferApi<C>>,\n        Partial<InferTransforms<C>>\n      >\n    >\n  >,\n  keyof PlatePluginMethods\n>;\n\n/**\n * Explicitly typed version of {@link toPlatePlugin}.\n *\n * @remarks\n *   This function requires explicit type parameters for both the base plugin\n *   configuration and the extension configuration. Use this when you need\n *   precise control over the plugin's type structure or when type inference\n *   doesn't provide the desired result.\n * @typeParam C - The type of the extension configuration for the PlatePlugin\n *   (required).\n * @typeParam TContext - The type of the base SlatePlugin configuration\n *   (optional).\n */\nexport function toTPlatePlugin<\n  C extends AnyPluginConfig = PluginConfig,\n  TContext extends AnyPluginConfig = AnyPluginConfig,\n>(\n  basePlugin: SlatePlugin<TContext>,\n  extendConfig?:\n    | ((ctx: PlatePluginContext<TContext>) => ExtendPluginConfig<C>)\n    | ExtendPluginConfig<C>\n): PlatePlugin<\n  PluginConfig<\n    C['key'],\n    InferOptions<C>,\n    InferApi<C>,\n    InferTransforms<C>,\n    InferSelectors<C>\n  >\n> {\n  return toPlatePlugin(basePlugin as any, extendConfig as any);\n}\n","import type { Modify } from '@udecode/utils';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { PlatePlugin, PlatePluginMethods } from './PlatePlugin';\n\nimport {\n  type AnyPluginConfig,\n  type PluginConfig,\n  createSlatePlugin,\n} from '../../lib';\nimport { toPlatePlugin } from './toPlatePlugin';\n\ntype PlatePluginConfig<\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n  S = {},\n> = Omit<\n  Partial<\n    Modify<\n      PlatePlugin<PluginConfig<K, O, A, T, S>>,\n      {\n        node: Partial<PlatePlugin<PluginConfig<K, O, A, T, S>>['node']>;\n      }\n    >\n  >,\n  keyof PlatePluginMethods | 'optionsStore' | 'useOptionsStore'\n>;\n\ntype TPlatePluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    Modify<\n      PlatePlugin<C>,\n      {\n        node: Partial<PlatePlugin<C>['node']>;\n      }\n    >\n  >,\n  keyof PlatePluginMethods | 'optionsStore' | 'useOptionsStore'\n>;\n\nexport const createPlatePlugin = <\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n  S = {},\n>(\n  config:\n    | ((editor: PlateEditor) => PlatePluginConfig<K, O, A, T, S>)\n    | PlatePluginConfig<K, O, A, T, S> = {}\n): PlatePlugin<PluginConfig<K, O, A, T, S>> => {\n  const plugin = createSlatePlugin(config as any);\n\n  return toPlatePlugin(plugin as any) as any;\n};\n\n/**\n * Explicitly typed version of `createPlatePlugin`.\n *\n * @remarks\n *   While `createPlatePlugin` uses type inference, this function requires an\n *   explicit type parameter. Use this when you need precise control over the\n *   plugin's type structure or when type inference doesn't provide the desired\n *   result.\n */\nexport function createTPlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  config:\n    | ((editor: PlateEditor) => TPlatePluginConfig<C>)\n    | TPlatePluginConfig<C> = {}\n): PlatePlugin<C> {\n  return createPlatePlugin(config as any) as any;\n}\n","import type { PlateEditor } from '../editor';\nimport type {\n  InferConfig,\n  PlatePlugin,\n  PlatePluginContext,\n} from './PlatePlugin';\n\nimport {\n  type AnyPluginConfig,\n  type WithRequiredKey,\n  getEditorPlugin as getBaseEditorPlugin,\n} from '../../lib';\n\nexport function getEditorPlugin<\n  P extends AnyPluginConfig | PlatePlugin<AnyPluginConfig>,\n>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<P>\n): PlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>> {\n  return getBaseEditorPlugin(editor, plugin) as any;\n}\n","import type { AnyPluginConfig, PluginConfig, WithRequiredKey } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { PlatePlugin } from './PlatePlugin';\n\nimport { createPlatePlugin } from './createPlatePlugin';\n\n/** Get editor plugin by key or plugin object. */\nexport function getPlugin<C extends AnyPluginConfig = PluginConfig>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<C>\n): C extends { node: any } ? C : PlatePlugin<C> {\n  return (\n    (editor.plugins[plugin.key] as any) ??\n    createPlatePlugin({ key: plugin.key })\n  );\n}\n","import type { AnyPlatePlugin, PlatePluginContext } from './PlatePlugin';\n\nexport const omitPluginContext = <T extends PlatePluginContext<AnyPlatePlugin>>(\n  ctx: T\n) => {\n  const {\n    api,\n    editor,\n    getOption,\n    getOptions,\n    plugin,\n    setOption,\n    setOptions,\n    tf,\n    type,\n    ...rest\n  } = ctx;\n\n  return rest;\n};\n","import { createZustandStore } from '../../../lib';\n\nexport type EventEditorState = {\n  /** Last editor id that has been blurred. */\n  blur: string | null;\n  /** Editor id that is currently being focused. */\n  focus: string | null;\n  /** Last editor id. */\n  last: string | null;\n};\n\n/** Store where the keys are event names and the values are editor ids. */\nexport const EventEditorStore = createZustandStore(\n  {\n    blur: null,\n    focus: null,\n    last: null,\n  } as EventEditorState,\n  {\n    mutative: true,\n    name: 'event-editor',\n  }\n);\n\nexport const { useValue: useEventEditorValue } = EventEditorStore;\n","import { useEffect } from 'react';\n\nimport type { PlateEditor } from '../../editor/PlateEditor';\n\nexport const FOCUS_EDITOR_EVENT = 'focus-editor-event';\n\nexport const BLUR_EDITOR_EVENT = 'blur-editor-event';\n\nexport const useFocusEditorEvents = ({\n  editorRef,\n  onEditorBlur,\n  onEditorFocus,\n}: {\n  editorRef: PlateEditor | null;\n  onEditorBlur?: () => void;\n  onEditorFocus?: () => void;\n}) => {\n  useEffect(() => {\n    const onFocusEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorFocus && editorRef && editorRef.id === id) {\n        onEditorFocus();\n      }\n    };\n    const onBlurEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorBlur && editorRef && editorRef.id === id) {\n        onEditorBlur();\n      }\n    };\n\n    document.addEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n    document.addEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n\n    return () => {\n      document.removeEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n      document.removeEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n    };\n  }, [editorRef, onEditorBlur, onEditorFocus]);\n};\n","import { createPlatePlugin } from '../../plugin';\nimport { EventEditorStore } from './EventEditorStore';\nimport { BLUR_EDITOR_EVENT, FOCUS_EDITOR_EVENT } from './useFocusEditorEvents';\n\nexport const EventEditorPlugin = createPlatePlugin({\n  key: 'eventEditor',\n  handlers: {\n    onBlur: ({ editor }) => {\n      const focus = EventEditorStore.get('focus');\n\n      if (focus === editor.id) {\n        EventEditorStore.set('focus', null);\n      }\n\n      EventEditorStore.set('blur', editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(BLUR_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n    onFocus: ({ editor }) => {\n      EventEditorStore.set('focus', editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(FOCUS_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n  },\n});\n","import { EventEditorStore } from './EventEditorStore';\n\nexport const getEventPlateId = (id?: string) => {\n  if (id) return id;\n\n  const focus = EventEditorStore.get('focus');\n\n  if (focus) return focus;\n\n  const blur = EventEditorStore.get('blur');\n\n  if (blur) return blur;\n\n  return EventEditorStore.get('last') ?? 'plate';\n};\n","import { Key } from '@udecode/react-hotkeys';\n\nimport { BaseParagraphPlugin } from '../../../lib';\nimport { toPlatePlugin } from '../../plugin/toPlatePlugin';\n\nexport const ParagraphPlugin = toPlatePlugin(\n  BaseParagraphPlugin,\n  ({ editor, type }) => ({\n    shortcuts: {\n      toggleParagraph: {\n        keys: [\n          [Key.Mod, Key.Alt, '0'],\n          [Key.Mod, Key.Shift, '0'],\n        ],\n        preventDefault: true,\n        handler: () => {\n          editor.tf.toggleBlock(type);\n        },\n      },\n    },\n  })\n);\n","import type { DomConfig, ExtendEditor } from '../../../lib';\n\nimport { withReact } from '../../slate-react';\n\nexport const withPlateReact: ExtendEditor<DomConfig> = ({ editor }) => {\n  return withReact(editor as any);\n};\n","import { DOMPlugin } from '../../../lib';\nimport { toPlatePlugin } from '../../plugin/toPlatePlugin';\nimport { withPlateReact } from './withPlateReact';\n\n/** @see {@link withReact} */\nexport const ReactPlugin = toPlatePlugin(DOMPlugin, {\n  key: 'dom',\n  extendEditor: withPlateReact as any,\n});\n","import { ParagraphPlugin, ReactPlugin } from '../plugins';\nimport { EventEditorPlugin } from '../plugins/event-editor/EventEditorPlugin';\nimport { SlateReactExtensionPlugin } from '../plugins/SlateReactExtensionPlugin';\n\nexport const getPlateCorePlugins = () => [\n  SlateReactExtensionPlugin,\n  ReactPlugin,\n  EventEditorPlugin,\n  ParagraphPlugin,\n];\n","import type { LegacyEditorMethods } from '@udecode/slate';\n\nimport {\n  type CreatePlateEditorOptions,\n  createPlateEditor,\n} from '../editor/withPlate';\n\nexport const createPlateFallbackEditor = (\n  options: CreatePlateEditorOptions = {}\n) => {\n  const editor = createPlateEditor(options);\n\n  editor.meta.isFallback = true;\n\n  (editor as typeof editor & LegacyEditorMethods).apply = () => {\n    throw new Error(\n      'Cannot apply operations on the fallback editor. The fallback editor is used when a hook that depends on the Plate store was unable to locate a valid store. If you are using PlateController, use `useEditorMounted(id?: string)` or `!editor.meta.isFallback` to ensure that a valid Plate store is available before attempting to call operations on the editor.'\n    );\n  };\n\n  return editor;\n};\n","import type { DOMHandlers } from '../plugin/DOMHandlers';\n\nexport const DOM_HANDLERS: (keyof DOMHandlers)[] = [\n  // Clipboard Events\n  'onCopy',\n  'onCopyCapture',\n  'onCut',\n  'onCutCapture',\n  'onPaste',\n  'onPasteCapture',\n\n  // Composition Events\n  'onCompositionEnd',\n  'onCompositionEndCapture',\n  'onCompositionStart',\n  'onCompositionStartCapture',\n  'onCompositionUpdate',\n  'onCompositionUpdateCapture',\n\n  // Focus Events\n  'onFocus',\n  'onFocusCapture',\n  'onBlur',\n  'onBlurCapture',\n\n  // Form Events\n  'onDOMBeforeInput',\n  'onBeforeInput',\n  'onBeforeInputCapture',\n  'onInput',\n  'onInputCapture',\n  'onReset',\n  'onResetCapture',\n  'onSubmit',\n  'onSubmitCapture',\n  'onInvalid',\n  'onInvalidCapture',\n\n  // Image Events\n  'onLoad',\n  'onLoadCapture',\n\n  // Keyboard Events\n  'onKeyDown',\n  'onKeyDownCapture',\n  'onKeyPress',\n  'onKeyPressCapture',\n  'onKeyUp',\n  'onKeyUpCapture',\n\n  // Media Events\n  'onAbort',\n  'onAbortCapture',\n  'onCanPlay',\n  'onCanPlayCapture',\n  'onCanPlayThrough',\n  'onCanPlayThroughCapture',\n  'onDurationChange',\n  'onDurationChangeCapture',\n  'onEmptied',\n  'onEmptiedCapture',\n  'onEncrypted',\n  'onEncryptedCapture',\n  'onEnded',\n  'onEndedCapture',\n  'onLoadedData',\n  'onLoadedDataCapture',\n  'onLoadedMetadata',\n  'onLoadedMetadataCapture',\n  'onLoadStart',\n  'onLoadStartCapture',\n  'onPause',\n  'onPauseCapture',\n  'onPlay',\n  'onPlayCapture',\n  'onPlaying',\n  'onPlayingCapture',\n  'onProgress',\n  'onProgressCapture',\n  'onRateChange',\n  'onRateChangeCapture',\n  'onSeeked',\n  'onSeekedCapture',\n  'onSeeking',\n  'onSeekingCapture',\n  'onStalled',\n  'onStalledCapture',\n  'onSuspend',\n  'onSuspendCapture',\n  'onTimeUpdate',\n  'onTimeUpdateCapture',\n  'onVolumeChange',\n  'onVolumeChangeCapture',\n  'onWaiting',\n  'onWaitingCapture',\n\n  // MouseEvents\n  'onAuxClick',\n  'onAuxClickCapture',\n  'onClick',\n  'onClickCapture',\n  'onContextMenu',\n  'onContextMenuCapture',\n  'onDoubleClick',\n  'onDoubleClickCapture',\n  'onDrag',\n  'onDragCapture',\n  'onDragEnd',\n  'onDragEndCapture',\n  'onDragEnter',\n  'onDragEnterCapture',\n  'onDragExit',\n  'onDragExitCapture',\n  'onDragLeave',\n  'onDragLeaveCapture',\n  'onDragOver',\n  'onDragOverCapture',\n  'onDragStart',\n  'onDragStartCapture',\n  'onDrop',\n  'onDropCapture',\n  'onMouseDown',\n  'onMouseDownCapture',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseMoveCapture',\n  'onMouseOut',\n  'onMouseOutCapture',\n  'onMouseOver',\n  'onMouseOverCapture',\n  'onMouseUp',\n  'onMouseUpCapture',\n\n  // Selection Events\n  'onSelect',\n  'onSelectCapture',\n\n  // Touch Events\n  'onTouchCancel',\n  'onTouchCancelCapture',\n  'onTouchEnd',\n  'onTouchEndCapture',\n  'onTouchMove',\n  'onTouchMoveCapture',\n  'onTouchStart',\n  'onTouchStartCapture',\n\n  // Pointer Events\n  'onPointerDown',\n  'onPointerDownCapture',\n  'onPointerMove',\n  'onPointerUp',\n  'onPointerUpCapture',\n  'onPointerCancel',\n  'onPointerCancelCapture',\n  'onPointerEnter',\n  'onPointerLeave',\n  'onPointerOver',\n  'onPointerOverCapture',\n  'onPointerOut',\n  'onPointerOutCapture',\n  'onGotPointerCapture',\n  'onGotPointerCaptureCapture',\n  'onLostPointerCapture',\n  'onLostPointerCaptureCapture',\n\n  // UI Events\n  'onScroll',\n  'onScrollCapture',\n\n  // Wheel Events\n  'onWheel',\n  'onWheelCapture',\n\n  // Animation Events\n  'onAnimationStart',\n  'onAnimationStartCapture',\n  'onAnimationEnd',\n  'onAnimationEndCapture',\n  'onAnimationIteration',\n  'onAnimationIterationCapture',\n\n  // Transition Events\n  'onTransitionEnd',\n  'onTransitionEndCapture',\n];\n","import type { AnyObject } from '@udecode/utils';\n\nimport { clsx } from 'clsx';\n\nimport type { PlateHTMLProps } from '../components';\nimport type { PlateEditor } from '../editor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { pipeInjectNodeProps } from '../../internal/plugin/pipeInjectNodeProps';\nimport { getSlateClass } from '../../lib';\nimport { getPluginNodeProps } from '../../lib/utils/getPluginNodeProps';\nimport { getEditorPlugin } from '../plugin';\n\n/**\n * Override node props with plugin props. Allowed properties in\n * `props.element.attributes` are passed into `props.attributes`. Extend the\n * class name with the node type.\n */\nexport const getRenderNodeProps = ({\n  attributes: nodeAttributes,\n  editor,\n  plugin,\n  props,\n  readOnly,\n}: {\n  editor: PlateEditor;\n  props: PlateHTMLProps;\n  attributes?: AnyObject;\n  plugin?: AnyEditorPlatePlugin;\n  readOnly?: boolean;\n}): PlateHTMLProps => {\n  let newProps = {\n    ...props,\n    ...(plugin\n      ? (getEditorPlugin(editor, plugin) as any)\n      : {\n          api: editor.api,\n          editor,\n          tf: editor.transforms,\n        }),\n  };\n\n  const { className } = props;\n\n  const pluginProps = getPluginNodeProps({\n    attributes: nodeAttributes,\n    plugin: plugin as any,\n    props: newProps as any,\n  });\n\n  newProps = {\n    ...pluginProps,\n    attributes: {\n      ...pluginProps.attributes,\n      className:\n        clsx(\n          getSlateClass(plugin?.node.type),\n          pluginProps.attributes?.className,\n          className\n        ) || undefined,\n    },\n  };\n\n  newProps = pipeInjectNodeProps(\n    editor,\n    newProps,\n    (node) => editor.api.findPath(node)!,\n    readOnly\n  ) as PlateHTMLProps;\n\n  if (\n    newProps.attributes?.style &&\n    Object.keys(newProps.attributes.style).length === 0\n  ) {\n    delete newProps.attributes.style;\n  }\n\n  return newProps;\n};\n","import type React from 'react';\n\nimport type { EditableProps } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { DOMHandlers } from '../plugin/DOMHandlers';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { getEditorPlugin } from '../plugin/getEditorPlugin';\n\nexport const convertDomEventToSyntheticEvent = (\n  domEvent: Event\n): React.SyntheticEvent<unknown, unknown> => {\n  let propagationStopped = false;\n\n  return {\n    ...domEvent,\n    bubbles: domEvent.bubbles,\n    cancelable: domEvent.cancelable,\n    currentTarget: domEvent.currentTarget!,\n    defaultPrevented: domEvent.defaultPrevented,\n    eventPhase: domEvent.eventPhase,\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: domEvent,\n    target: domEvent.target!,\n    timeStamp: domEvent.timeStamp,\n    type: domEvent.type,\n    isDefaultPrevented: () => domEvent.defaultPrevented,\n    isPropagationStopped: () => propagationStopped,\n    persist: () => {\n      throw new Error(\n        'persist is not implemented for synthetic events created using convertDomEventToSyntheticEvent'\n      );\n    },\n    preventDefault: () => domEvent.preventDefault(),\n    stopPropagation: () => {\n      propagationStopped = true;\n      domEvent.stopPropagation();\n    },\n  };\n};\n\n/** Check if an event is overrided by a handler. */\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>,\n>(\n  event: EventType,\n  handler?: (event: EventType) => boolean | void\n) => {\n  if (!handler) {\n    return false;\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isPropagationStopped();\n};\n\n/**\n * Generic pipe for handlers.\n *\n * - Get all the plugins handlers by `handlerKey`.\n * - If there is no plugin handler or editable prop handler for this key, return\n *   `undefined`.\n * - Return a handler calling all the plugins handlers then the prop handler.\n * - Any handler returning true will stop the next handlers to be called,\n *   including slate internal handler.\n */\nexport const pipeHandler = <K extends keyof DOMHandlers>(\n  editor: PlateEditor,\n  {\n    editableProps,\n    handlerKey,\n  }: { handlerKey: K; editableProps?: Omit<EditableProps, 'decorate'> | null }\n): ((event: any) => void) | undefined => {\n  const propsHandler = editableProps?.[handlerKey] as (\n    event: any\n  ) => boolean | void;\n\n  const relevantPlugins = editor.meta.pluginList.filter(\n    (plugin) => plugin.handlers?.[handlerKey]\n  );\n\n  if (relevantPlugins.length === 0 && !propsHandler) return;\n\n  return (event: any) => {\n    const isDomEvent = event instanceof Event;\n    const handledEvent = isDomEvent\n      ? convertDomEventToSyntheticEvent(event)\n      : event;\n\n    const eventIsHandled = relevantPlugins.some((plugin) => {\n      if (isEditOnly(editor.dom.readOnly, plugin, 'handlers')) {\n        return false;\n      }\n\n      const pluginHandler = plugin.handlers[handlerKey]!;\n\n      const shouldTreatEventAsHandled = pluginHandler({\n        ...(getEditorPlugin(editor, plugin) as any),\n        event: handledEvent,\n      });\n\n      if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n      }\n\n      return false;\n    });\n\n    if (eventIsHandled) return true;\n\n    return isEventHandled(handledEvent, propsHandler);\n  };\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { getPlugin } from '../plugin';\nimport { getEditorPlugin } from '../plugin/getEditorPlugin';\n\nexport const pipeOnChange = (editor: PlateEditor, value: Value) => {\n  return editor.meta.pluginCache.handlers.onChange.some((key) => {\n    const plugin = getPlugin(editor, { key });\n\n    if (isEditOnly(editor.dom.readOnly, plugin, 'handlers')) {\n      return false;\n    }\n\n    const handler = plugin.handlers.onChange!;\n\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    const shouldTreatEventAsHandled = handler({\n      ...(getEditorPlugin(editor, plugin) as any),\n      value,\n    });\n\n    if (shouldTreatEventAsHandled != null) {\n      return shouldTreatEventAsHandled;\n    }\n\n    return false;\n  });\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from 'react';\n\nimport type { EditableProps } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { PlateElement } from '../components';\nimport { useNodePath } from '../hooks';\nimport { getPlugin } from '../plugin';\nimport { useReadOnly } from '../slate-react';\nimport { ElementProvider } from '../stores';\nimport { getRenderNodeProps } from './getRenderNodeProps';\nimport { BelowRootNodes, pluginRenderElement } from './pluginRenderElement';\n\n/** @see {@link RenderElement} */\nexport const pipeRenderElement = (\n  editor: PlateEditor,\n  renderElementProp?: EditableProps['renderElement']\n): EditableProps['renderElement'] => {\n  return function render(props) {\n    let element;\n\n    const readOnly = useReadOnly();\n\n    const path = useNodePath(props.element)!;\n\n    editor.meta.pluginCache.node.isElement.some((key) => {\n      element = pluginRenderElement(\n        editor,\n        getPlugin(editor, { key })\n      )({\n        ...props,\n        path,\n      } as any);\n\n      return !!element;\n    });\n\n    if (element) return element;\n    if (renderElementProp) {\n      return renderElementProp({ ...props, path } as any);\n    }\n\n    const ctxProps = getRenderNodeProps({\n      editor,\n      props: { ...props, path } as any,\n      readOnly,\n    }) as any;\n\n    return (\n      <ElementProvider\n        element={ctxProps.element}\n        entry={[ctxProps.element, path]}\n        path={path}\n        scope={ctxProps.element.type ?? 'default'}\n      >\n        <PlateElement {...ctxProps}>\n          {props.children}\n\n          <BelowRootNodes {...ctxProps} />\n        </PlateElement>\n      </ElementProvider>\n    );\n  };\n};\n","import React from 'react';\n\nimport clsx from 'clsx';\nimport { useAtomStoreValue } from 'jotai-x';\nimport omit from 'lodash/omit.js';\nimport { useDeepCompareMemo } from 'use-deep-compare';\n\nimport type { EditableProps } from '../../lib';\nimport type { PlateProps } from '../components';\n\nimport { pipeDecorate } from '../../lib/static/utils/pipeDecorate';\nimport { useEditorRef, usePlateStore } from '../stores';\nimport { DOM_HANDLERS } from '../utils/dom-attributes';\nimport { pipeHandler } from '../utils/pipeHandler';\nimport { pipeRenderElement } from '../utils/pipeRenderElement';\nimport { pipeRenderLeaf } from '../utils/pipeRenderLeaf';\nimport { pipeRenderText } from '../utils/pipeRenderText';\n\nexport const useEditableProps = ({\n  disabled,\n  readOnly,\n  ...editableProps\n}: Omit<EditableProps, 'decorate'> &\n  Pick<PlateProps, 'decorate'> = {}): EditableProps => {\n  const { id } = editableProps;\n\n  const editor = useEditorRef(id);\n  const store = usePlateStore(id);\n  const versionDecorate = useAtomStoreValue(store, 'versionDecorate');\n  const storeDecorate = useAtomStoreValue(store, 'decorate');\n  const storeRenderLeaf = useAtomStoreValue(store, 'renderLeaf');\n  const storeRenderElement = useAtomStoreValue(store, 'renderElement');\n  const storeRenderText = useAtomStoreValue(store, 'renderText');\n\n  const decorateMemo = React.useMemo(() => {\n    return pipeDecorate(\n      editor,\n      storeDecorate ?? (editableProps?.decorate as any)\n    );\n  }, [editableProps?.decorate, editor, storeDecorate]);\n\n  const decorate: typeof decorateMemo = React.useMemo(() => {\n    if (!versionDecorate || !decorateMemo) return;\n\n    return (entry) => decorateMemo(entry);\n  }, [decorateMemo, versionDecorate]);\n\n  const renderElement = React.useMemo(() => {\n    return pipeRenderElement(\n      editor,\n      storeRenderElement ?? editableProps?.renderElement\n    );\n  }, [editableProps?.renderElement, editor, storeRenderElement]);\n\n  const renderLeaf = React.useMemo(() => {\n    return pipeRenderLeaf(editor, storeRenderLeaf ?? editableProps?.renderLeaf);\n  }, [editableProps?.renderLeaf, editor, storeRenderLeaf]);\n\n  const renderText = React.useMemo(() => {\n    return pipeRenderText(editor, storeRenderText ?? editableProps?.renderText);\n  }, [editableProps?.renderText, editor, storeRenderText]);\n\n  const props: EditableProps = useDeepCompareMemo(() => {\n    const _props: EditableProps = {\n      decorate,\n      renderElement,\n      renderLeaf,\n      renderText,\n    };\n\n    DOM_HANDLERS.forEach((handlerKey) => {\n      const handler = pipeHandler(editor, { editableProps, handlerKey }) as any;\n\n      if (handler) {\n        _props[handlerKey] = handler;\n      }\n    });\n\n    return _props;\n  }, [decorate, editableProps, renderElement, renderLeaf, renderText]);\n\n  return useDeepCompareMemo(\n    () => ({\n      ...omit(editableProps, [\n        ...DOM_HANDLERS,\n        'renderElement',\n        'renderLeaf',\n        'renderText',\n        'decorate',\n      ]),\n      ...props,\n      'aria-disabled': disabled,\n      className: clsx(\n        'slate-editor',\n        'ignore-click-outside/toolbar',\n        editableProps.className\n      ),\n      'data-readonly': readOnly ? 'true' : undefined,\n      readOnly,\n    }),\n    [editableProps, props, readOnly]\n  );\n};\n","import React from 'react';\n\nimport clsx from 'clsx';\n\nimport type { EditableProps } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin';\n\nimport { PlateLeaf } from '../components';\nimport { useReadOnly } from '../slate-react';\nimport { getRenderNodeProps } from './getRenderNodeProps';\nimport { type RenderLeaf, pluginRenderLeaf } from './pluginRenderLeaf';\n\n/** @see {@link RenderLeaf} */\nexport const pipeRenderLeaf = (\n  editor: PlateEditor,\n  renderLeafProp?: EditableProps['renderLeaf']\n): EditableProps['renderLeaf'] => {\n  const renderLeafs: RenderLeaf[] = [];\n  const leafPropsPlugins: AnyEditorPlatePlugin[] = [];\n\n  editor.meta.pluginList.forEach((plugin) => {\n    if (\n      plugin.node.isLeaf &&\n      (plugin.node.isDecoration === true || plugin.render.leaf)\n    ) {\n      renderLeafs.push(pluginRenderLeaf(editor, plugin));\n    }\n\n    if (plugin.node.leafProps) {\n      leafPropsPlugins.push(plugin);\n    }\n  });\n\n  return function render({ attributes, ...props }) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const readOnly = useReadOnly();\n\n    renderLeafs.forEach((renderLeaf) => {\n      const newChildren = renderLeaf(props as any);\n\n      if (newChildren !== undefined) {\n        props.children = newChildren;\n      }\n    });\n\n    leafPropsPlugins.forEach((plugin) => {\n      if (props.leaf[plugin.node.type ?? plugin.key]) {\n        const pluginLeafProps =\n          typeof plugin.node.leafProps === 'function'\n            ? plugin.node.leafProps(props as any)\n            : (plugin.node.leafProps ?? {});\n\n        if (pluginLeafProps.className) {\n          pluginLeafProps.className = clsx(\n            (props as any).className,\n            pluginLeafProps.className\n          );\n        }\n\n        attributes = {\n          ...attributes,\n          ...pluginLeafProps,\n        };\n      }\n    });\n\n    if (renderLeafProp) {\n      return renderLeafProp({ attributes, ...props } as any);\n    }\n\n    const ctxProps = getRenderNodeProps({\n      editor,\n      props: { attributes, ...props } as any,\n      readOnly,\n    }) as any;\n\n    return <PlateLeaf {...ctxProps}>{props.children}</PlateLeaf>;\n  };\n};\n","import React from 'react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { type PlateLeafProps, PlateLeaf } from '../components/plate-nodes';\nimport { useReadOnly } from '../slate-react';\nimport { getRenderNodeProps } from './getRenderNodeProps';\n\nexport type RenderLeaf = (props: PlateLeafProps) => React.ReactElement<any>;\n\n/**\n * Get a `Editable.renderLeaf` handler for `plugin.node.type`. If the type is\n * equals to the slate leaf type, render `plugin.render.node`. Else, return\n * `children`.\n */\nexport const pluginRenderLeaf = (\n  editor: PlateEditor,\n  plugin: AnyEditorPlatePlugin\n): RenderLeaf =>\n  function render(props) {\n    const {\n      render: { leaf: leafComponent, node },\n    } = plugin;\n    const { children, leaf } = props;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const readOnly = useReadOnly();\n\n    if (isEditOnly(readOnly, plugin, 'render')) return children;\n\n    if (leaf[plugin.node.type ?? plugin.key]) {\n      const Component = leafComponent ?? node;\n      const Leaf = Component ?? PlateLeaf;\n\n      const ctxProps = getRenderNodeProps({\n        attributes: leaf.attributes as any,\n        editor,\n        plugin,\n        props: props as any,\n        readOnly,\n      }) as any;\n\n      const defaultProps = Component ? {} : { as: plugin.render?.as };\n\n      return (\n        <Leaf {...defaultProps} {...ctxProps}>\n          {children}\n        </Leaf>\n      );\n    }\n\n    return children;\n  };\n","/* eslint-disable perfectionist/sort-jsx-props */\nimport React from 'react';\n\nimport type { Path, TElement, TText } from '@udecode/slate';\nimport type { UnknownObject } from '@udecode/utils';\n\nimport { useComposedRef } from '@udecode/react-utils';\nimport { clsx } from 'clsx';\n\nimport type {\n  AnyPluginConfig,\n  PluginConfig,\n  RenderElementProps,\n  RenderLeafProps,\n  RenderTextProps,\n} from '../../lib';\nimport type { PlatePluginContext } from '../plugin';\n\nimport { useEditorMounted } from '../stores';\n\nexport const useNodeAttributes = (props: any, ref?: any) => {\n  return {\n    ...props.attributes,\n    className:\n      clsx((props.attributes as any).className, props.className) || undefined,\n    ref: useComposedRef(ref, props.attributes.ref),\n    style: { ...(props.attributes as any).style, ...props.style },\n  };\n};\n\nexport type PlateElementProps<\n  N extends TElement = TElement,\n  C extends AnyPluginConfig = PluginConfig,\n> = PlateNodeProps<C> &\n  RenderElementProps<N> & {\n    path: Path;\n  } & DeprecatedNodeProps;\n\ntype DeprecatedNodeProps = {\n  /**\n   * @deprecated Optional class to be merged with `attributes.className`.\n   * @default undefined\n   */\n  className?: string;\n  /**\n   * @deprecated Optional style to be merged with `attributes.style`\n   * @default undefined\n   */\n  style?: React.CSSProperties;\n};\n\nexport type PlateNodeProps<C extends AnyPluginConfig = PluginConfig> =\n  PlatePluginContext<C> & {\n    /**\n     * Optional ref to be merged with `attributes.ref`\n     *\n     * @default undefined\n     */\n    ref?: any;\n  };\n\nexport type PlateHTMLProps<\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'div',\n> = PlateNodeProps<C> & {\n  /** HTML attributes to pass to the underlying HTML element */\n  attributes: React.PropsWithoutRef<React.JSX.IntrinsicElements[T]> &\n    UnknownObject;\n  as?: T;\n  /** Class to be merged with `attributes.className` */\n  className?: string;\n  /** Style to be merged with `attributes.style` */\n  style?: React.CSSProperties;\n};\n\nexport type StyledPlateElementProps<\n  N extends TElement = TElement,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'div',\n> = Omit<PlateElementProps<N, C>, keyof DeprecatedNodeProps> &\n  PlateHTMLProps<C, T> & {\n    insetProp?: boolean;\n  };\n\nexport const PlateElement = React.forwardRef(function PlateElement(\n  { as: Tag = 'div', children, insetProp, ...props }: StyledPlateElementProps,\n  ref: React.ForwardedRef<HTMLDivElement>\n) {\n  const attributes = useNodeAttributes(props, ref);\n\n  const mounted = useEditorMounted();\n  const block = React.useMemo(\n    () =>\n      mounted &&\n      !!props.element.id &&\n      !!props.editor.api.isBlock(props.element),\n    [props.element, props.editor, mounted]\n  );\n\n  const inset =\n    insetProp ?? props.plugin?.rules.selection?.affinity === 'directional';\n\n  return (\n    <>\n      {inset && <NonBreakingSpace />}\n      <Tag\n        data-slate-node=\"element\"\n        data-slate-inline={attributes['data-slate-inline']}\n        data-block-id={block ? props.element.id : undefined}\n        {...attributes}\n        style={\n          {\n            position: 'relative',\n            ...attributes?.style,\n          } as React.CSSProperties\n        }\n      >\n        {children}\n        {inset && <NonBreakingSpace />}\n      </Tag>\n    </>\n  );\n}) as <\n  N extends TElement = TElement,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'div',\n>(\n  props: StyledPlateElementProps<N, C, T>\n) => React.ReactElement;\n\nexport type PlateTextProps<\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n> = PlateNodeProps<C> & RenderTextProps<N> & DeprecatedNodeProps;\n\nexport type StyledPlateTextProps<\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'span',\n> = Omit<PlateTextProps<N, C>, keyof DeprecatedNodeProps> &\n  PlateHTMLProps<C, T>;\n\nexport const PlateText = React.forwardRef<\n  HTMLSpanElement,\n  StyledPlateTextProps\n>(({ as: Tag = 'span', children, ...props }, ref) => {\n  const attributes = useNodeAttributes(props, ref);\n\n  return <Tag {...attributes}>{children}</Tag>;\n}) as <\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'span',\n>(\n  props: StyledPlateTextProps<N, C, T>\n) => React.ReactElement;\n\nexport type PlateLeafProps<\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n> = PlateNodeProps<C> &\n  RenderLeafProps<N> &\n  DeprecatedNodeProps & { inset?: boolean };\n\nexport type StyledPlateLeafProps<\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'span',\n> = Omit<PlateLeafProps<N, C>, keyof DeprecatedNodeProps> &\n  PlateHTMLProps<C, T>;\n\nconst NonBreakingSpace = () => (\n  <span style={{ fontSize: 0 }} contentEditable={false}>\n    {String.fromCodePoint(160)}\n  </span>\n);\n\nexport const PlateLeaf = React.forwardRef<\n  HTMLSpanElement,\n  StyledPlateLeafProps\n>(({ as: Tag = 'span', children, inset: insetProp, ...props }, ref) => {\n  const attributes = useNodeAttributes(props, ref);\n\n  const inset = insetProp ?? props.plugin?.rules.selection?.affinity === 'hard';\n\n  if (inset) {\n    return (\n      <>\n        <NonBreakingSpace />\n        <Tag {...attributes}>\n          {children}\n\n          <NonBreakingSpace />\n        </Tag>\n      </>\n    );\n  }\n\n  return <Tag {...attributes}>{children}</Tag>;\n}) as <\n  N extends TText = TText,\n  C extends AnyPluginConfig = PluginConfig,\n  T extends keyof HTMLElementTagNameMap = 'span',\n>({\n  className,\n  ...props\n}: StyledPlateLeafProps<N, C, T>) => React.ReactElement;\n","import React from 'react';\n\nimport clsx from 'clsx';\n\nimport type { EditableProps } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin';\n\nimport { PlateText } from '../components/plate-nodes';\nimport { useReadOnly } from '../slate-react';\nimport { getRenderNodeProps } from './getRenderNodeProps';\nimport { type RenderText, pluginRenderText } from './pluginRenderText';\n\n/** @see {@link RenderText} */\nexport const pipeRenderText = (\n  editor: PlateEditor,\n  renderTextProp?: EditableProps['renderText']\n): EditableProps['renderText'] => {\n  const renderTexts: RenderText[] = [];\n  const textPropsPlugins: AnyEditorPlatePlugin[] = [];\n\n  editor.meta.pluginList.forEach((plugin) => {\n    if (plugin.node.isLeaf && plugin.node.isDecoration === false) {\n      renderTexts.push(pluginRenderText(editor, plugin));\n    }\n\n    if (plugin.node.textProps) {\n      textPropsPlugins.push(plugin);\n    }\n  });\n\n  return function render({ attributes, ...props }) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const readOnly = useReadOnly();\n\n    renderTexts.forEach((renderText) => {\n      const newChildren = renderText(props as any);\n\n      if (newChildren !== undefined) {\n        props.children = newChildren;\n      }\n    });\n\n    textPropsPlugins.forEach((plugin) => {\n      if (props.text[plugin.node.type ?? plugin.key]) {\n        const pluginTextProps =\n          typeof plugin.node.textProps === 'function'\n            ? plugin.node.textProps(props as any)\n            : (plugin.node.textProps ?? {});\n\n        if (pluginTextProps.className) {\n          pluginTextProps.className = clsx(\n            (props as any).className,\n            pluginTextProps.className\n          );\n        }\n\n        attributes = {\n          ...attributes,\n          ...pluginTextProps,\n        };\n      }\n    });\n\n    if (renderTextProp) {\n      return renderTextProp({ attributes, ...props } as any);\n    }\n\n    const ctxProps = getRenderNodeProps({\n      editor,\n      props: { attributes, ...props } as any,\n      readOnly,\n    }) as any;\n\n    return <PlateText {...ctxProps}>{props.children}</PlateText>;\n  };\n};\n","import React from 'react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { type PlateTextProps, PlateText } from '../components/plate-nodes';\nimport { useReadOnly } from '../slate-react';\nimport { getRenderNodeProps } from './getRenderNodeProps';\n\nexport type RenderText = (props: PlateTextProps) => React.ReactElement<any>;\n\n/**\n * Get a `Editable.renderText` handler for `plugin.node.type`. If the type is\n * equals to the slate text type and isDecoration is false, render\n * `plugin.render.node`. Else, return the default text rendering.\n */\nexport const pluginRenderText = (\n  editor: PlateEditor,\n  plugin: AnyEditorPlatePlugin\n): RenderText =>\n  function render(nodeProps) {\n    const {\n      render: { node },\n    } = plugin;\n    const { children, text } = nodeProps;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const readOnly = useReadOnly();\n\n    if (isEditOnly(readOnly, plugin, 'render')) return children;\n\n    if (text[plugin.node.type ?? plugin.key]) {\n      const Text = node ?? PlateText;\n\n      const ctxProps = getRenderNodeProps({\n        attributes: nodeProps.attributes,\n        editor,\n        plugin,\n        props: nodeProps as any,\n        readOnly,\n      }) as any;\n\n      const defaultProps = node ? {} : { as: plugin.render?.as };\n\n      return (\n        <Text {...defaultProps} {...ctxProps}>\n          {children}\n        </Text>\n      );\n    }\n\n    return children;\n  };\n","import { useMemoizedSelector } from '@udecode/react-utils';\nimport { type TNode, PathApi } from '@udecode/slate';\n\nimport { useEditorRef } from '../stores';\n\nexport const useNodePath = (node: TNode) => {\n  const editor = useEditorRef();\n\n  return useMemoizedSelector(\n    () => {\n      return editor.api.findPath(node);\n    },\n    [editor, node],\n    (a, b) => {\n      return !!a && !!b && PathApi.equals(a, b);\n    }\n  );\n};\n","import React from 'react';\n\nimport type { Editor, TSelection, Value } from '@udecode/slate';\nimport type { UnknownObject } from '@udecode/utils';\n\nimport { useAtomStoreValue } from 'jotai-x';\n\nimport { useEditorRef, useIncrementVersion, usePlateStore } from '../stores';\nimport { pipeOnChange } from '../utils/pipeOnChange';\n\ninterface SlateProps extends UnknownObject {\n  children: React.ReactNode;\n  editor: Editor;\n  initialValue: Value;\n  onChange?: (value: Value) => void;\n  onSelectionChange?: (selection: TSelection) => void;\n  onValueChange?: (value: Value) => void;\n}\n\n/** Get Slate props stored in a global store. */\nexport const useSlateProps = ({\n  id,\n}: {\n  id?: string;\n}): Omit<SlateProps, 'children'> => {\n  const editor = useEditorRef(id);\n  const store = usePlateStore(id);\n  const onChangeProp = useAtomStoreValue(store, 'onChange');\n  const onValueChangeProp = useAtomStoreValue(store, 'onValueChange');\n  const onSelectionChangeProp = useAtomStoreValue(store, 'onSelectionChange');\n  const updateVersionEditor = useIncrementVersion('versionEditor', id);\n  const updateVersionSelection = useIncrementVersion('versionSelection', id);\n  const updateVersionValue = useIncrementVersion('versionValue', id);\n\n  const onChange = React.useCallback(\n    (newValue: Value) => {\n      updateVersionEditor();\n      const eventIsHandled = pipeOnChange(editor, newValue);\n\n      if (!eventIsHandled) {\n        onChangeProp?.({ editor, value: newValue });\n      }\n    },\n    [editor, onChangeProp, updateVersionEditor]\n  );\n\n  const onValueChange: SlateProps['onValueChange'] = React.useMemo(\n    () => (value) => {\n      updateVersionValue();\n      onValueChangeProp?.({ editor, value });\n    },\n    [editor, onValueChangeProp, updateVersionValue]\n  );\n\n  const onSelectionChange: SlateProps['onSelectionChange'] = React.useMemo(\n    () => (selection: TSelection) => {\n      updateVersionSelection();\n      onSelectionChangeProp?.({ editor, selection });\n    },\n    [editor, onSelectionChangeProp, updateVersionSelection]\n  );\n\n  return React.useMemo(() => {\n    return {\n      key: editor.meta.key,\n      editor,\n      initialValue: editor.children,\n      value: editor.children,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n    };\n  }, [editor, onChange, onSelectionChange, onValueChange]);\n};\n","import React from 'react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { type PlateElementProps, PlateElement } from '../components';\nimport { useReadOnly } from '../slate-react';\nimport { useEditorRef, useElement } from '../stores';\nimport { ElementProvider } from '../stores/element/useElementStore';\nimport { getRenderNodeProps } from './getRenderNodeProps';\n\n/**\n * Function used to render an element. If the function returns undefined then\n * the next RenderElement function is called. If the function renders a JSX\n * element then that JSX element is rendered.\n */\nexport type RenderElement = (\n  props: PlateElementProps\n) => React.ReactElement<any> | undefined;\n\nfunction ElementContent({ editor, plugin, ...props }: PlateElementProps) {\n  const element = useElement();\n  const readOnly = useReadOnly();\n\n  if (isEditOnly(readOnly, plugin, 'render')) return null;\n\n  const { children: _children } = props;\n  const key = plugin.key;\n  const Component = plugin.render?.node;\n  const Element = Component ?? (PlateElement as any);\n\n  const aboveNodes = editor.meta.pluginList.flatMap((o) => {\n    if (isEditOnly(readOnly, o, 'render')) return [];\n    return o.render?.aboveNodes ?? [];\n  });\n  const belowNodes = editor.meta.pluginList.flatMap((o) => {\n    if (isEditOnly(readOnly, o, 'render')) return [];\n    return o.render?.belowNodes ?? [];\n  });\n\n  props = getRenderNodeProps({\n    attributes: element.attributes as any,\n    editor,\n    plugin,\n    props: props as any,\n    readOnly,\n  }) as any;\n\n  let children = _children;\n\n  belowNodes.forEach((withHOC) => {\n    const hoc = withHOC({ ...props, key } as any);\n\n    if (hoc) {\n      children = hoc({ ...props, children } as any);\n    }\n  });\n\n  const defaultProps = Component ? {} : { as: plugin.render?.as };\n\n  let component: React.ReactNode = (\n    <Element {...defaultProps} {...props}>\n      {children}\n\n      <BelowRootNodes {...defaultProps} {...props} />\n    </Element>\n  );\n\n  aboveNodes.forEach((withHOC) => {\n    const hoc = withHOC({ ...props, key } as any);\n\n    if (hoc) {\n      component = hoc({ ...props, children: component } as any);\n    }\n  });\n\n  return component;\n}\n\nexport function BelowRootNodes(props: any) {\n  const editor = useEditorRef();\n  const readOnly = useReadOnly();\n\n  return (\n    <>\n      {editor.meta.pluginCache.render.belowRootNodes.map((key) => {\n        const plugin = editor.getPlugin({ key });\n\n        if (isEditOnly(readOnly, plugin, 'render')) return null;\n\n        const Component = plugin.render.belowRootNodes!;\n\n        return <Component key={key} {...props} />;\n      })}\n    </>\n  );\n}\n\n/**\n * Get a `Editable.renderElement` handler for `plugin.node.type`. If the type is\n * equals to the slate element type, render `plugin.render.node`. Else, return\n * `undefined` so the pipeline can check the next plugin.\n */\nexport const pluginRenderElement = (\n  editor: PlateEditor,\n  plugin: AnyEditorPlatePlugin\n): RenderElement =>\n  function render(props) {\n    const { element, path } = props;\n\n    if (element.type === plugin.node.type) {\n      return (\n        <ElementProvider\n          element={element}\n          entry={[element, path]}\n          path={path}\n          scope={plugin.key}\n        >\n          <ElementContent editor={editor} plugin={plugin} {...(props as any)} />\n        </ElementProvider>\n      );\n    }\n  };\n","import React from 'react';\n\nimport type { Nullable } from '@udecode/utils';\n\nimport {\n  type ElementEntry,\n  type Path,\n  type TElement,\n  PathApi,\n} from '@udecode/slate';\n\nimport { createAtomStore } from '../../libs/jotai';\nimport { useComposing, useReadOnly } from '../../slate-react';\nimport { useEditorRef, usePlateStore } from '../plate';\nimport { usePath } from './usePath';\n\nexport const SCOPE_ELEMENT = 'element';\n\nexport type ElementStoreState = {\n  element: TElement;\n  entry: ElementEntry;\n  path: Path;\n};\n\nconst initialState: Nullable<ElementStoreState> = {\n  element: null,\n  entry: null,\n  path: null,\n};\n\nexport const { ElementProvider, elementStore, useElementStore } =\n  createAtomStore(\n    initialState as ElementStoreState,\n    { effect: Effect, name: 'element', suppressWarnings: true } as const\n  );\n\nfunction Effect() {\n  const path = usePath();\n\n  if (path && PathApi.equals(path, [0])) {\n    return <FirstBlockEffect />;\n  }\n\n  return null;\n}\n\nfunction FirstBlockEffect() {\n  const editor = useEditorRef();\n  const store = usePlateStore();\n  const composing = useComposing();\n  const readOnly = useReadOnly();\n\n  editor.dom.readOnly = readOnly;\n  editor.dom.composing = composing;\n\n  React.useLayoutEffect(() => {\n    store.set('composing', composing);\n  }, [composing, store]);\n\n  return null;\n}\n","import type { Path } from '@udecode/slate';\n\nimport { useAtomStoreValue } from 'jotai-x';\n\nimport { useEditorRef } from '../plate';\nimport { useElementStore } from './useElementStore';\n\n/** Get the memoized path of the closest element. */\nexport const usePath = (pluginKey?: string): Path => {\n  const editor = useEditorRef();\n  const value = useAtomStoreValue(useElementStore(pluginKey), 'path');\n\n  if (!value) {\n    editor.api.debug.warn(\n      `usePath(${pluginKey}) hook must be used inside the node component's context`,\n      'USE_ELEMENT_CONTEXT'\n    );\n\n    return undefined as any;\n  }\n\n  return value;\n};\n","import React from 'react';\n\nimport type { JotaiStore } from 'jotai-x';\n\nimport { type Atom, atom } from 'jotai';\n\nimport { createAtomStore, useStoreAtomValue } from '../../libs';\n\nconst {\n  PlateControllerProvider: PlateController,\n  plateControllerStore,\n  usePlateControllerStore: _usePlateControllerStore,\n} = createAtomStore(\n  {\n    activeId: atom<string | null>(null),\n    editorStores: atom<Record<string, JotaiStore | null>>({}),\n    primaryEditorIds: atom<string[]>([]),\n  },\n  {\n    name: 'plateController',\n  }\n);\n\nexport { PlateController, plateControllerStore };\n\nexport const usePlateControllerLocalStore: typeof _usePlateControllerStore = (\n  options\n) =>\n  _usePlateControllerStore({\n    scope: typeof options === 'string' ? options : undefined,\n    warnIfNoStore: false,\n    ...(typeof options === 'object' ? options : {}),\n  });\n\n// export const usePlateControllerStore = (options?: UsePlateControllerStoreOptions) =>\n//   _usePlateControllerStore(options);\n\nexport const usePlateControllerExists = () =>\n  !!usePlateControllerLocalStore().store;\n\n/**\n * Retrieve from PlateController the JotaiStore for the editor with a given ID,\n * or the active editor if no ID is provided, or the first primary editor if no\n * editor is active, or null.\n */\nexport const usePlateControllerStore = (idProp?: string): JotaiStore | null => {\n  const storeAtom: Atom<JotaiStore | null> = React.useMemo(\n    () =>\n      atom((get) => {\n        const editorStores = get(plateControllerStore.atom.editorStores);\n\n        const forId = (id: string | null): JotaiStore | null => {\n          if (!id) return null;\n\n          return editorStores[id] ?? null;\n        };\n\n        if (idProp) return forId(idProp);\n\n        const lookupOrder = [\n          get(plateControllerStore.atom.activeId),\n          ...get(plateControllerStore.atom.primaryEditorIds),\n        ];\n\n        for (const id of lookupOrder) {\n          const store = forId(id);\n\n          if (store) return store;\n        }\n\n        return null;\n      }),\n    [idProp]\n  );\n\n  return useStoreAtomValue(usePlateControllerLocalStore(), storeAtom);\n};\n","import React from 'react';\n\nimport type { AnyPluginConfig, WithRequiredKey } from '../../../lib';\nimport type { PlateEditor } from '../../editor';\n\nimport {\n  type InferConfig,\n  type PlatePlugin,\n  type PlatePluginContext,\n  getEditorPlugin,\n} from '../../plugin';\nimport { type PlateStore, useEditorRef } from './createPlateStore';\n\n/** Get editor and plugin context. */\nexport function useEditorPlugin<\n  P extends AnyPluginConfig | PlatePlugin<AnyPluginConfig>,\n  E extends PlateEditor = PlateEditor,\n>(\n  p: WithRequiredKey<P>,\n  id?: string\n): PlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>, E> & {\n  store: PlateStore;\n} {\n  const editor = useEditorRef(id);\n\n  return React.useMemo(\n    () =>\n      ({\n        ...getEditorPlugin(editor, p),\n        store: editor.store,\n      }) as any,\n    [editor, p]\n  );\n}\n","import React from 'react';\n\nimport { useStoreAtomValue } from 'jotai-x';\nimport { selectAtom } from 'jotai/utils';\n\nimport type { PlateEditor } from '../../editor';\n\nimport { plateStore, usePlateStore } from './createPlateStore';\n\nexport interface UseEditorSelectorOptions<T> {\n  id?: string;\n  equalityFn?: (a: T, b: T) => boolean;\n}\n\nexport const useEditorSelector = <T, E extends PlateEditor = PlateEditor>(\n  selector: (editor: E, prev?: T) => T,\n  deps: React.DependencyList,\n  { id, equalityFn = (a: T, b: T) => a === b }: UseEditorSelectorOptions<T> = {}\n): T => {\n  const selectorAtom = React.useMemo(\n    () =>\n      selectAtom<{ editor: E }, T>(\n        plateStore.atom.trackedEditor,\n        ({ editor }, prev) => selector(editor, prev),\n        equalityFn\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps\n  );\n\n  return useStoreAtomValue(usePlateStore(id), selectorAtom);\n};\n","import type { TEqualityChecker } from 'zustand-x';\n\nimport { useStoreSelect, useStoreValue } from 'zustand-x';\n\nimport type {\n  AnyPluginConfig,\n  InferOptions,\n  InferSelectors,\n  WithRequiredKey,\n} from '../../../lib';\nimport type { PlateEditor } from '../../editor';\n\nimport { useEditorRef } from './createPlateStore';\n\n/**\n * Hook to access plugin options. For usage outside `<Plate>`, use\n * `useEditorPluginOption` instead.\n *\n * @example\n *   const value = usePluginOption(plugin, 'value');\n *   const doubleValue = usePluginOption(plugin, 'doubleValue', 2);\n */\nexport function usePluginOption<\n  C extends AnyPluginConfig,\n  StateType extends InferOptions<C>,\n  TSelectors extends InferSelectors<C>,\n  K extends keyof StateType | keyof TSelectors | 'state',\n>(\n  plugin: WithRequiredKey<C>,\n  key: K,\n  ...args: [\n    ...(K extends keyof TSelectors ? Parameters<TSelectors[K]> : unknown[]),\n    TEqualityChecker<\n      K extends 'state'\n        ? StateType\n        : K extends keyof TSelectors\n          ? ReturnType<TSelectors[K]>\n          : K extends keyof StateType\n            ? StateType[K]\n            : never\n    >?,\n  ]\n): K extends 'state'\n  ? StateType\n  : K extends keyof TSelectors\n    ? ReturnType<TSelectors[K]>\n    : K extends keyof StateType\n      ? StateType[K]\n      : never {\n  const editor = useEditorRef();\n\n  return useEditorPluginOption(editor, plugin, key, ...args);\n}\n\nexport function useEditorPluginOption<\n  C extends AnyPluginConfig,\n  StateType extends InferOptions<C>,\n  TSelectors extends InferSelectors<C>,\n  K extends keyof StateType | keyof TSelectors | 'state',\n>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<C>,\n  key: K,\n  ...args: [\n    ...(K extends keyof TSelectors ? Parameters<TSelectors[K]> : unknown[]),\n    TEqualityChecker<\n      K extends 'state'\n        ? StateType\n        : K extends keyof TSelectors\n          ? ReturnType<TSelectors[K]>\n          : K extends keyof StateType\n            ? StateType[K]\n            : never\n    >?,\n  ]\n): K extends 'state'\n  ? StateType\n  : K extends keyof TSelectors\n    ? ReturnType<TSelectors[K]>\n    : K extends keyof StateType\n      ? StateType[K]\n      : never {\n  const store = editor.getOptionsStore(plugin);\n\n  if (!store) {\n    return undefined as any;\n  }\n\n  if (!(key in store.get('state')) && !(key in store.selectors)) {\n    editor.api.debug.error(\n      `usePluginOption: ${key as any} option is not defined in plugin ${plugin.key}`,\n      'OPTION_UNDEFINED'\n    );\n    return undefined as any;\n  }\n\n  return (useStoreValue as any)(store, key, ...args);\n}\n\n/**\n * Use zustand store selector.\n *\n * @example\n *   const name = usePluginOptions(plugin, (state) => state.name, equalityFn);\n */\nexport function usePluginOptions<C extends AnyPluginConfig, U>(\n  plugin: WithRequiredKey<C>,\n  selector: (state: InferOptions<C>) => U,\n  {\n    id,\n    equalityFn,\n  }: {\n    // Editor id. Default is the closest one.\n    id?: string;\n    // Equality function. Default is strict equality.\n    equalityFn?: (a: U, b: U) => boolean;\n  } = {}\n): U {\n  const editor = useEditorRef(id);\n\n  return useEditorPluginOptions(editor, plugin, selector, {\n    equalityFn,\n  });\n}\n\nexport function useEditorPluginOptions<C extends AnyPluginConfig, U>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<C>,\n  selector: (state: InferOptions<C>) => U,\n  {\n    equalityFn,\n  }: {\n    // Equality function. Default is strict equality.\n    equalityFn?: (a: U, b: U) => boolean;\n  } = {}\n): U {\n  const store = editor.getOptionsStore(plugin);\n\n  if (!store) {\n    return undefined as any;\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useStoreSelect(store, selector, equalityFn);\n}\n","import React from 'react';\n\nimport type { NodeEntry, TElement } from '@udecode/slate';\n\nimport { useStoreAtomValue } from 'jotai-x';\nimport { selectAtom } from 'jotai/utils';\n\nimport { elementStore, useElementStore } from './useElementStore';\n\ninterface UseElementSelectorOptions<T> {\n  key?: string;\n  equalityFn?: (a: T, b: T) => boolean;\n}\n\nexport const useElementSelector = <T>(\n  selector: <N extends TElement>(state: NodeEntry<N>, prev?: T) => T,\n  deps: React.DependencyList,\n  {\n    key,\n    equalityFn = (a: T, b: T) => a === b,\n  }: UseElementSelectorOptions<T> = {}\n): T => {\n  const selectorAtom = React.useMemo(\n    () =>\n      selectAtom(\n        elementStore.atom.entry,\n        (entry, prev) => selector(entry, prev),\n        equalityFn\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps\n  );\n\n  return useStoreAtomValue(useElementStore(key), selectorAtom);\n};\n","import { useEventEditorValue } from '../../plugins/event-editor/EventEditorStore';\nimport { PLATE_SCOPE, useEditorRef } from '../plate';\n\n/** Get last event editor id: focus, blur or last. */\nexport const useEventPlateId = (id?: string) => {\n  const focus = useEventEditorValue('focus');\n  const blur = useEventEditorValue('blur');\n  const last = useEventEditorValue('last');\n  const providerId = useEditorRef().id;\n\n  if (id) return id;\n  if (focus) return focus;\n  if (blur) return blur;\n\n  return last ?? providerId ?? PLATE_SCOPE;\n};\n","import React from 'react';\n\nimport { useEditorRef, useRedecorate } from '../stores';\n\nexport const EditorMethodsEffect = ({ id }: { id?: string }) => {\n  const editor = useEditorRef(id);\n  const redecorate = useRedecorate(id);\n\n  React.useEffect(() => {\n    editor.api.redecorate = redecorate;\n  }, [editor, redecorate]);\n\n  return null;\n};\n","import React from 'react';\n\nimport { useAtomStoreSet, useAtomStoreValue } from 'jotai-x';\n\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { getEditorPlugin, getPlugin } from '../plugin';\nimport { useEditorRef, usePlateStore } from '../stores';\n\nexport function EditorRefPluginEffect({\n  id,\n  plugin,\n}: {\n  plugin: AnyEditorPlatePlugin;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n\n  plugin.useHooks?.(getEditorPlugin(editor, plugin) as any);\n\n  return null;\n}\n\nexport function EditorRefEffect({ id }: { id?: string }) {\n  const store = usePlateStore(id);\n  const editor = useAtomStoreValue(store, 'editor');\n  const setIsMounted = useAtomStoreSet(store, 'isMounted');\n\n  React.useEffect(() => {\n    setIsMounted(true);\n\n    return () => {\n      setIsMounted(false);\n    };\n  }, [setIsMounted]);\n\n  return (\n    <>\n      {editor.meta.pluginCache.useHooks.map((key) => {\n        return (\n          <EditorRefPluginEffect\n            id={id}\n            key={key}\n            plugin={getPlugin(editor, { key })}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import React, { useId } from 'react';\n\nimport type { EditableProps } from '../../lib/types/EditableProps';\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { usePlateInstancesWarn } from '../../internal/hooks/usePlateInstancesWarn';\nimport { type PlateStoreState, PlateStoreProvider } from '../stores';\n\nexport interface PlateProps<E extends PlateEditor = PlateEditor>\n  extends Partial<\n    Pick<\n      PlateStoreState<E>,\n      | 'decorate'\n      | 'onChange'\n      | 'onSelectionChange'\n      | 'onValueChange'\n      | 'primary'\n      | 'readOnly'\n    >\n  > {\n  children: React.ReactNode;\n\n  editor: E | null;\n\n  renderElement?: EditableProps['renderElement'];\n\n  renderLeaf?: EditableProps['renderLeaf'];\n\n  suppressInstanceWarning?: boolean;\n}\n\nfunction PlateInner({\n  children,\n  containerRef,\n  decorate,\n  editor,\n  primary,\n  readOnly,\n  renderElement,\n  renderLeaf,\n  scrollRef,\n  onChange,\n  onSelectionChange,\n  onValueChange,\n}: PlateProps & {\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  scrollRef: React.RefObject<HTMLDivElement | null>;\n}) {\n  return (\n    <PlateStoreProvider\n      readOnly={readOnly ?? editor?.dom.readOnly}\n      onChange={onChange}\n      onSelectionChange={onSelectionChange}\n      onValueChange={onValueChange}\n      containerRef={containerRef}\n      decorate={decorate}\n      editor={editor!}\n      primary={primary}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scope={editor!.id}\n      scrollRef={scrollRef}\n    >\n      {children}\n    </PlateStoreProvider>\n  );\n}\n\nexport function Plate<E extends PlateEditor = PlateEditor>(\n  props: PlateProps<E>\n) {\n  const id = useId();\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n\n  usePlateInstancesWarn(props.suppressInstanceWarning);\n\n  if (!props.editor) return null;\n\n  props.editor.meta.uid = 'e-' + id.replaceAll(':', '');\n\n  return (\n    <PlateInner\n      key={props.editor.meta.key}\n      containerRef={containerRef}\n      scrollRef={scrollRef}\n      {...(props as any)}\n    />\n  );\n}\n","import React from 'react';\n\ndeclare global {\n  interface Global {\n    __PLATE_INSTANCES__?: number;\n  }\n}\n\nfunction checkPlateInstances() {\n  (globalThis as any).__PLATE_INSTANCES__ =\n    ((globalThis as any).__PLATE_INSTANCES__ || 0) + 1;\n}\n\ncheckPlateInstances();\n\nexport function usePlateInstancesWarn(disabled?: boolean) {\n  React.useEffect(() => {\n    if (\n      !disabled &&\n      (globalThis as any).__PLATE_INSTANCES__ &&\n      (globalThis as any).__PLATE_INSTANCES__ > 1\n    ) {\n      console.warn('Detected multiple @udecode/plate-core instances!');\n    }\n  }, [disabled]);\n}\n","import React, { type HTMLAttributes } from 'react';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport {\n  useEditorContainerRef,\n  useEditorReadOnly,\n  useEditorRef,\n} from '../stores';\n\nexport const PlateContainer = ({\n  children,\n  ...props\n}: HTMLAttributes<HTMLDivElement>) => {\n  const editor = useEditorRef();\n  const readOnly = useEditorReadOnly();\n\n  const containerRef = useEditorContainerRef();\n\n  let afterContainer: React.ReactNode = null;\n  let beforeContainer: React.ReactNode = null;\n\n  const mainContainer = (\n    <div id={editor.meta.uid} ref={containerRef} {...props}>\n      {children}\n    </div>\n  );\n\n  editor.meta.pluginCache.render.beforeContainer.forEach((key) => {\n    const plugin = editor.getPlugin({ key });\n    if (isEditOnly(readOnly, plugin, 'render')) return;\n\n    const BeforeContainer = plugin.render.beforeContainer!;\n\n    beforeContainer = (\n      <>\n        {beforeContainer}\n        <BeforeContainer {...props} />\n      </>\n    );\n  });\n\n  editor.meta.pluginCache.render.afterContainer.forEach((key) => {\n    const plugin = editor.getPlugin({ key });\n    if (isEditOnly(readOnly, plugin, 'render')) return;\n\n    const AfterContainer = plugin.render.afterContainer!;\n\n    afterContainer = (\n      <>\n        {afterContainer}\n        <AfterContainer {...props} />\n      </>\n    );\n  });\n\n  return (\n    <>\n      {beforeContainer}\n      {mainContainer}\n      {afterContainer}\n    </>\n  );\n};\n\nPlateContainer.displayName = 'PlateContainer';\n","import React, { useRef } from 'react';\n\nimport { useComposedRef } from '@udecode/react-utils';\nimport { isDefined } from '@udecode/utils';\n\nimport type { EditableProps } from '../../lib/types/EditableProps';\nimport type { PlateEditor } from '../editor';\n\nimport { isEditOnly } from '../../internal/plugin/isEditOnlyDisabled';\nimport { useEditableProps } from '../hooks';\nimport { Editable } from '../slate-react';\nimport {\n  type PlateStoreState,\n  useEditorReadOnly,\n  useEditorRef,\n  usePlateStore,\n} from '../stores';\nimport { EditorHotkeysEffect } from './EditorHotkeysEffect';\nimport { EditorMethodsEffect } from './EditorMethodsEffect';\nimport { EditorRefEffect } from './EditorRefEffect';\nimport { PlateControllerEffect } from './PlateControllerEffect';\nimport { PlateSlate } from './PlateSlate';\n\nexport type PlateContentProps = Omit<EditableProps, 'decorate'> & {\n  /** Autofocus when it becomes editable (readOnly false -> readOnly true) */\n  autoFocusOnEditable?: boolean;\n  decorate?: PlateStoreState['decorate'];\n  disabled?: boolean;\n  /** R enders the editable content. */\n  renderEditable?: (editable: React.ReactElement<any>) => React.ReactNode;\n};\n\n/**\n * Editable with plugins.\n *\n * - Decorate prop\n * - DOM handler props\n * - ReadOnly prop\n * - Render.afterEditable\n * - Render.beforeEditable\n * - RenderElement prop\n * - RenderLeaf prop\n * - UseHooks\n */\nconst PlateContent = React.forwardRef(\n  (\n    {\n      autoFocusOnEditable,\n      readOnly: readOnlyProp,\n      renderEditable,\n      ...props\n    }: PlateContentProps,\n    ref\n  ) => {\n    const { id } = props;\n\n    const editor = useEditorRef(id);\n\n    const storeReadOnly = useEditorReadOnly();\n    const readOnly = props.disabled ? true : (readOnlyProp ?? storeReadOnly);\n\n    // Can't be in useLayoutEffect for the first render\n    editor.dom.readOnly = readOnly;\n\n    if (!editor) {\n      throw new Error(\n        'Editor not found. Please ensure that PlateContent is rendered below Plate.'\n      );\n    }\n\n    const editableProps = useEditableProps({ ...props, readOnly });\n\n    const editableRef = useRef<HTMLDivElement | null>(null);\n    const combinedRef = useComposedRef(ref, editableRef);\n\n    const editable = <Editable ref={combinedRef} {...(editableProps as any)} />;\n\n    let afterEditable: React.ReactNode = null;\n    let beforeEditable: React.ReactNode = null;\n\n    editor.meta.pluginCache.render.beforeEditable.forEach((key) => {\n      const plugin = editor.getPlugin({ key });\n      if (isEditOnly(readOnly, plugin, 'render')) return;\n\n      const BeforeEditable = plugin.render.beforeEditable!;\n\n      beforeEditable = (\n        <>\n          {beforeEditable}\n          <BeforeEditable {...editableProps} />\n        </>\n      );\n    });\n\n    editor.meta.pluginCache.render.afterEditable.forEach((key) => {\n      const plugin = editor.getPlugin({ key });\n      if (isEditOnly(readOnly, plugin, 'render')) return;\n\n      const AfterEditable = plugin.render.afterEditable!;\n\n      afterEditable = (\n        <>\n          {afterEditable}\n          <AfterEditable {...editableProps} />\n        </>\n      );\n    });\n\n    let aboveEditable: React.ReactNode = (\n      <>\n        {renderEditable ? renderEditable(editable) : editable}\n\n        <EditorMethodsEffect id={id} />\n        <EditorHotkeysEffect id={id} editableRef={editableRef} />\n        <EditorRefEffect id={id} />\n        <PlateControllerEffect id={id} />\n      </>\n    );\n\n    editor.meta.pluginCache.render.aboveEditable.forEach((key) => {\n      const plugin = editor.getPlugin({ key });\n      if (isEditOnly(readOnly, plugin, 'render')) return;\n\n      const AboveEditable = plugin.render.aboveEditable!;\n\n      aboveEditable = <AboveEditable>{aboveEditable}</AboveEditable>;\n    });\n\n    return (\n      <PlateSlate id={id}>\n        <EditorStateEffect\n          id={id}\n          disabled={props.disabled}\n          readOnly={readOnlyProp}\n          autoFocusOnEditable={autoFocusOnEditable}\n          editor={editor}\n        />\n\n        {beforeEditable}\n        {aboveEditable}\n        {afterEditable}\n      </PlateSlate>\n    );\n  }\n);\nPlateContent.displayName = 'PlateContent';\n\nexport { PlateContent };\n\nfunction EditorStateEffect({\n  id,\n  autoFocusOnEditable,\n  disabled,\n  editor,\n  readOnly,\n}: {\n  editor: PlateEditor;\n  id?: string;\n  autoFocusOnEditable?: boolean;\n  disabled?: boolean;\n  readOnly?: boolean;\n}) {\n  const store = usePlateStore(id);\n\n  // Sync PlateContent.readOnly to Plate.readOnly\n  React.useLayoutEffect(() => {\n    if (disabled) {\n      store.setReadOnly(true);\n      return;\n    }\n\n    if (isDefined(readOnly)) {\n      store.setReadOnly(readOnly);\n    }\n  }, [disabled, editor.dom, readOnly, store]);\n\n  const prevReadOnly = React.useRef(readOnly);\n\n  React.useEffect(() => {\n    if (autoFocusOnEditable && prevReadOnly.current && !readOnly) {\n      editor.tf.focus({ edge: 'endEditor' });\n    }\n\n    prevReadOnly.current = readOnly;\n  }, [autoFocusOnEditable, editor, readOnly]);\n\n  return null;\n}\n","import React from 'react';\n\nimport type { WritableAtom } from 'jotai/vanilla/atom';\n\nimport { useStableFn } from '@udecode/react-utils';\nimport { focusAtom } from 'jotai-optics';\nimport { type JotaiStore, useAtomStoreSet, useAtomStoreValue } from 'jotai-x';\n\nimport { useFocused } from '../slate-react';\nimport {\n  plateControllerStore,\n  useEditorId,\n  usePlateControllerLocalStore,\n  usePlateStore,\n} from '../stores';\n\nexport interface PlateControllerEffectProps {\n  id?: string;\n}\n\nexport const PlateControllerEffect = ({\n  id: idProp,\n}: PlateControllerEffectProps) => {\n  const idFromStore = useEditorId();\n  const id = idProp ?? idFromStore;\n\n  // Atom to set the store for the editor's ID\n  const currentStoreAtom = React.useMemo(\n    () =>\n      focusAtom(\n        plateControllerStore.atom.editorStores as WritableAtom<\n          Record<string, JotaiStore | null>,\n          any,\n          any\n        >,\n        (optic) => optic.prop(id)\n      ),\n    [id]\n  );\n\n  const setCurrentStore = useStableFn(\n    usePlateControllerLocalStore().setAtom(currentStoreAtom),\n    [currentStoreAtom]\n  );\n\n  const setPrimaryEditorIds = useStableFn(\n    useAtomStoreSet(usePlateControllerLocalStore(), 'primaryEditorIds')\n  );\n\n  const setActiveId = useStableFn(\n    useAtomStoreSet(usePlateControllerLocalStore(), 'activeId')\n  );\n\n  const store = usePlateStore(id);\n  const primary = useAtomStoreValue(store, 'primary');\n  const focused = useFocused();\n\n  // Keep the store up to date for the editor's ID\n  React.useEffect(() => {\n    setCurrentStore((store as any) ?? null);\n\n    /**\n     * On unmount or when the ID changes, unset the store for the old ID. If the\n     * old ID was active, set the active ID to null. It is a bug if this code\n     * runs at any other time, so the dependency array must be stable.\n     */\n    return () => {\n      setCurrentStore(null);\n      setActiveId((activeId) => (activeId === id ? null : activeId));\n    };\n  }, [store, setCurrentStore, setActiveId, id]);\n\n  // If the editor is primary, register it in the list of primary editors\n  React.useEffect(() => {\n    if (primary) {\n      setPrimaryEditorIds((ids) => [...ids, id]);\n\n      return () => {\n        setPrimaryEditorIds((ids) => ids.filter((i) => i !== id));\n      };\n    }\n  }, [id, primary, setPrimaryEditorIds]);\n\n  // Set the editor as active when it becomes focused\n  React.useEffect(() => {\n    if (id && focused) {\n      setActiveId(id);\n    }\n  }, [id, focused, setActiveId]);\n\n  return null;\n};\n","import React from 'react';\n\nimport { useSlateProps } from '../hooks';\nimport { Slate } from '../slate-react';\nimport { useEditorRef } from '../stores/plate';\n\n/**\n * Slate with plugins.\n *\n * - OnChange prop\n * - RenderAboveSlate\n */\nexport function PlateSlate({\n  id,\n  children,\n}: {\n  children: React.ReactNode;\n  id?: string;\n}) {\n  const slateProps = useSlateProps({ id });\n\n  const editor = useEditorRef(id);\n\n  let aboveSlate: React.ReactElement<any> | null = (\n    <Slate {...(slateProps as any)}>{children}</Slate>\n  );\n\n  editor.meta.pluginCache.render.aboveSlate.forEach((key) => {\n    const plugin = editor.getPlugin({ key });\n    const AboveSlate = plugin.render.aboveSlate!;\n\n    aboveSlate = <AboveSlate>{aboveSlate}</AboveSlate>;\n  });\n\n  return aboveSlate;\n}\n","import React from 'react';\n\nimport { type CreatePlateEditorOptions, createPlateEditor } from '../editor';\nimport { type PlateProps, Plate } from './Plate';\nimport { type PlateContentProps, PlateContent } from './PlateContent';\n\nexport function PlateTest({\n  editableProps,\n  shouldNormalizeEditor,\n  variant = 'wordProcessor',\n  ...props\n}: CreatePlateEditorOptions &\n  PlateProps & {\n    editableProps?: PlateContentProps;\n    variant?: 'comment' | 'wordProcessor';\n  }) {\n  const { id, editor: _editor, plugins } = props;\n\n  let editor = _editor;\n\n  if (editor && !editor.meta.pluginList) {\n    editor = createPlateEditor({\n      id,\n      editor,\n      plugins,\n      shouldNormalizeEditor,\n    });\n  }\n\n  return (\n    <Plate {...props} editor={editor}>\n      <PlateContent\n        data-testid=\"slate-content-editable\"\n        data-variant={variant}\n        autoFocus\n        {...editableProps}\n      />\n    </Plate>\n  );\n}\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { AnyPluginConfig } from '../../lib';\n\nimport {\n  type CreatePlateEditorOptions,\n  type PlateCorePlugin,\n  type TPlateEditor,\n  createPlateEditor,\n} from '../editor';\n\n/**\n * Creates a memoized Plate editor for React components.\n *\n * This hook creates a fully configured Plate editor instance that is memoized\n * based on the provided dependencies. It's optimized for React components to\n * prevent unnecessary re-creation of the editor on every render.\n *\n * Examples:\n *\n * ```ts\n * const editor = usePlateEditor({\n *   plugins: [ParagraphPlugin, HeadingPlugin],\n *   value: [{ type: 'p', children: [{ text: 'Hello world!' }] }],\n * });\n *\n * // Editor with custom dependencies\n * const editor = usePlateEditor(\n *   {\n *     plugins: [ParagraphPlugin],\n *     enabled,\n *   },\n *   [enabled]\n * ); // Re-create when enabled changes\n * ```\n *\n * @param options - Configuration options for creating the Plate editor\n * @param deps - Additional dependencies for the useMemo hook (default: [])\n * @see {@link createPlateEditor} for detailed information on React editor creation and configuration.\n * @see {@link createSlateEditor} for a non-React version of editor creation.\n * @see {@link withPlate} for the underlying React-specific enhancement function.\n */\nexport function usePlateEditor<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n  TEnabled extends boolean | undefined = undefined,\n>(\n  options: CreatePlateEditorOptions<V, P> & { enabled?: TEnabled } = {},\n  deps: React.DependencyList = []\n): TEnabled extends false\n  ? null\n  : TEnabled extends true | undefined\n    ? TPlateEditor<V, P>\n    : TPlateEditor<V, P> | null {\n  return React.useMemo(\n    (): any => {\n      if (options.enabled === false) return null;\n\n      const editor = createPlateEditor(options);\n\n      return editor;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options.id, options.enabled, ...deps]\n  );\n}\n","import React from 'react';\n\ntype RefComponent<P, R> = React.FC<P> & {\n  ref?: React.Ref<R>;\n};\n\nexport const withHOC = <ComponentProps, HOCProps, ComponentRef, HOCRef>(\n  HOC: RefComponent<HOCProps, HOCRef>,\n  Component: RefComponent<ComponentProps, ComponentRef>,\n  hocProps?: Omit<HOCProps, 'children'>,\n  hocRef?: React.Ref<HOCRef>\n) =>\n  React.forwardRef<ComponentRef, ComponentProps>((props, componentRef) => (\n    <HOC {...(hocProps as any)} ref={hocRef}>\n      <Component {...(props as any)} ref={componentRef} />\n    </HOC>\n  ));\n"],"mappings":"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AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EAGA;AAAA,EACA;AACF;;;ACxLA,SAAS,QAAAC,aAAY;AAgBd,IAAM,qBAAqB,CAAC;AAAA,EACjC,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAMsB;AACpB,MAAI,WAAW;AAAA,IACb,GAAG;AAAA,IACH,GAAI,SACCC,iBAAgB,QAAQ,MAAM,IAC/B;AAAA,MACE,KAAK,OAAO;AAAA,MACZ;AAAA,MACA,IAAI,OAAO;AAAA,IACb;AAAA,EACN;AAEA,QAAM,EAAE,UAAU,IAAI;AAEtB,QAAM,cAAc,mBAAmB;AAAA,IACrC,YAAY;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,EACT,CAAC;AAED,aAAW;AAAA,IACT,GAAG;AAAA,IACH,YAAY;AAAA,MACV,GAAG,YAAY;AAAA,MACf,WACEC;AAAA,QACE,cAAc,QAAQ,KAAK,IAAI;AAAA,QAC/B,YAAY,YAAY;AAAA,QACxB;AAAA,MACF,KAAK;AAAA,IACT;AAAA,EACF;AAEA,aAAW;AAAA,IACT;AAAA,IACA;AAAA,IACA,CAAC,SAAS,OAAO,IAAI,SAAS,IAAI;AAAA,IAClC;AAAA,EACF;AAEA,MACE,SAAS,YAAY,SACrB,OAAO,KAAK,SAAS,WAAW,KAAK,EAAE,WAAW,GAClD;AACA,WAAO,SAAS,WAAW;AAAA,EAC7B;AAEA,SAAO;AACT;;;ACrEO,IAAM,kCAAkC,CAC7C,aAC2C;AAC3C,MAAI,qBAAqB;AAEzB,SAAO;AAAA,IACL,GAAG;AAAA,IACH,SAAS,SAAS;AAAA,IAClB,YAAY,SAAS;AAAA,IACrB,eAAe,SAAS;AAAA,IACxB,kBAAkB,SAAS;AAAA,IAC3B,YAAY,SAAS;AAAA,IACrB,WAAW,SAAS;AAAA,IACpB,aAAa;AAAA,IACb,QAAQ,SAAS;AAAA,IACjB,WAAW,SAAS;AAAA,IACpB,MAAM,SAAS;AAAA,IACf,oBAAoB,MAAM,SAAS;AAAA,IACnC,sBAAsB,MAAM;AAAA,IAC5B,SAAS,MAAM;AACb,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,IACA,gBAAgB,MAAM,SAAS,eAAe;AAAA,IAC9C,iBAAiB,MAAM;AACrB,2BAAqB;AACrB,eAAS,gBAAgB;AAAA,IAC3B;AAAA,EACF;AACF;AAGO,IAAM,iBAAiB,CAG5B,OACA,YACG;AACH,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAIA,QAAM,4BAA4B,QAAQ,KAAK;AAE/C,MAAI,6BAA6B,MAAM;AACrC,WAAO;AAAA,EACT;AAEA,SAAO,MAAM,qBAAqB;AACpC;AAYO,IAAM,cAAc,CACzB,QACA;AAAA,EACE;AAAA,EACA;AACF,MACuC;AACvC,QAAM,eAAe,gBAAgB,UAAU;AAI/C,QAAM,kBAAkB,OAAO,KAAK,WAAW;AAAA,IAC7C,CAAC,WAAW,OAAO,WAAW,UAAU;AAAA,EAC1C;AAEA,MAAI,gBAAgB,WAAW,KAAK,CAAC,aAAc;AAEnD,SAAO,CAAC,UAAe;AACrB,UAAM,aAAa,iBAAiB;AACpC,UAAM,eAAe,aACjB,gCAAgC,KAAK,IACrC;AAEJ,UAAM,iBAAiB,gBAAgB,KAAK,CAAC,WAAW;AACtD,UAAI,WAAW,OAAO,IAAI,UAAU,QAAQ,UAAU,GAAG;AACvD,eAAO;AAAA,MACT;AAEA,YAAM,gBAAgB,OAAO,SAAS,UAAU;AAEhD,YAAM,4BAA4B,cAAc;AAAA,QAC9C,GAAIC,iBAAgB,QAAQ,MAAM;AAAA,QAClC,OAAO;AAAA,MACT,CAAC;AAED,UAAI,6BAA6B,MAAM;AACrC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,CAAC;AAED,QAAI,eAAgB,QAAO;AAE3B,WAAO,eAAe,cAAc,YAAY;AAAA,EAClD;AACF;;;AC/GO,IAAM,eAAe,CAAC,QAAqB,UAAiB;AACjE,SAAO,OAAO,KAAK,YAAY,SAAS,SAAS,KAAK,CAAC,QAAQ;AAC7D,UAAM,SAASC,WAAU,QAAQ,EAAE,IAAI,CAAC;AAExC,QAAI,WAAW,OAAO,IAAI,UAAU,QAAQ,UAAU,GAAG;AACvD,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,OAAO,SAAS;AAIhC,UAAM,4BAA4B,QAAQ;AAAA,MACxC,GAAIC,iBAAgB,QAAQ,MAAM;AAAA,MAClC;AAAA,IACF,CAAC;AAED,QAAI,6BAA6B,MAAM;AACrC,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;AC9BA,OAAOC,aAAW;;;ACDlB,OAAOC,YAAW;AAElB,OAAOC,WAAU;AACjB,SAAS,yBAAyB;AAClC,OAAO,UAAU;AACjB,SAAS,0BAA0B;;;ACLnC,OAAOC,YAAW;AAElB,OAAOC,WAAU;;;ACFjB,OAAOC,YAAW;;;ACClB,OAAO,WAAW;AAKlB,SAAS,sBAAsB;AAC/B,SAAS,QAAAC,aAAY;AAad,IAAM,oBAAoB,CAAC,OAAY,QAAc;AAC1D,SAAO;AAAA,IACL,GAAG,MAAM;AAAA,IACT,WACEC,MAAM,MAAM,WAAmB,WAAW,MAAM,SAAS,KAAK;AAAA,IAChE,KAAK,eAAe,KAAK,MAAM,WAAW,GAAG;AAAA,IAC7C,OAAO,EAAE,GAAI,MAAM,WAAmB,OAAO,GAAG,MAAM,MAAM;AAAA,EAC9D;AACF;AAwDO,IAAM,eAAe,MAAM,WAAW,SAASC,cACpD,EAAE,IAAI,MAAM,OAAO,UAAU,WAAW,GAAG,MAAM,GACjD,KACA;AACA,QAAM,aAAa,kBAAkB,OAAO,GAAG;AAE/C,QAAM,UAAU,iBAAiB;AACjC,QAAM,QAAQ,MAAM;AAAA,IAClB,MACE,WACA,CAAC,CAAC,MAAM,QAAQ,MAChB,CAAC,CAAC,MAAM,OAAO,IAAI,QAAQ,MAAM,OAAO;AAAA,IAC1C,CAAC,MAAM,SAAS,MAAM,QAAQ,OAAO;AAAA,EACvC;AAEA,QAAM,QACJ,aAAa,MAAM,QAAQ,MAAM,WAAW,aAAa;AAE3D,SACE,0DACG,SAAS,oCAAC,sBAAiB,GAC5B;AAAA,IAAC;AAAA;AAAA,MACC,mBAAgB;AAAA,MAChB,qBAAmB,WAAW,mBAAmB;AAAA,MACjD,iBAAe,QAAQ,MAAM,QAAQ,KAAK;AAAA,MACzC,GAAG;AAAA,MACJ,OACE;AAAA,QACE,UAAU;AAAA,QACV,GAAG,YAAY;AAAA,MACjB;AAAA;AAAA,IAGD;AAAA,IACA,SAAS,oCAAC,sBAAiB;AAAA,EAC9B,CACF;AAEJ,CAAC;AAoBM,IAAM,YAAY,MAAM,WAG7B,CAAC,EAAE,IAAI,MAAM,QAAQ,UAAU,GAAG,MAAM,GAAG,QAAQ;AACnD,QAAM,aAAa,kBAAkB,OAAO,GAAG;AAE/C,SAAO,oCAAC,OAAK,GAAG,cAAa,QAAS;AACxC,CAAC;AAsBD,IAAM,mBAAmB,MACvB,oCAAC,UAAK,OAAO,EAAE,UAAU,EAAE,GAAG,iBAAiB,SAC5C,OAAO,cAAc,GAAG,CAC3B;AAGK,IAAM,YAAY,MAAM,WAG7B,CAAC,EAAE,IAAI,MAAM,QAAQ,UAAU,OAAO,WAAW,GAAG,MAAM,GAAG,QAAQ;AACrE,QAAM,aAAa,kBAAkB,OAAO,GAAG;AAE/C,QAAM,QAAQ,aAAa,MAAM,QAAQ,MAAM,WAAW,aAAa;AAEvE,MAAI,OAAO;AACT,WACE,0DACE,oCAAC,sBAAiB,GAClB,oCAAC,OAAK,GAAG,cACN,UAED,oCAAC,sBAAiB,CACpB,CACF;AAAA,EAEJ;AAEA,SAAO,oCAAC,OAAK,GAAG,cAAa,QAAS;AACxC,CAAC;;;ADtLM,IAAM,mBAAmB,CAC9B,QACA,WAEA,SAAS,OAAO,OAAO;AACrB,QAAM;AAAA,IACJ,QAAQ,EAAE,MAAM,eAAe,KAAK;AAAA,EACtC,IAAI;AACJ,QAAM,EAAE,UAAU,KAAK,IAAI;AAE3B,QAAM,WAAW,YAAY;AAE7B,MAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG,QAAO;AAEnD,MAAI,KAAK,OAAO,KAAK,QAAQ,OAAO,GAAG,GAAG;AACxC,UAAM,YAAY,iBAAiB;AACnC,UAAM,OAAO,aAAa;AAE1B,UAAM,WAAW,mBAAmB;AAAA,MAClC,YAAY,KAAK;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,eAAe,YAAY,CAAC,IAAI,EAAE,IAAI,OAAO,QAAQ,GAAG;AAE9D,WACE,gBAAAC,OAAA,cAAC,QAAM,GAAG,cAAe,GAAG,YACzB,QACH;AAAA,EAEJ;AAEA,SAAO;AACT;;;ADvCK,IAAM,iBAAiB,CAC5B,QACA,mBACgC;AAChC,QAAM,cAA4B,CAAC;AACnC,QAAM,mBAA2C,CAAC;AAElD,SAAO,KAAK,WAAW,QAAQ,CAAC,WAAW;AACzC,QACE,OAAO,KAAK,WACX,OAAO,KAAK,iBAAiB,QAAQ,OAAO,OAAO,OACpD;AACA,kBAAY,KAAK,iBAAiB,QAAQ,MAAM,CAAC;AAAA,IACnD;AAEA,QAAI,OAAO,KAAK,WAAW;AACzB,uBAAiB,KAAK,MAAM;AAAA,IAC9B;AAAA,EACF,CAAC;AAED,SAAO,SAAS,OAAO,EAAE,YAAY,GAAG,MAAM,GAAG;AAE/C,UAAM,WAAW,YAAY;AAE7B,gBAAY,QAAQ,CAAC,eAAe;AAClC,YAAM,cAAc,WAAW,KAAY;AAE3C,UAAI,gBAAgB,QAAW;AAC7B,cAAM,WAAW;AAAA,MACnB;AAAA,IACF,CAAC;AAED,qBAAiB,QAAQ,CAAC,WAAW;AACnC,UAAI,MAAM,KAAK,OAAO,KAAK,QAAQ,OAAO,GAAG,GAAG;AAC9C,cAAM,kBACJ,OAAO,OAAO,KAAK,cAAc,aAC7B,OAAO,KAAK,UAAU,KAAY,IACjC,OAAO,KAAK,aAAa,CAAC;AAEjC,YAAI,gBAAgB,WAAW;AAC7B,0BAAgB,YAAYC;AAAA,YACzB,MAAc;AAAA,YACf,gBAAgB;AAAA,UAClB;AAAA,QACF;AAEA,qBAAa;AAAA,UACX,GAAG;AAAA,UACH,GAAG;AAAA,QACL;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,gBAAgB;AAClB,aAAO,eAAe,EAAE,YAAY,GAAG,MAAM,CAAQ;AAAA,IACvD;AAEA,UAAM,WAAW,mBAAmB;AAAA,MAClC;AAAA,MACA,OAAO,EAAE,YAAY,GAAG,MAAM;AAAA,MAC9B;AAAA,IACF,CAAC;AAED,WAAO,gBAAAC,OAAA,cAAC,aAAW,GAAG,YAAW,MAAM,QAAS;AAAA,EAClD;AACF;;;AG/EA,OAAOC,YAAW;AAElB,OAAOC,WAAU;;;ACFjB,OAAOC,YAAW;AAiBX,IAAM,mBAAmB,CAC9B,QACA,WAEA,SAAS,OAAO,WAAW;AACzB,QAAM;AAAA,IACJ,QAAQ,EAAE,KAAK;AAAA,EACjB,IAAI;AACJ,QAAM,EAAE,UAAU,KAAK,IAAI;AAE3B,QAAM,WAAW,YAAY;AAE7B,MAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG,QAAO;AAEnD,MAAI,KAAK,OAAO,KAAK,QAAQ,OAAO,GAAG,GAAG;AACxC,UAAMC,QAAO,QAAQ;AAErB,UAAM,WAAW,mBAAmB;AAAA,MAClC,YAAY,UAAU;AAAA,MACtB;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA,IACF,CAAC;AAED,UAAM,eAAe,OAAO,CAAC,IAAI,EAAE,IAAI,OAAO,QAAQ,GAAG;AAEzD,WACE,gBAAAC,OAAA,cAACD,OAAA,EAAM,GAAG,cAAe,GAAG,YACzB,QACH;AAAA,EAEJ;AAEA,SAAO;AACT;;;ADtCK,IAAM,iBAAiB,CAC5B,QACA,mBACgC;AAChC,QAAM,cAA4B,CAAC;AACnC,QAAM,mBAA2C,CAAC;AAElD,SAAO,KAAK,WAAW,QAAQ,CAAC,WAAW;AACzC,QAAI,OAAO,KAAK,UAAU,OAAO,KAAK,iBAAiB,OAAO;AAC5D,kBAAY,KAAK,iBAAiB,QAAQ,MAAM,CAAC;AAAA,IACnD;AAEA,QAAI,OAAO,KAAK,WAAW;AACzB,uBAAiB,KAAK,MAAM;AAAA,IAC9B;AAAA,EACF,CAAC;AAED,SAAO,SAAS,OAAO,EAAE,YAAY,GAAG,MAAM,GAAG;AAE/C,UAAM,WAAW,YAAY;AAE7B,gBAAY,QAAQ,CAAC,eAAe;AAClC,YAAM,cAAc,WAAW,KAAY;AAE3C,UAAI,gBAAgB,QAAW;AAC7B,cAAM,WAAW;AAAA,MACnB;AAAA,IACF,CAAC;AAED,qBAAiB,QAAQ,CAAC,WAAW;AACnC,UAAI,MAAM,KAAK,OAAO,KAAK,QAAQ,OAAO,GAAG,GAAG;AAC9C,cAAM,kBACJ,OAAO,OAAO,KAAK,cAAc,aAC7B,OAAO,KAAK,UAAU,KAAY,IACjC,OAAO,KAAK,aAAa,CAAC;AAEjC,YAAI,gBAAgB,WAAW;AAC7B,0BAAgB,YAAYE;AAAA,YACzB,MAAc;AAAA,YACf,gBAAgB;AAAA,UAClB;AAAA,QACF;AAEA,qBAAa;AAAA,UACX,GAAG;AAAA,UACH,GAAG;AAAA,QACL;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,gBAAgB;AAClB,aAAO,eAAe,EAAE,YAAY,GAAG,MAAM,CAAQ;AAAA,IACvD;AAEA,UAAM,WAAW,mBAAmB;AAAA,MAClC;AAAA,MACA,OAAO,EAAE,YAAY,GAAG,MAAM;AAAA,MAC9B;AAAA,IACF,CAAC;AAED,WAAO,gBAAAC,OAAA,cAAC,aAAW,GAAG,YAAW,MAAM,QAAS;AAAA,EAClD;AACF;;;AJ1DO,IAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA;AAAA,EACA,GAAG;AACL,IACiC,CAAC,MAAqB;AACrD,QAAM,EAAE,GAAG,IAAI;AAEf,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,QAAQ,cAAc,EAAE;AAC9B,QAAM,kBAAkB,kBAAkB,OAAO,iBAAiB;AAClE,QAAM,gBAAgB,kBAAkB,OAAO,UAAU;AACzD,QAAM,kBAAkB,kBAAkB,OAAO,YAAY;AAC7D,QAAM,qBAAqB,kBAAkB,OAAO,eAAe;AACnE,QAAM,kBAAkB,kBAAkB,OAAO,YAAY;AAE7D,QAAM,eAAeC,OAAM,QAAQ,MAAM;AACvC,WAAO;AAAA,MACL;AAAA,MACA,iBAAkB,eAAe;AAAA,IACnC;AAAA,EACF,GAAG,CAAC,eAAe,UAAU,QAAQ,aAAa,CAAC;AAEnD,QAAM,WAAgCA,OAAM,QAAQ,MAAM;AACxD,QAAI,CAAC,mBAAmB,CAAC,aAAc;AAEvC,WAAO,CAAC,UAAU,aAAa,KAAK;AAAA,EACtC,GAAG,CAAC,cAAc,eAAe,CAAC;AAElC,QAAM,gBAAgBA,OAAM,QAAQ,MAAM;AACxC,WAAO;AAAA,MACL;AAAA,MACA,sBAAsB,eAAe;AAAA,IACvC;AAAA,EACF,GAAG,CAAC,eAAe,eAAe,QAAQ,kBAAkB,CAAC;AAE7D,QAAM,aAAaA,OAAM,QAAQ,MAAM;AACrC,WAAO,eAAe,QAAQ,mBAAmB,eAAe,UAAU;AAAA,EAC5E,GAAG,CAAC,eAAe,YAAY,QAAQ,eAAe,CAAC;AAEvD,QAAM,aAAaA,OAAM,QAAQ,MAAM;AACrC,WAAO,eAAe,QAAQ,mBAAmB,eAAe,UAAU;AAAA,EAC5E,GAAG,CAAC,eAAe,YAAY,QAAQ,eAAe,CAAC;AAEvD,QAAM,QAAuB,mBAAmB,MAAM;AACpD,UAAM,SAAwB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,iBAAa,QAAQ,CAAC,eAAe;AACnC,YAAM,UAAU,YAAY,QAAQ,EAAE,eAAe,WAAW,CAAC;AAEjE,UAAI,SAAS;AACX,eAAO,UAAU,IAAI;AAAA,MACvB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,GAAG,CAAC,UAAU,eAAe,eAAe,YAAY,UAAU,CAAC;AAEnE,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG,KAAK,eAAe;AAAA,QACrB,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,MACD,GAAG;AAAA,MACH,iBAAiB;AAAA,MACjB,WAAWC;AAAA,QACT;AAAA,QACA;AAAA,QACA,cAAc;AAAA,MAChB;AAAA,MACA,iBAAiB,WAAW,SAAS;AAAA,MACrC;AAAA,IACF;AAAA,IACA,CAAC,eAAe,OAAO,QAAQ;AAAA,EACjC;AACF;;;AMtGA,SAAS,2BAA2B;AACpC,SAAqB,WAAAC,gBAAe;AAI7B,IAAM,cAAc,CAAC,SAAgB;AAC1C,QAAM,SAAS,aAAa;AAE5B,SAAO;AAAA,IACL,MAAM;AACJ,aAAO,OAAO,IAAI,SAAS,IAAI;AAAA,IACjC;AAAA,IACA,CAAC,QAAQ,IAAI;AAAA,IACb,CAAC,GAAG,MAAM;AACR,aAAO,CAAC,CAAC,KAAK,CAAC,CAAC,KAAKC,SAAQ,OAAO,GAAG,CAAC;AAAA,IAC1C;AAAA,EACF;AACF;;;ACjBA,OAAOC,YAAW;AAKlB,SAAS,qBAAAC,0BAAyB;AAe3B,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AACF,MAEoC;AAClC,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,QAAQ,cAAc,EAAE;AAC9B,QAAM,eAAeC,mBAAkB,OAAO,UAAU;AACxD,QAAM,oBAAoBA,mBAAkB,OAAO,eAAe;AAClE,QAAM,wBAAwBA,mBAAkB,OAAO,mBAAmB;AAC1E,QAAM,sBAAsB,oBAAoB,iBAAiB,EAAE;AACnE,QAAM,yBAAyB,oBAAoB,oBAAoB,EAAE;AACzE,QAAM,qBAAqB,oBAAoB,gBAAgB,EAAE;AAEjE,QAAM,WAAWC,OAAM;AAAA,IACrB,CAAC,aAAoB;AACnB,0BAAoB;AACpB,YAAM,iBAAiB,aAAa,QAAQ,QAAQ;AAEpD,UAAI,CAAC,gBAAgB;AACnB,uBAAe,EAAE,QAAQ,OAAO,SAAS,CAAC;AAAA,MAC5C;AAAA,IACF;AAAA,IACA,CAAC,QAAQ,cAAc,mBAAmB;AAAA,EAC5C;AAEA,QAAM,gBAA6CA,OAAM;AAAA,IACvD,MAAM,CAAC,UAAU;AACf,yBAAmB;AACnB,0BAAoB,EAAE,QAAQ,MAAM,CAAC;AAAA,IACvC;AAAA,IACA,CAAC,QAAQ,mBAAmB,kBAAkB;AAAA,EAChD;AAEA,QAAM,oBAAqDA,OAAM;AAAA,IAC/D,MAAM,CAAC,cAA0B;AAC/B,6BAAuB;AACvB,8BAAwB,EAAE,QAAQ,UAAU,CAAC;AAAA,IAC/C;AAAA,IACA,CAAC,QAAQ,uBAAuB,sBAAsB;AAAA,EACxD;AAEA,SAAOA,OAAM,QAAQ,MAAM;AACzB,WAAO;AAAA,MACL,KAAK,OAAO,KAAK;AAAA,MACjB;AAAA,MACA,cAAc,OAAO;AAAA,MACrB,OAAO,OAAO;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,QAAQ,UAAU,mBAAmB,aAAa,CAAC;AACzD;;;ACzEA,OAAOC,YAAW;;;ACAlB,OAAOC,YAAW;AAIlB;AAAA,EAIE,WAAAC;AAAA,OACK;;;ACPP,SAAS,qBAAAC,0BAAyB;AAM3B,IAAM,UAAU,CAAC,cAA6B;AACnD,QAAM,SAAS,aAAa;AAC5B,QAAM,QAAQC,mBAAkB,gBAAgB,SAAS,GAAG,MAAM;AAElE,MAAI,CAAC,OAAO;AACV,WAAO,IAAI,MAAM;AAAA,MACf,WAAW,SAAS;AAAA,MACpB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;ADNO,IAAM,gBAAgB;AAQ7B,IAAM,eAA4C;AAAA,EAChD,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AACR;AAEO,IAAM,EAAE,iBAAiB,cAAc,gBAAgB,IAC5D;AAAA,EACE;AAAA,EACA,EAAE,QAAQ,QAAQ,MAAM,WAAW,kBAAkB,KAAK;AAC5D;AAEF,SAAS,SAAS;AAChB,QAAM,OAAO,QAAQ;AAErB,MAAI,QAAQC,SAAQ,OAAO,MAAM,CAAC,CAAC,CAAC,GAAG;AACrC,WAAO,gBAAAC,OAAA,cAAC,sBAAiB;AAAA,EAC3B;AAEA,SAAO;AACT;AAEA,SAAS,mBAAmB;AAC1B,QAAM,SAAS,aAAa;AAC5B,QAAM,QAAQ,cAAc;AAC5B,QAAM,YAAY,aAAa;AAC/B,QAAM,WAAW,YAAY;AAE7B,SAAO,IAAI,WAAW;AACtB,SAAO,IAAI,YAAY;AAEvB,EAAAA,OAAM,gBAAgB,MAAM;AAC1B,UAAM,IAAI,aAAa,SAAS;AAAA,EAClC,GAAG,CAAC,WAAW,KAAK,CAAC;AAErB,SAAO;AACT;;;ADvCA,SAAS,eAAe,EAAE,QAAQ,QAAQ,GAAG,MAAM,GAAsB;AACvE,QAAM,UAAU,WAAW;AAC3B,QAAM,WAAW,YAAY;AAE7B,MAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG,QAAO;AAEnD,QAAM,EAAE,UAAU,UAAU,IAAI;AAChC,QAAM,MAAM,OAAO;AACnB,QAAM,YAAY,OAAO,QAAQ;AACjC,QAAMC,WAAU,aAAc;AAE9B,QAAM,aAAa,OAAO,KAAK,WAAW,QAAQ,CAAC,MAAM;AACvD,QAAI,WAAW,UAAU,GAAG,QAAQ,EAAG,QAAO,CAAC;AAC/C,WAAO,EAAE,QAAQ,cAAc,CAAC;AAAA,EAClC,CAAC;AACD,QAAM,aAAa,OAAO,KAAK,WAAW,QAAQ,CAAC,MAAM;AACvD,QAAI,WAAW,UAAU,GAAG,QAAQ,EAAG,QAAO,CAAC;AAC/C,WAAO,EAAE,QAAQ,cAAc,CAAC;AAAA,EAClC,CAAC;AAED,UAAQ,mBAAmB;AAAA,IACzB,YAAY,QAAQ;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI,WAAW;AAEf,aAAW,QAAQ,CAACC,aAAY;AAC9B,UAAM,MAAMA,SAAQ,EAAE,GAAG,OAAO,IAAI,CAAQ;AAE5C,QAAI,KAAK;AACP,iBAAW,IAAI,EAAE,GAAG,OAAO,SAAS,CAAQ;AAAA,IAC9C;AAAA,EACF,CAAC;AAED,QAAM,eAAe,YAAY,CAAC,IAAI,EAAE,IAAI,OAAO,QAAQ,GAAG;AAE9D,MAAI,YACF,gBAAAC,OAAA,cAACF,UAAA,EAAS,GAAG,cAAe,GAAG,SAC5B,UAED,gBAAAE,OAAA,cAAC,kBAAgB,GAAG,cAAe,GAAG,OAAO,CAC/C;AAGF,aAAW,QAAQ,CAACD,aAAY;AAC9B,UAAM,MAAMA,SAAQ,EAAE,GAAG,OAAO,IAAI,CAAQ;AAE5C,QAAI,KAAK;AACP,kBAAY,IAAI,EAAE,GAAG,OAAO,UAAU,UAAU,CAAQ;AAAA,IAC1D;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,SAAS,eAAe,OAAY;AACzC,QAAM,SAAS,aAAa;AAC5B,QAAM,WAAW,YAAY;AAE7B,SACE,gBAAAC,OAAA,cAAAA,OAAA,gBACG,OAAO,KAAK,YAAY,OAAO,eAAe,IAAI,CAAC,QAAQ;AAC1D,UAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AAEvC,QAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG,QAAO;AAEnD,UAAM,YAAY,OAAO,OAAO;AAEhC,WAAO,gBAAAA,OAAA,cAAC,aAAU,KAAW,GAAG,OAAO;AAAA,EACzC,CAAC,CACH;AAEJ;AAOO,IAAM,sBAAsB,CACjC,QACA,WAEA,SAAS,OAAO,OAAO;AACrB,QAAM,EAAE,SAAS,KAAK,IAAI;AAE1B,MAAI,QAAQ,SAAS,OAAO,KAAK,MAAM;AACrC,WACE,gBAAAA,OAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,OAAO,CAAC,SAAS,IAAI;AAAA,QACrB;AAAA,QACA,OAAO,OAAO;AAAA;AAAA,MAEd,gBAAAA,OAAA,cAAC,kBAAe,QAAgB,QAAiB,GAAI,OAAe;AAAA,IACtE;AAAA,EAEJ;AACF;;;AT5GK,IAAM,oBAAoB,CAC/B,QACA,sBACmC;AACnC,SAAO,SAAS,OAAO,OAAO;AAC5B,QAAI;AAEJ,UAAM,WAAW,YAAY;AAE7B,UAAM,OAAO,YAAY,MAAM,OAAO;AAEtC,WAAO,KAAK,YAAY,KAAK,UAAU,KAAK,CAAC,QAAQ;AACnD,gBAAU;AAAA,QACR;AAAA,QACAC,WAAU,QAAQ,EAAE,IAAI,CAAC;AAAA,MAC3B,EAAE;AAAA,QACA,GAAG;AAAA,QACH;AAAA,MACF,CAAQ;AAER,aAAO,CAAC,CAAC;AAAA,IACX,CAAC;AAED,QAAI,QAAS,QAAO;AACpB,QAAI,mBAAmB;AACrB,aAAO,kBAAkB,EAAE,GAAG,OAAO,KAAK,CAAQ;AAAA,IACpD;AAEA,UAAM,WAAW,mBAAmB;AAAA,MAClC;AAAA,MACA,OAAO,EAAE,GAAG,OAAO,KAAK;AAAA,MACxB;AAAA,IACF,CAAC;AAED,WACE,gBAAAC,QAAA;AAAA,MAAC;AAAA;AAAA,QACC,SAAS,SAAS;AAAA,QAClB,OAAO,CAAC,SAAS,SAAS,IAAI;AAAA,QAC9B;AAAA,QACA,OAAO,SAAS,QAAQ,QAAQ;AAAA;AAAA,MAEhC,gBAAAA,QAAA,cAAC,gBAAc,GAAG,YACf,MAAM,UAEP,gBAAAA,QAAA,cAAC,kBAAgB,GAAG,UAAU,CAChC;AAAA,IACF;AAAA,EAEJ;AACF;;;AYhEA,OAAOC,aAAW;AAIlB,SAAoB,QAAAC,aAAY;AAIhC,IAAM;AAAA,EACJ,yBAAyB;AAAA,EACzB;AAAA,EACA,yBAAyB;AAC3B,IAAI;AAAA,EACF;AAAA,IACE,UAAUC,MAAoB,IAAI;AAAA,IAClC,cAAcA,MAAwC,CAAC,CAAC;AAAA,IACxD,kBAAkBA,MAAe,CAAC,CAAC;AAAA,EACrC;AAAA,EACA;AAAA,IACE,MAAM;AAAA,EACR;AACF;AAIO,IAAM,+BAAgE,CAC3E,YAEA,yBAAyB;AAAA,EACvB,OAAO,OAAO,YAAY,WAAW,UAAU;AAAA,EAC/C,eAAe;AAAA,EACf,GAAI,OAAO,YAAY,WAAW,UAAU,CAAC;AAC/C,CAAC;AAKI,IAAM,2BAA2B,MACtC,CAAC,CAAC,6BAA6B,EAAE;AAO5B,IAAM,0BAA0B,CAAC,WAAuC;AAC7E,QAAM,YAAqCC,QAAM;AAAA,IAC/C,MACEC,MAAK,CAAC,QAAQ;AACZ,YAAM,eAAe,IAAI,qBAAqB,KAAK,YAAY;AAE/D,YAAM,QAAQ,CAAC,OAAyC;AACtD,YAAI,CAAC,GAAI,QAAO;AAEhB,eAAO,aAAa,EAAE,KAAK;AAAA,MAC7B;AAEA,UAAI,OAAQ,QAAO,MAAM,MAAM;AAE/B,YAAM,cAAc;AAAA,QAClB,IAAI,qBAAqB,KAAK,QAAQ;AAAA,QACtC,GAAG,IAAI,qBAAqB,KAAK,gBAAgB;AAAA,MACnD;AAEA,iBAAW,MAAM,aAAa;AAC5B,cAAM,QAAQ,MAAM,EAAE;AAEtB,YAAI,MAAO,QAAO;AAAA,MACpB;AAEA,aAAO;AAAA,IACT,CAAC;AAAA,IACH,CAAC,MAAM;AAAA,EACT;AAEA,SAAO,kBAAkB,6BAA6B,GAAG,SAAS;AACpE;;;AnP3DO,IAAM,cAAc;AAEpB,IAAM,qBAAqB,OAAO,cAAc;AAEhD,IAAM,mBAAmB,CAAsC;AAAA,EACpE;AAAA,EACA,YAAY;AAAA,EACZ,eAAe,EAAE,SAAS,KAAK;AAAA,EAC/B,WAAW;AAAA,EACX;AAAA,EACA,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY,EAAE,SAAS,KAAK;AAAA,EAC5B,kBAAkB;AAAA,EAClB,gBAAgB;AAAA,EAChB,mBAAmB;AAAA,EACnB,eAAe;AAAA,EACf,WAAW;AAAA,EACX,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,GAAG;AACL,IAAiC,CAAC,MAChC;AAAA,EACE;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACL;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,kBAAkB;AAAA,IAClB,QAAQ,CAAC,WAAW;AAAA,MAClB,eAAeC,MAAK,CAAC,SAAS;AAAA,QAC5B,QAAQ,IAAI,MAAM,MAAM;AAAA,QACxB,SAAS,IAAI,MAAM,aAAa;AAAA,MAClC,EAAE;AAAA,MACF,kBAAkBA,MAAK,CAAC,SAAS;AAAA,QAC/B,WAAW,IAAI,MAAM,MAAM,EAAE;AAAA,QAC7B,SAAS,IAAI,MAAM,gBAAgB;AAAA,MACrC,EAAE;AAAA,MACF,cAAcA,MAAK,CAAC,SAAS;AAAA,QAC3B,OAAO,IAAI,MAAM,MAAM,EAAE;AAAA,QACzB,SAAS,IAAI,MAAM,YAAY;AAAA,MACjC,EAAE;AAAA,IACJ;AAAA,EACF;AACF;AAEF,IAAM;AAAA,EACJ,eAAe;AAAA,EACf;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAAA,EACf,eAAe;AAAA,EACf,eAAe;AACjB,IAAI,iBAAiB;AAId,IAAM,gBAAgB,CAAC,OAAgB;AAE5C,QAAM,aACJ,mBAAmB,EAAE,OAAO,IAAI,eAAe,MAAM,CAAC,KAAK;AAE7D,QAAM,CAAC,gBAAgB,IAAIC,QAAM,SAAS,CAAC,CAAC,WAAW,KAAK;AAG5D,QAAM,QACJ,mBACI;AAAA;AAAA,IAEA,wBAAwB,EAAE;AAAA;AAahC,QAAM,wBAAwB,yBAAyB;AACvD,QAAM,gBAAgB,QAAQ,kBAAkB,CAAC,CAAC,EAAE,cAAc;AAElE,MAAI,CAAC,OAAO;AACV,QAAI,uBAAuB;AACzB,aAAO;AAAA,IACT;AAEA,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAEO,IAAM,cAAuC,CAAC,KAAK,YAAY;AACpE,QAAM,QAAQ;AAAA,IACZ,OAAO,YAAY,WAAW,UAAU,SAAS;AAAA,EACnD;AAEA,SAAO,gBAAgB,OAAO,GAAG;AACnC;AAEO,IAAM,gBAAiB,CAAC,KAAK,YAAY;AAC9C,QAAM,QAAQ;AAAA,IACZ,OAAO,YAAY,WAAW,UAAU,SAAS;AAAA,EACnD;AAEA,SAAOC,mBAAkB,OAAO,GAAG;AACrC;AAEO,IAAM,gBAAiB,CAAC,KAAK,YAAY;AAC9C,QAAM,QAAQ;AAAA,IACZ,OAAO,YAAY,WAAW,UAAU,SAAS;AAAA,EACnD;AAEA,SAAO,kBAAkB,OAAO,GAAG;AACrC;AAKO,IAAM,cAAc,MACzBA,mBAAkB,cAAc,GAAG,QAAQ,EAAE;AAExC,IAAM,wBAAwB,CAAC,OAAgB;AACpD,SAAOA,mBAAkB,cAAc,EAAE,GAAG,cAAc;AAC5D;AAEO,IAAM,qBAAqB,CAAC,OAAgB;AACjD,SAAOA,mBAAkB,cAAc,EAAE,GAAG,WAAW;AACzD;AAGO,IAAM,eAAe,CAAC,OAAgB;AAC3C,QAAM,YAAY,mBAAmB,EAAE;AACvC,QAAM,eAAe,sBAAsB,EAAE;AAE7C,SAAO,UAAU,UAAU,YAAY;AACzC;AAEO,IAAM,mBAAmB,CAAC,OAAyB;AACxD,SAAO,CAAC,CAACA,mBAAkB,cAAc,EAAE,GAAG,WAAW;AAC3D;AAMO,IAAM,oBAAoB,CAAC,OAAyB;AACzD,SAAO,CAAC,CAACA,mBAAkB,cAAc,EAAE,GAAG,UAAU;AAC1D;AAGO,IAAM,qBAAqB,CAAC,OAAyB;AAC1D,SAAO,CAAC,CAACA,mBAAkB,cAAc,EAAE,GAAG,WAAW;AAC3D;AAYO,IAAM,eAAe,CAC1B,OAC8B;AAC9B,QAAM,QAAQ,cAAc,EAAE;AAC9B,QAAM,SACHA,mBAAkB,OAAO,QAAQ,KAAW,0BAA0B;AAEzE,SAAO,QAAQ;AAEf,SAAO;AACT;AAGO,IAAM,qBAAqB,CAAC,OACjC,cAAc,EAAE,EAAE,yBAAyB,EAAE;AAGxC,IAAM,iBAAiB,CAC5B,OACM;AACN,SAAO,cAAc,EAAE,EAAE,sBAAsB,EAAE;AACnD;AAGO,IAAM,mBAAmB,CAAC,OAAgB;AAC/C,SAAOA,mBAAkB,cAAc,EAAE,GAAG,eAAe;AAC7D;AAGO,IAAM,sBAAsB,CAAC,OAAgB;AAClD,SAAOA,mBAAkB,cAAc,EAAE,GAAG,kBAAkB;AAChE;AAGO,IAAM,iBAAiB,CAAC,OAC7B,cAAc,EAAE,EAAE,qBAAqB,EAAE;AAGpC,IAAM,kBAAkB,CAAC,OAAgB;AAC9C,SAAOA,mBAAkB,cAAc,EAAE,GAAG,cAAc;AAC5D;AAIO,IAAM,sBAAsB,CAAC,KAAqB,OAAgB;AACvE,QAAM,qBAAqBD,QAAM,OAAO,CAAC;AAEzC,QAAM,QAAQ,cAAc,EAAE;AAE9B,QAAM,qBAAqB,gBAAgB,OAAO,iBAAiB;AACnE,QAAM,sBAAsB,gBAAgB,OAAO,kBAAkB;AACrE,QAAM,kBAAkB,gBAAgB,OAAO,cAAc;AAC7D,QAAM,mBAAmB,gBAAgB,OAAO,eAAe;AAE/D,SAAOA,QAAM,YAAY,MAAM;AAC7B,UAAM,cAAc,mBAAmB,UAAU;AAEjD,YAAQ,KAAK;AAAA,MACX,KAAK,mBAAmB;AACtB,2BAAmB,WAAW;AAE9B;AAAA,MACF;AAAA,MACA,KAAK,iBAAiB;AACpB,yBAAiB,WAAW;AAE5B;AAAA,MACF;AAAA,MACA,KAAK,oBAAoB;AACvB,4BAAoB,WAAW;AAE/B;AAAA,MACF;AAAA,MACA,KAAK,gBAAgB;AACnB,wBAAgB,WAAW;AAE3B;AAAA,MACF;AAAA,IACF;AAEA,uBAAmB,UAAU;AAAA,EAC/B,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAEO,IAAM,gBAAgB,CAAC,OAAgB;AAC5C,QAAM,iBAAiB,oBAAoB,mBAAmB,EAAE;AAEhE,SAAOA,QAAM,YAAY,MAAM;AAC7B,mBAAe;AAAA,EACjB,GAAG,CAAC,cAAc,CAAC;AACrB;;;AoPjTA,OAAOE,aAAW;AAcX,SAAS,gBAId,GACA,IAGA;AACA,QAAM,SAAS,aAAa,EAAE;AAE9B,SAAOC,QAAM;AAAA,IACX,OACG;AAAA,MACC,GAAGC,iBAAgB,QAAQ,CAAC;AAAA,MAC5B,OAAO,OAAO;AAAA,IAChB;AAAA,IACF,CAAC,QAAQ,CAAC;AAAA,EACZ;AACF;;;ACjCA,OAAOC,aAAW;AAElB,SAAS,qBAAAC,0BAAyB;AAClC,SAAS,kBAAkB;AAWpB,IAAM,oBAAoB,CAC/B,UACA,MACA,EAAE,IAAI,aAAa,CAAC,GAAM,MAAS,MAAM,EAAE,IAAiC,CAAC,MACvE;AACN,QAAM,eAAeC,QAAM;AAAA,IACzB,MACE;AAAA,MACE,WAAW,KAAK;AAAA,MAChB,CAAC,EAAE,OAAO,GAAG,SAAS,SAAS,QAAQ,IAAI;AAAA,MAC3C;AAAA,IACF;AAAA;AAAA,IAEF;AAAA,EACF;AAEA,SAAOC,mBAAkB,cAAc,EAAE,GAAG,YAAY;AAC1D;;;AC7BA,SAAS,kBAAAC,iBAAgB,iBAAAC,sBAAqB;AAoBvC,SAAS,gBAMd,QACA,QACG,MAkBS;AACZ,QAAM,SAAS,aAAa;AAE5B,SAAO,sBAAsB,QAAQ,QAAQ,KAAK,GAAG,IAAI;AAC3D;AAEO,SAAS,sBAMd,QACA,QACA,QACG,MAkBS;AACZ,QAAM,QAAQ,OAAO,gBAAgB,MAAM;AAE3C,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AAEA,MAAI,EAAE,OAAO,MAAM,IAAI,OAAO,MAAM,EAAE,OAAO,MAAM,YAAY;AAC7D,WAAO,IAAI,MAAM;AAAA,MACf,oBAAoB,GAAU,oCAAoC,OAAO,GAAG;AAAA,MAC5E;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAEA,SAAQC,eAAsB,OAAO,KAAK,GAAG,IAAI;AACnD;AAQO,SAAS,iBACd,QACA,UACA;AAAA,EACE;AAAA,EACA;AACF,IAKI,CAAC,GACF;AACH,QAAM,SAAS,aAAa,EAAE;AAE9B,SAAO,uBAAuB,QAAQ,QAAQ,UAAU;AAAA,IACtD;AAAA,EACF,CAAC;AACH;AAEO,SAAS,uBACd,QACA,QACA,UACA;AAAA,EACE;AACF,IAGI,CAAC,GACF;AACH,QAAM,QAAQ,OAAO,gBAAgB,MAAM;AAE3C,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AAGA,SAAOC,gBAAe,OAAO,UAAU,UAAU;AACnD;;;AvPrIO,IAAM,aAAa,CACxB,YAAY,kBACN;AACN,QAAM,SAAS,aAAa;AAC5B,QAAM,QAAQC,mBAAkB,gBAAgB,SAAS,GAAG,SAAS;AAErE,MAAI,CAAC,OAAO;AACV,WAAO,IAAI,MAAM;AAAA,MACf,cAAc,SAAS;AAAA,MACvB;AAAA,IACF;AAEA,WAAO,CAAC;AAAA,EACV;AAEA,SAAO;AACT;;;AwP3BA,OAAOC,aAAW;AAIlB,SAAS,qBAAAC,0BAAyB;AAClC,SAAS,cAAAC,mBAAkB;AASpB,IAAM,qBAAqB,CAChC,UACA,MACA;AAAA,EACE;AAAA,EACA,aAAa,CAAC,GAAM,MAAS,MAAM;AACrC,IAAkC,CAAC,MAC7B;AACN,QAAM,eAAeC,QAAM;AAAA,IACzB,MACEC;AAAA,MACE,aAAa,KAAK;AAAA,MAClB,CAAC,OAAO,SAAS,SAAS,OAAO,IAAI;AAAA,MACrC;AAAA,IACF;AAAA;AAAA,IAEF;AAAA,EACF;AAEA,SAAOC,mBAAkB,gBAAgB,GAAG,GAAG,YAAY;AAC7D;;;AC9BO,IAAM,kBAAkB,CAAC,OAAgB;AAC9C,QAAM,QAAQ,oBAAoB,OAAO;AACzC,QAAM,OAAO,oBAAoB,MAAM;AACvC,QAAM,OAAO,oBAAoB,MAAM;AACvC,QAAM,aAAa,aAAa,EAAE;AAElC,MAAI,GAAI,QAAO;AACf,MAAI,MAAO,QAAO;AAClB,MAAI,KAAM,QAAO;AAEjB,SAAO,QAAQ,cAAc;AAC/B;;;A1PNO,SAAS,oBAAoB;AAAA,EAClC;AAAA,EACA;AACF,GAGG;AACD,QAAM,SAAS,aAAa,EAAE;AAE9B,SACE,gBAAAC,QAAA,cAAAA,QAAA,gBACG,OAAO,QAAQ,OAAO,KAAK,SAAS,EAAE;AAAA,IACrC,CAAC,CAAC,cAAc,YAAY,MAAM;AAChC,UACE,CAAC,gBACD,CAACC,WAAU,aAAa,IAAI,KAC5B,CAAC,aAAa,SACd;AACA,eAAO;AAAA,MACT;AAEA,aACE,gBAAAD,QAAA;AAAA,QAAC;AAAA;AAAA,UACC;AAAA,UACA,KAAK;AAAA,UACL;AAAA,UACA;AAAA;AAAA,MACF;AAAA,IAEJ;AAAA,EACF,CACF;AAEJ;AAEA,SAAS,aAAa;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,EAAE,MAAM,SAAS,GAAG,QAAQ,IAAI;AAEtC,QAAM,eAAe;AAAA,IACnB;AAAA,IACA,CAAC,OAAO,iBAAiB;AACvB,UACE,QAAS;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC,MAAM,SACP,CAACC,WAAU,QAAQ,cAAc,GACjC;AAEA,cAAM,eAAe;AAAA,MACvB;AAAA,IACF;AAAA,IACA;AAAA,MACE,yBAAyB;AAAA,MACzB,GAAG;AAAA,IACL;AAAA,IACA,CAAC;AAAA,EACH;AAEA,EAAAC,WAAU,MAAM;AACd,QAAI,YAAY,SAAS;AACvB,mBAAa,YAAY,OAAO;AAAA,IAClC;AAAA,EACF,GAAG,CAAC,cAAc,WAAW,CAAC;AAE9B,SAAO;AACT;;;A2PrFA,OAAOC,aAAW;AAIX,IAAM,sBAAsB,CAAC,EAAE,GAAG,MAAuB;AAC9D,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,aAAa,cAAc,EAAE;AAEnC,EAAAC,QAAM,UAAU,MAAM;AACpB,WAAO,IAAI,aAAa;AAAA,EAC1B,GAAG,CAAC,QAAQ,UAAU,CAAC;AAEvB,SAAO;AACT;;;ACbA,OAAOC,aAAW;AAElB,SAAS,mBAAAC,kBAAiB,qBAAAC,0BAAyB;AAO5C,SAAS,sBAAsB;AAAA,EACpC;AAAA,EACA;AACF,GAGG;AACD,QAAM,SAAS,aAAa,EAAE;AAE9B,SAAO,WAAWC,iBAAgB,QAAQ,MAAM,CAAQ;AAExD,SAAO;AACT;AAEO,SAAS,gBAAgB,EAAE,GAAG,GAAoB;AACvD,QAAM,QAAQ,cAAc,EAAE;AAC9B,QAAM,SAASC,mBAAkB,OAAO,QAAQ;AAChD,QAAM,eAAeC,iBAAgB,OAAO,WAAW;AAEvD,EAAAC,QAAM,UAAU,MAAM;AACpB,iBAAa,IAAI;AAEjB,WAAO,MAAM;AACX,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,YAAY,CAAC;AAEjB,SACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,OAAO,KAAK,YAAY,SAAS,IAAI,CAAC,QAAQ;AAC7C,WACE,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA,QAAQC,WAAU,QAAQ,EAAE,IAAI,CAAC;AAAA;AAAA,IACnC;AAAA,EAEJ,CAAC,CACH;AAEJ;;;ACjDA,OAAOC,WAAS,aAAa;;;ACA7B,OAAOC,aAAW;AAQlB,SAAS,sBAAsB;AAC7B,EAAC,WAAmB,uBAChB,WAAmB,uBAAuB,KAAK;AACrD;AAEA,oBAAoB;AAEb,SAAS,sBAAsB,UAAoB;AACxD,EAAAA,QAAM,UAAU,MAAM;AACpB,QACE,CAAC,YACA,WAAmB,uBACnB,WAAmB,sBAAsB,GAC1C;AACA,cAAQ,KAAK,kDAAkD;AAAA,IACjE;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AACf;;;ADMA,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAGG;AACD,SACE,gBAAAC,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,UAAU,YAAY,QAAQ,IAAI;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,OAAQ;AAAA,MACf;AAAA;AAAA,IAEC;AAAA,EACH;AAEJ;AAEO,SAAS,MACd,OACA;AACA,QAAM,KAAK,MAAM;AAEjB,QAAM,eAAeA,QAAM,OAAuB,IAAI;AACtD,QAAM,YAAYA,QAAM,OAAuB,IAAI;AAEnD,wBAAsB,MAAM,uBAAuB;AAEnD,MAAI,CAAC,MAAM,OAAQ,QAAO;AAE1B,QAAM,OAAO,KAAK,MAAM,OAAO,GAAG,WAAW,KAAK,EAAE;AAEpD,SACE,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,KAAK,MAAM,OAAO,KAAK;AAAA,MACvB;AAAA,MACA;AAAA,MACC,GAAI;AAAA;AAAA,EACP;AAEJ;;;AE1FA,OAAOC,aAAoC;AASpC,IAAM,iBAAiB,CAAC;AAAA,EAC7B;AAAA,EACA,GAAG;AACL,MAAsC;AACpC,QAAM,SAAS,aAAa;AAC5B,QAAM,WAAW,kBAAkB;AAEnC,QAAM,eAAe,sBAAsB;AAE3C,MAAI,iBAAkC;AACtC,MAAI,kBAAmC;AAEvC,QAAM,gBACJ,gBAAAC,QAAA,cAAC,SAAI,IAAI,OAAO,KAAK,KAAK,KAAK,cAAe,GAAG,SAC9C,QACH;AAGF,SAAO,KAAK,YAAY,OAAO,gBAAgB,QAAQ,CAAC,QAAQ;AAC9D,UAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,QAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG;AAE5C,UAAM,kBAAkB,OAAO,OAAO;AAEtC,sBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,iBACD,gBAAAA,QAAA,cAAC,mBAAiB,GAAG,OAAO,CAC9B;AAAA,EAEJ,CAAC;AAED,SAAO,KAAK,YAAY,OAAO,eAAe,QAAQ,CAAC,QAAQ;AAC7D,UAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,QAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG;AAE5C,UAAM,iBAAiB,OAAO,OAAO;AAErC,qBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,gBACD,gBAAAA,QAAA,cAAC,kBAAgB,GAAG,OAAO,CAC7B;AAAA,EAEJ,CAAC;AAED,SACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,iBACA,eACA,cACH;AAEJ;AAEA,eAAe,cAAc;;;AChE7B,OAAOC,WAAS,cAAc;AAE9B,SAAS,kBAAAC,uBAAsB;AAC/B,SAAS,aAAAC,kBAAiB;;;ACH1B,OAAOC,aAAW;AAIlB,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAA0B,mBAAAC,kBAAiB,qBAAAC,0BAAyB;AAc7D,IAAM,wBAAwB,CAAC;AAAA,EACpC,IAAI;AACN,MAAkC;AAChC,QAAM,cAAc,YAAY;AAChC,QAAM,KAAK,UAAU;AAGrB,QAAM,mBAAmBC,QAAM;AAAA,IAC7B,MACE;AAAA,MACE,qBAAqB,KAAK;AAAA,MAK1B,CAAC,UAAU,MAAM,KAAK,EAAE;AAAA,IAC1B;AAAA,IACF,CAAC,EAAE;AAAA,EACL;AAEA,QAAM,kBAAkB;AAAA,IACtB,6BAA6B,EAAE,QAAQ,gBAAgB;AAAA,IACvD,CAAC,gBAAgB;AAAA,EACnB;AAEA,QAAM,sBAAsB;AAAA,IAC1BC,iBAAgB,6BAA6B,GAAG,kBAAkB;AAAA,EACpE;AAEA,QAAM,cAAc;AAAA,IAClBA,iBAAgB,6BAA6B,GAAG,UAAU;AAAA,EAC5D;AAEA,QAAM,QAAQ,cAAc,EAAE;AAC9B,QAAM,UAAUC,mBAAkB,OAAO,SAAS;AAClD,QAAM,UAAU,WAAW;AAG3B,EAAAF,QAAM,UAAU,MAAM;AACpB,oBAAiB,SAAiB,IAAI;AAOtC,WAAO,MAAM;AACX,sBAAgB,IAAI;AACpB,kBAAY,CAAC,aAAc,aAAa,KAAK,OAAO,QAAS;AAAA,IAC/D;AAAA,EACF,GAAG,CAAC,OAAO,iBAAiB,aAAa,EAAE,CAAC;AAG5C,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,SAAS;AACX,0BAAoB,CAAC,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AAEzC,aAAO,MAAM;AACX,4BAAoB,CAAC,QAAQ,IAAI,OAAO,CAAC,MAAM,MAAM,EAAE,CAAC;AAAA,MAC1D;AAAA,IACF;AAAA,EACF,GAAG,CAAC,IAAI,SAAS,mBAAmB,CAAC;AAGrC,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,MAAM,SAAS;AACjB,kBAAY,EAAE;AAAA,IAChB;AAAA,EACF,GAAG,CAAC,IAAI,SAAS,WAAW,CAAC;AAE7B,SAAO;AACT;;;AC3FA,OAAOG,aAAW;AAYX,SAAS,WAAW;AAAA,EACzB;AAAA,EACA;AACF,GAGG;AACD,QAAM,aAAa,cAAc,EAAE,GAAG,CAAC;AAEvC,QAAM,SAAS,aAAa,EAAE;AAE9B,MAAI,aACF,gBAAAC,QAAA,cAAC,SAAO,GAAI,cAAqB,QAAS;AAG5C,SAAO,KAAK,YAAY,OAAO,WAAW,QAAQ,CAAC,QAAQ;AACzD,UAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,UAAM,aAAa,OAAO,OAAO;AAEjC,iBAAa,gBAAAA,QAAA,cAAC,kBAAY,UAAW;AAAA,EACvC,CAAC;AAED,SAAO;AACT;;;AFSA,IAAM,eAAeC,QAAM;AAAA,EACzB,CACE;AAAA,IACE;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA,GAAG;AAAA,EACL,GACA,QACG;AACH,UAAM,EAAE,GAAG,IAAI;AAEf,UAAM,SAAS,aAAa,EAAE;AAE9B,UAAM,gBAAgB,kBAAkB;AACxC,UAAM,WAAW,MAAM,WAAW,OAAQ,gBAAgB;AAG1D,WAAO,IAAI,WAAW;AAEtB,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,gBAAgB,iBAAiB,EAAE,GAAG,OAAO,SAAS,CAAC;AAE7D,UAAM,cAAc,OAA8B,IAAI;AACtD,UAAM,cAAcC,gBAAe,KAAK,WAAW;AAEnD,UAAM,WAAW,gBAAAD,QAAA,cAAC,YAAS,KAAK,aAAc,GAAI,eAAuB;AAEzE,QAAI,gBAAiC;AACrC,QAAI,iBAAkC;AAEtC,WAAO,KAAK,YAAY,OAAO,eAAe,QAAQ,CAAC,QAAQ;AAC7D,YAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,UAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG;AAE5C,YAAM,iBAAiB,OAAO,OAAO;AAErC,uBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,gBACD,gBAAAA,QAAA,cAAC,kBAAgB,GAAG,eAAe,CACrC;AAAA,IAEJ,CAAC;AAED,WAAO,KAAK,YAAY,OAAO,cAAc,QAAQ,CAAC,QAAQ;AAC5D,YAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,UAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG;AAE5C,YAAM,gBAAgB,OAAO,OAAO;AAEpC,sBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,eACD,gBAAAA,QAAA,cAAC,iBAAe,GAAG,eAAe,CACpC;AAAA,IAEJ,CAAC;AAED,QAAI,gBACF,gBAAAA,QAAA,cAAAA,QAAA,gBACG,iBAAiB,eAAe,QAAQ,IAAI,UAE7C,gBAAAA,QAAA,cAAC,uBAAoB,IAAQ,GAC7B,gBAAAA,QAAA,cAAC,uBAAoB,IAAQ,aAA0B,GACvD,gBAAAA,QAAA,cAAC,mBAAgB,IAAQ,GACzB,gBAAAA,QAAA,cAAC,yBAAsB,IAAQ,CACjC;AAGF,WAAO,KAAK,YAAY,OAAO,cAAc,QAAQ,CAAC,QAAQ;AAC5D,YAAM,SAAS,OAAO,UAAU,EAAE,IAAI,CAAC;AACvC,UAAI,WAAW,UAAU,QAAQ,QAAQ,EAAG;AAE5C,YAAM,gBAAgB,OAAO,OAAO;AAEpC,sBAAgB,gBAAAA,QAAA,cAAC,qBAAe,aAAc;AAAA,IAChD,CAAC;AAED,WACE,gBAAAA,QAAA,cAAC,cAAW,MACV,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,QACV;AAAA,QACA;AAAA;AAAA,IACF,GAEC,gBACA,eACA,aACH;AAAA,EAEJ;AACF;AACA,aAAa,cAAc;AAI3B,SAAS,kBAAkB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAMG;AACD,QAAM,QAAQ,cAAc,EAAE;AAG9B,EAAAE,QAAM,gBAAgB,MAAM;AAC1B,QAAI,UAAU;AACZ,YAAM,YAAY,IAAI;AACtB;AAAA,IACF;AAEA,QAAIC,WAAU,QAAQ,GAAG;AACvB,YAAM,YAAY,QAAQ;AAAA,IAC5B;AAAA,EACF,GAAG,CAAC,UAAU,OAAO,KAAK,UAAU,KAAK,CAAC;AAE1C,QAAM,eAAeD,QAAM,OAAO,QAAQ;AAE1C,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,uBAAuB,aAAa,WAAW,CAAC,UAAU;AAC5D,aAAO,GAAG,MAAM,EAAE,MAAM,YAAY,CAAC;AAAA,IACvC;AAEA,iBAAa,UAAU;AAAA,EACzB,GAAG,CAAC,qBAAqB,QAAQ,QAAQ,CAAC;AAE1C,SAAO;AACT;;;AG3LA,OAAOE,aAAW;;;ACAlB,OAAOC,aAAW;AA4CX,SAAS,eAKd,UAAmE,CAAC,GACpE,OAA6B,CAAC,GAKA;AAC9B,SAAOC,QAAM;AAAA,IACX,MAAW;AACT,UAAI,QAAQ,YAAY,MAAO,QAAO;AAEtC,YAAM,SAAS,kBAAkB,OAAO;AAExC,aAAO;AAAA,IACT;AAAA;AAAA,IAEA,CAAC,QAAQ,IAAI,QAAQ,SAAS,GAAG,IAAI;AAAA,EACvC;AACF;;;AD7DO,SAAS,UAAU;AAAA,EACxB;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV,GAAG;AACL,GAIK;AACH,QAAM,EAAE,IAAI,QAAQ,SAAS,SAAAC,SAAQ,IAAI;AAEzC,MAAI,SAAS;AAEb,MAAI,UAAU,CAAC,OAAO,KAAK,YAAY;AACrC,aAAS,kBAAkB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,SAAAA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SACE,gBAAAC,QAAA,cAAC,SAAO,GAAG,OAAO,UAChB,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,eAAY;AAAA,MACZ,gBAAc;AAAA,MACd,WAAS;AAAA,MACR,GAAG;AAAA;AAAA,EACN,CACF;AAEJ;;;AEvCA,OAAOC,aAAW;AAMX,IAAM,UAAU,CACrB,KACA,WACA,UACA,WAEAA,QAAM,WAAyC,CAAC,OAAO,iBACrD,gBAAAA,QAAA,cAAC,OAAK,GAAI,UAAkB,KAAK,UAC/B,gBAAAA,QAAA,cAAC,aAAW,GAAI,OAAe,KAAK,cAAc,CACpD,CACD;","names":["React","useEffect","isDefined","useAtomStoreValue","React","atom","useAtomStoreValue","createEditor","nanoid","isDefined","merge","config","plugins","result","plugins","merge","isDefined","PathApi","PathApi","ElementApi","ElementApi","plugins","plugins","ElementApi","plugin","ElementApi","TextApi","TextApi","isDefined","isDefined","merge","merge","ElementApi","TextApi","ElementApi","NodeApi","TextApi","ElementApi","NodeApi","PathApi","isPlainObject","isPlainObject","immer","isSet","current","Immer","base","Immer","Path","ancestors","path","options","arguments","length","undefined","reverse","paths","levels","slice","common","another","i","av","bv","push","compare","min","Math","endsAfter","as","bs","equals","endsAt","endsBefore","every","n","hasPrevious","isAfter","isAncestor","isBefore","isChild","isCommon","isDescendant","isParent","isPath","value","Array","isArray","isSibling","al","bl","list","next","Error","concat","last","operationCanTransformPath","operation","type","parent","previous","relative","ancestor","transform","p","affinity","op","position","newPath","onp","copy","o","toPrimitive","toPropertyKey","applyToDraft","editor","selection","node","Node","index","children","splice","point","key","Range","points","Point","offset","text","leaf","before","after","get","prevPath","prev","Text","isText","Scrubber","stringify","truePath","newParent","newIndex","result","texts","preferNext","properties","newProperties","hasOwnProperty","isRange","_objectSpread","newNode","GeneralTransforms","createDraft","finishDraft","isDraft","NodeTransforms","insertNodes","nodes","liftNodes","mergeNodes","moveNodes","removeNodes","setNodes","props","splitNodes","unsetNodes","unwrapNodes","wrapNodes","element","SelectionTransforms","collapse","deselect","move","select","target","setPoint","setSelection","isDeepEqual","a","b","isPlainObject","objectWithoutPropertiesLoose","edges","range","anchor","focus","isBackward","end","surrounds","intersectionRange","intersection","includes","rs","re","ts","te","start","isAfterStart","isBeforeEnd","isPoint","rest","_objectWithoutProperties","_excluded","s1","e1","s2","e2","isCollapsed","isExpanded","isForward","produce","r","affinityAnchor","affinityFocus","isElement","isNodeList","Editor","isEditor","Element","isElementList","val","isElementProps","isElementType","elementVal","elementKey","matches","IS_NODE_LIST_CACHE","WeakMap","root","entry","child","c","childPath","descendant","descendants","elements","extractProps","_excluded2","first","fragment","newRoot","nodeEntries","pass","_ref","getIf","has","isNode","cachedResult","set","isTextProps","from","to","visited","Set","add","nextIndex","parentPath","string","map","join","Operation","isNodeOperation","isOperation","endsWith","isOperationList","isSelectionOperation","isTextOperation","inverse","inversePath","inverseNewPath","IS_EDITOR_CACHE","cachedIsEditor","addMark","apply","deleteFragment","insertBreak","insertSoftBreak","insertFragment","insertNode","insertText","isElementReadOnly","isInline","isSelectable","isVoid","normalizeNode","onChange","removeMark","getDirtyPaths","marks","operations","above","at","deleteBackward","unit","deleteForward","elementReadOnly","hasBlocks","hasInlines","hasPath","hasTexts","isBlock","isEdge","isEmpty","isEnd","isNormalizing","isStart","getMarks","normalize","pathRef","pathRefs","pointRef","pointRefs","positions","rangeRef","rangeRefs","setNormalizing","unhangRange","void","withoutNormalizing","fn","shouldMergeNodesRemovePrevNode","prevNode","curNode","Point","compare","point","another","result","Path","path","offset","isAfter","isBefore","equals","isPoint","value","isPlainObject","isPath","transform","op","options","produce","p","affinity","type","text","length","position","Math","min","isAncestor","_objectSpread","_scrubber","undefined","Scrubber","setScrubber","scrubber","stringify","JSON","Text","loose","omitText","obj","rest","_objectWithoutProperties","_excluded","isDeepEqual","isText","isTextList","Array","isArray","every","val","isTextProps","props","matches","key","hasOwnProperty","decorations","node","leaves","leaf","dec","anchor","focus","merge","mergeDecoration","_excluded2","start","end","Range","edges","next","leafEnd","decorationStart","decorationEnd","Object","assign","leafStart","push","middle","before","after","off","slice","currentOffset","index","item","entries","isFirst","isLast","getDefaultInsertLocation","editor","selection","children","Editor","CodepointType","NonBoundaryPairs","CodepointType","L","V","LV","LVT","T","Any","Extend","ZWJ","SpacingMark","Prepend","ExtPict","RI","TextTransforms","delete","editor","options","insertFragment","fragment","insertText","text","Editor","withoutNormalizing","voids","at","getDefaultInsertLocation","Path","isPath","range","Range","isRange","isCollapsed","anchor","end","void","start","startRef","pointRef","endRef","Transforms","startPoint","unref","endPoint","setSelection","focus","elementReadOnly","path","offset","length","apply","type","_objectSpread","GeneralTransforms","NodeTransforms","SelectionTransforms","NodeApi","ElementApi","PathApi","NodeApi","ElementApi","NodeApi","NodeApi","ElementApi","ElementApi","NodeApi","beforeEnd","TextApi","NodeApi","ElementApi","bindFirst","jsx","isDefined","isElement","isDefined","jsx","ElementApi","TextApi","jsx","ElementApi","TextApi","jsx","bindFirst","document","ElementApi","queryNode","queryNode","isDefined","castArray","isDefined","queryNode","castArray","queryNode","entry","node","ElementApi","bindFirst","PathApi","PathApi","NodeApi","NodeApi","bindFirst","TextApi","ElementApi","plugins","plugins","plugins","nanoid","createZustandStore","isDefined","getEditorPlugin","getPlugin","isDefined","createZustandStore","plugins","createEditor","clsx","getEditorPlugin","clsx","getEditorPlugin","getPlugin","getEditorPlugin","React","React","clsx","React","clsx","React","clsx","clsx","PlateElement","React","clsx","React","React","clsx","React","Text","React","clsx","React","React","clsx","PathApi","PathApi","React","useAtomStoreValue","useAtomStoreValue","React","React","React","PathApi","useAtomStoreValue","useAtomStoreValue","PathApi","React","Element","withHOC","React","getPlugin","React","React","atom","atom","React","atom","atom","React","useAtomStoreValue","React","React","getEditorPlugin","React","useStoreAtomValue","React","useStoreAtomValue","useStoreSelect","useStoreValue","useStoreValue","useStoreSelect","useAtomStoreValue","React","useStoreAtomValue","selectAtom","React","selectAtom","useStoreAtomValue","React","isDefined","useEffect","React","React","React","useAtomStoreSet","useAtomStoreValue","getEditorPlugin","useAtomStoreValue","useAtomStoreSet","React","getPlugin","React","React","React","React","React","React","useComposedRef","isDefined","React","useAtomStoreSet","useAtomStoreValue","React","useAtomStoreSet","useAtomStoreValue","React","React","React","useComposedRef","React","isDefined","React","React","React","plugins","React","React"]}