// src/react/LineHeightPlugin.tsx
import { toPlatePlugin } from "@udecode/plate/react";

// src/lib/BaseLineHeightPlugin.ts
import { BaseParagraphPlugin, createSlatePlugin } from "@udecode/plate";
var BaseLineHeightPlugin = createSlatePlugin({
  key: "lineHeight",
  inject: {
    isBlock: true,
    nodeProps: {
      defaultNodeValue: 1.5,
      nodeKey: "lineHeight"
    },
    targetPlugins: [BaseParagraphPlugin.key],
    targetPluginToInject: ({ editor, plugin }) => ({
      parsers: {
        html: {
          deserializer: {
            parse: ({ element }) => {
              if (element.style.lineHeight) {
                return {
                  [editor.getType(plugin)]: element.style.lineHeight
                };
              }
            }
          }
        }
      }
    })
  }
});

// src/lib/transforms/setLineHeight.ts
import {
  getInjectMatch
} from "@udecode/plate";
var setLineHeight = (editor, {
  setNodesOptions,
  value
}) => {
  const { defaultNodeValue, nodeKey } = editor.getInjectProps(BaseLineHeightPlugin);
  const match = getInjectMatch(editor, editor.getPlugin(BaseLineHeightPlugin));
  if (value === defaultNodeValue) {
    editor.tf.unsetNodes(nodeKey, {
      match,
      ...setNodesOptions
    });
  } else {
    editor.tf.setNodes(
      { [nodeKey]: value },
      {
        match,
        ...setNodesOptions
      }
    );
  }
};

// src/react/LineHeightPlugin.tsx
var LineHeightPlugin = toPlatePlugin(BaseLineHeightPlugin);

// src/react/hooks/useLineHeightDropdownMenu.ts
import { useEditorRef, useEditorSelector } from "@udecode/plate/react";
var useLineHeightDropdownMenuState = () => {
  const editor = useEditorRef();
  const { defaultNodeValue, validNodeValues: values = [] } = editor.getInjectProps(BaseLineHeightPlugin);
  const value = useEditorSelector((editor2) => {
    if (editor2.api.isCollapsed()) {
      const entry = editor2.api.block();
      if (entry) {
        return values.find((item) => item === entry[0][BaseLineHeightPlugin.key]) ?? defaultNodeValue;
      }
    }
  }, []);
  return {
    value,
    values
  };
};
var useLineHeightDropdownMenu = ({
  value
}) => {
  const editor = useEditorRef();
  return {
    radioGroupProps: {
      value,
      onValueChange: (newValue) => {
        setLineHeight(editor, {
          value: Number(newValue)
        });
        editor.tf.focus();
      }
    }
  };
};
export {
  LineHeightPlugin,
  useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState
};
//# sourceMappingURL=index.mjs.map