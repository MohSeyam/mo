"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react/index.ts
var react_exports = {};
__export(react_exports, {
  LineHeightPlugin: () => LineHeightPlugin,
  useLineHeightDropdownMenu: () => useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState: () => useLineHeightDropdownMenuState
});
module.exports = __toCommonJS(react_exports);

// src/react/LineHeightPlugin.tsx
var import_react = require("@udecode/plate/react");

// src/lib/BaseLineHeightPlugin.ts
var import_plate = require("@udecode/plate");
var BaseLineHeightPlugin = (0, import_plate.createSlatePlugin)({
  key: "lineHeight",
  inject: {
    isBlock: true,
    nodeProps: {
      defaultNodeValue: 1.5,
      nodeKey: "lineHeight"
    },
    targetPlugins: [import_plate.BaseParagraphPlugin.key],
    targetPluginToInject: ({ editor, plugin }) => ({
      parsers: {
        html: {
          deserializer: {
            parse: ({ element }) => {
              if (element.style.lineHeight) {
                return {
                  [editor.getType(plugin)]: element.style.lineHeight
                };
              }
            }
          }
        }
      }
    })
  }
});

// src/lib/transforms/setLineHeight.ts
var import_plate2 = require("@udecode/plate");
var setLineHeight = (editor, {
  setNodesOptions,
  value
}) => {
  const { defaultNodeValue, nodeKey } = editor.getInjectProps(BaseLineHeightPlugin);
  const match = (0, import_plate2.getInjectMatch)(editor, editor.getPlugin(BaseLineHeightPlugin));
  if (value === defaultNodeValue) {
    editor.tf.unsetNodes(nodeKey, {
      match,
      ...setNodesOptions
    });
  } else {
    editor.tf.setNodes(
      { [nodeKey]: value },
      {
        match,
        ...setNodesOptions
      }
    );
  }
};

// src/react/LineHeightPlugin.tsx
var LineHeightPlugin = (0, import_react.toPlatePlugin)(BaseLineHeightPlugin);

// src/react/hooks/useLineHeightDropdownMenu.ts
var import_react2 = require("@udecode/plate/react");
var useLineHeightDropdownMenuState = () => {
  const editor = (0, import_react2.useEditorRef)();
  const { defaultNodeValue, validNodeValues: values = [] } = editor.getInjectProps(BaseLineHeightPlugin);
  const value = (0, import_react2.useEditorSelector)((editor2) => {
    if (editor2.api.isCollapsed()) {
      const entry = editor2.api.block();
      if (entry) {
        return values.find((item) => item === entry[0][BaseLineHeightPlugin.key]) ?? defaultNodeValue;
      }
    }
  }, []);
  return {
    value,
    values
  };
};
var useLineHeightDropdownMenu = ({
  value
}) => {
  const editor = (0, import_react2.useEditorRef)();
  return {
    radioGroupProps: {
      value,
      onValueChange: (newValue) => {
        setLineHeight(editor, {
          value: Number(newValue)
        });
        editor.tf.focus();
      }
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LineHeightPlugin,
  useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState
});
//# sourceMappingURL=index.js.map