"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  DeletePlugin: () => DeletePlugin,
  SelectOnBackspacePlugin: () => SelectOnBackspacePlugin,
  withSelectOnBackspace: () => withSelectOnBackspace
});
module.exports = __toCommonJS(index_exports);

// src/lib/DeletePlugin.ts
var import_plate = require("@udecode/plate");
var DeletePlugin = (0, import_plate.createTSlatePlugin)({
  key: "delete",
  options: {
    query: {
      allow: [import_plate.BaseParagraphPlugin.key]
    }
  }
}).overrideEditor(({ editor, getOptions, tf: { deleteForward } }) => ({
  transforms: {
    deleteForward(unit) {
      if (!editor.selection) return;
      const { query } = getOptions();
      const isValidNode = !query || (0, import_plate.queryNode)(editor.api.above(), query);
      if (!editor.api.isExpanded() && editor.api.isEmpty(editor.selection, { block: true }) && isValidNode) {
        editor.tf.removeNodes();
      } else {
        deleteForward(unit);
      }
    }
  }
}));

// src/lib/SelectOnBackspacePlugin.ts
var import_plate3 = require("@udecode/plate");

// src/lib/withSelectOnBackspace.ts
var import_plate2 = require("@udecode/plate");
var withSelectOnBackspace = ({
  editor,
  getOptions,
  tf: { deleteBackward }
}) => ({
  transforms: {
    deleteBackward(unit) {
      const { selection } = editor;
      const { query, removeNodeIfEmpty } = getOptions();
      if (unit === "character" && editor.api.isCollapsed()) {
        const pointBefore = editor.api.before(selection, {
          unit
        });
        if (pointBefore) {
          const [prevCell] = editor.api.nodes({
            at: pointBefore,
            match: (node) => (0, import_plate2.queryNode)([node, pointBefore.path], query)
          });
          if (!!prevCell && pointBefore) {
            const point = editor.api.point(selection);
            const selectedNode = import_plate2.NodeApi.get(editor, point.path);
            if (removeNodeIfEmpty && selectedNode && !import_plate2.NodeApi.string(selectedNode)) {
              editor.tf.removeNodes();
            }
            editor.tf.select(pointBefore);
          } else {
            deleteBackward(unit);
          }
        } else {
          deleteBackward(unit);
        }
      } else {
        deleteBackward(unit);
      }
    }
  }
});

// src/lib/SelectOnBackspacePlugin.ts
var SelectOnBackspacePlugin = (0, import_plate3.createTSlatePlugin)({
  key: "selectOnBackspace",
  options: {
    removeNodeIfEmpty: false
  }
}).overrideEditor(withSelectOnBackspace);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DeletePlugin,
  SelectOnBackspacePlugin,
  withSelectOnBackspace
});
//# sourceMappingURL=index.js.map