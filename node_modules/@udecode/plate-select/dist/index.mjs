// src/lib/DeletePlugin.ts
import {
  BaseParagraphPlugin,
  createTSlatePlugin,
  queryNode
} from "@udecode/plate";
var DeletePlugin = createTSlatePlugin({
  key: "delete",
  options: {
    query: {
      allow: [BaseParagraphPlugin.key]
    }
  }
}).overrideEditor(({ editor, getOptions, tf: { deleteForward } }) => ({
  transforms: {
    deleteForward(unit) {
      if (!editor.selection) return;
      const { query } = getOptions();
      const isValidNode = !query || queryNode(editor.api.above(), query);
      if (!editor.api.isExpanded() && editor.api.isEmpty(editor.selection, { block: true }) && isValidNode) {
        editor.tf.removeNodes();
      } else {
        deleteForward(unit);
      }
    }
  }
}));

// src/lib/SelectOnBackspacePlugin.ts
import {
  createTSlatePlugin as createTSlatePlugin2
} from "@udecode/plate";

// src/lib/withSelectOnBackspace.ts
import { NodeApi, queryNode as queryNode2 } from "@udecode/plate";
var withSelectOnBackspace = ({
  editor,
  getOptions,
  tf: { deleteBackward }
}) => ({
  transforms: {
    deleteBackward(unit) {
      const { selection } = editor;
      const { query, removeNodeIfEmpty } = getOptions();
      if (unit === "character" && editor.api.isCollapsed()) {
        const pointBefore = editor.api.before(selection, {
          unit
        });
        if (pointBefore) {
          const [prevCell] = editor.api.nodes({
            at: pointBefore,
            match: (node) => queryNode2([node, pointBefore.path], query)
          });
          if (!!prevCell && pointBefore) {
            const point = editor.api.point(selection);
            const selectedNode = NodeApi.get(editor, point.path);
            if (removeNodeIfEmpty && selectedNode && !NodeApi.string(selectedNode)) {
              editor.tf.removeNodes();
            }
            editor.tf.select(pointBefore);
          } else {
            deleteBackward(unit);
          }
        } else {
          deleteBackward(unit);
        }
      } else {
        deleteBackward(unit);
      }
    }
  }
});

// src/lib/SelectOnBackspacePlugin.ts
var SelectOnBackspacePlugin = createTSlatePlugin2({
  key: "selectOnBackspace",
  options: {
    removeNodeIfEmpty: false
  }
}).overrideEditor(withSelectOnBackspace);
export {
  DeletePlugin,
  SelectOnBackspacePlugin,
  withSelectOnBackspace
};
//# sourceMappingURL=index.mjs.map