{"version":3,"sources":["../src/index.ts","../src/lib/DeletePlugin.ts","../src/lib/SelectOnBackspacePlugin.ts","../src/lib/withSelectOnBackspace.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './lib/index';\n","import {\n  type PluginConfig,\n  type QueryNodeOptions,\n  BaseParagraphPlugin,\n  createTSlatePlugin,\n  queryNode,\n} from '@udecode/plate';\n\nexport type DeleteConfig = PluginConfig<\n  'delete',\n  {\n    query?: QueryNodeOptions;\n  }\n>;\n\nexport const DeletePlugin = createTSlatePlugin<DeleteConfig>({\n  key: 'delete',\n  options: {\n    query: {\n      allow: [BaseParagraphPlugin.key],\n    },\n  },\n}).overrideEditor(({ editor, getOptions, tf: { deleteForward } }) => ({\n  transforms: {\n    deleteForward(unit) {\n      if (!editor.selection) return;\n\n      const { query } = getOptions();\n\n      const isValidNode = !query || queryNode(editor.api.above(), query);\n\n      if (\n        !editor.api.isExpanded() &&\n        editor.api.isEmpty(editor.selection, { block: true }) &&\n        isValidNode\n      ) {\n        // Cursor is in query blocks and line is empty\n        editor.tf.removeNodes();\n      } else {\n        // When the line is not empty or other conditions are not met, fall back to default behavior\n        deleteForward(unit);\n      }\n    },\n  },\n}));\n","import {\n  type PluginConfig,\n  type QueryNodeOptions,\n  createTSlatePlugin,\n} from '@udecode/plate';\n\nimport { withSelectOnBackspace } from './withSelectOnBackspace';\n\nexport type SelectOnBackspaceConfig = PluginConfig<\n  'selectOnBackspace',\n  {\n    query?: QueryNodeOptions;\n    removeNodeIfEmpty?: boolean;\n  }\n>;\n\n/** @see {@link withSelectOnBackspace} */\nexport const SelectOnBackspacePlugin =\n  createTSlatePlugin<SelectOnBackspaceConfig>({\n    key: 'selectOnBackspace',\n    options: {\n      removeNodeIfEmpty: false,\n    },\n  }).overrideEditor(withSelectOnBackspace);\n","import { type OverrideEditor, NodeApi, queryNode } from '@udecode/plate';\n\nimport type { SelectOnBackspaceConfig } from './SelectOnBackspacePlugin';\n\n/** Set a list of element types to select on backspace */\nexport const withSelectOnBackspace: OverrideEditor<SelectOnBackspaceConfig> = ({\n  editor,\n  getOptions,\n  tf: { deleteBackward },\n}) => ({\n  transforms: {\n    deleteBackward(unit) {\n      const { selection } = editor;\n      const { query, removeNodeIfEmpty } = getOptions();\n\n      if (unit === 'character' && editor.api.isCollapsed()) {\n        const pointBefore = editor.api.before(selection!, {\n          unit: unit,\n        });\n\n        if (pointBefore) {\n          const [prevCell] = editor.api.nodes({\n            at: pointBefore,\n            match: (node) => queryNode([node, pointBefore.path], query),\n          });\n\n          if (!!prevCell && pointBefore) {\n            const point = editor.api.point(selection!)!;\n            const selectedNode = NodeApi.get(editor, point.path);\n\n            if (\n              removeNodeIfEmpty &&\n              selectedNode &&\n              !NodeApi.string(selectedNode as any)\n            ) {\n              // remove node if empty\n              editor.tf.removeNodes();\n            }\n\n            // don't delete image, set selection there\n            editor.tf.select(pointBefore);\n          } else {\n            deleteBackward(unit);\n          }\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        deleteBackward(unit);\n      }\n    },\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAMO;AASA,IAAM,mBAAe,iCAAiC;AAAA,EAC3D,KAAK;AAAA,EACL,SAAS;AAAA,IACP,OAAO;AAAA,MACL,OAAO,CAAC,iCAAoB,GAAG;AAAA,IACjC;AAAA,EACF;AACF,CAAC,EAAE,eAAe,CAAC,EAAE,QAAQ,YAAY,IAAI,EAAE,cAAc,EAAE,OAAO;AAAA,EACpE,YAAY;AAAA,IACV,cAAc,MAAM;AAClB,UAAI,CAAC,OAAO,UAAW;AAEvB,YAAM,EAAE,MAAM,IAAI,WAAW;AAE7B,YAAM,cAAc,CAAC,aAAS,wBAAU,OAAO,IAAI,MAAM,GAAG,KAAK;AAEjE,UACE,CAAC,OAAO,IAAI,WAAW,KACvB,OAAO,IAAI,QAAQ,OAAO,WAAW,EAAE,OAAO,KAAK,CAAC,KACpD,aACA;AAEA,eAAO,GAAG,YAAY;AAAA,MACxB,OAAO;AAEL,sBAAc,IAAI;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AACF,EAAE;;;AC5CF,IAAAA,gBAIO;;;ACJP,IAAAC,gBAAwD;AAKjD,IAAM,wBAAiE,CAAC;AAAA,EAC7E;AAAA,EACA;AAAA,EACA,IAAI,EAAE,eAAe;AACvB,OAAO;AAAA,EACL,YAAY;AAAA,IACV,eAAe,MAAM;AACnB,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,EAAE,OAAO,kBAAkB,IAAI,WAAW;AAEhD,UAAI,SAAS,eAAe,OAAO,IAAI,YAAY,GAAG;AACpD,cAAM,cAAc,OAAO,IAAI,OAAO,WAAY;AAAA,UAChD;AAAA,QACF,CAAC;AAED,YAAI,aAAa;AACf,gBAAM,CAAC,QAAQ,IAAI,OAAO,IAAI,MAAM;AAAA,YAClC,IAAI;AAAA,YACJ,OAAO,CAAC,aAAS,yBAAU,CAAC,MAAM,YAAY,IAAI,GAAG,KAAK;AAAA,UAC5D,CAAC;AAED,cAAI,CAAC,CAAC,YAAY,aAAa;AAC7B,kBAAM,QAAQ,OAAO,IAAI,MAAM,SAAU;AACzC,kBAAM,eAAe,sBAAQ,IAAI,QAAQ,MAAM,IAAI;AAEnD,gBACE,qBACA,gBACA,CAAC,sBAAQ,OAAO,YAAmB,GACnC;AAEA,qBAAO,GAAG,YAAY;AAAA,YACxB;AAGA,mBAAO,GAAG,OAAO,WAAW;AAAA,UAC9B,OAAO;AACL,2BAAe,IAAI;AAAA,UACrB;AAAA,QACF,OAAO;AACL,yBAAe,IAAI;AAAA,QACrB;AAAA,MACF,OAAO;AACL,uBAAe,IAAI;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AACF;;;ADnCO,IAAM,8BACX,kCAA4C;AAAA,EAC1C,KAAK;AAAA,EACL,SAAS;AAAA,IACP,mBAAmB;AAAA,EACrB;AACF,CAAC,EAAE,eAAe,qBAAqB;","names":["import_plate","import_plate"]}