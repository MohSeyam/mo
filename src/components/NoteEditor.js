import React, { useState, useEffect, useContext, useRef } from 'react';
import TagInput from './components/TagInput';
import ReactMde from 'react-mde';
import Showdown from 'showdown';
import 'react-mde/lib/styles/css/react-mde-all.css';
import { AppContext } from '../components/App';

function NoteEditor({ note, taskDescription, onSave, onDelete, currentIndex, notes, onNavigate, allTasks }) {
    const { lang, translations, setModal, showToast } = useContext(AppContext);
    const t = translations[lang];
    const [title, setTitle] = useState(note.title || '');
    const [tags, setTags] = useState(note.keywords || []);
    const [content, setContent] = useState(note.content || '');
    const [template, setTemplate] = useState('');
    const [selectedTaskId, setSelectedTaskId] = useState(note.taskData?.id || '');
    const [selectedTab, setSelectedTab] = useState('write');
    const fileInputRef = useRef();
    const converter = new Showdown.Converter({tables: true, simplifiedAutoLink: true});
    useEffect(() => {
        if (!note.title && template) {
            if (template === 'video') {
                setTitle('ŸÖŸÑÿÆÿµ ŸÅŸäÿØŸäŸà');
                setContent('ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:\n- \nŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ ÿ¨ÿØŸäÿØÿ©:\n- \nÿ£ÿ≥ÿ¶ŸÑÿ© ŸÑŸÑŸÖÿ™ÿßÿ®ÿπÿ©:\n- ');
            } else if (template === 'tool') {
                setTitle('ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ÿØÿßÿ©');
                setContent('ÿßŸÑÿ∫ÿ±ÿ∂ ŸÖŸÜ ÿßŸÑÿ£ÿØÿßÿ©:\n\nÿ£ŸáŸÖ ÿßŸÑÿ£ŸàÿßŸÖÿ±:\n\nÿ®ÿØÿßÿ¶ŸÑ:');
            }
        }
    }, [template]);
    useEffect(() => {
        const handleKeyDown = (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                handleSave();
            } else if (e.key === 'Escape') {
                setModal({ isOpen: false, content: null });
            } else if (e.key === 'ArrowRight') {
                if (onNavigate && currentIndex < notes.length - 1) onNavigate(currentIndex + 1);
            } else if (e.key === 'ArrowLeft') {
                if (onNavigate && currentIndex > 0) onNavigate(currentIndex - 1);
            }
        };
        window.addEventListener('keydown', handleKeyDown);
        return () => window.removeEventListener('keydown', handleKeyDown);
    }, [title, content, tags, template, currentIndex, notes, onNavigate]);
    const handleAddTag = (e) => {
        if (e.key === 'Enter' && e.target.value.trim()) {
            if (!tags.includes(e.target.value.trim())) setTags([...tags, e.target.value.trim()]);
            e.target.value = '';
        }
    };
    const handleRemoveTag = (tag) => {
        setTags(tags.filter(t => t !== tag));
    };
    const handleSave = () => {
        if (!title.trim()) {
            showToast(t.titleRequired, 'error');
            return;
        }
        if (!content.trim()) {
            showToast(t.contentRequired, 'error');
            return;
        }
        const selectedTask = allTasks.find(t => t.id === selectedTaskId);
        onSave({ title, content, keywords: tags, taskId: selectedTaskId, taskData: selectedTask });
    };
    // ÿ≤ÿ± ÿ±ŸÅÿπ ÿµŸàÿ±ÿ©
    const handleImageUpload = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = () => {
            const imageMarkdown = `![ÿµŸàÿ±ÿ©](${reader.result})`;
            setContent(prev => {
                const textarea = document.querySelector('.mde-text');
                const pos = textarea ? textarea.selectionStart : prev.length;
                return prev.slice(0, pos) + imageMarkdown + prev.slice(pos);
            });
        };
        reader.readAsDataURL(file);
    };
    // --- ŸÇŸàÿßŸÑÿ® ÿ¨ÿßŸáÿ≤ÿ© ---
    const templates = [
        // ŸÇŸàÿßŸÑÿ® ÿ≥Ÿäÿ®ÿ±ÿßŸÜŸäÿ©
        { label: 'ÿ™ŸÇÿ±Ÿäÿ± ÿ≠ÿßÿØÿ´ ÿ£ŸÖŸÜŸä', content: `# ÿ™ŸÇÿ±Ÿäÿ± ÿ≠ÿßÿØÿ´ ÿ£ŸÖŸÜŸä\n\n**ÿßŸÑÿ™ÿßÿ±ŸäÿÆ:** \n**ÿßŸÑŸÖŸàŸÇÿπ:** \n**ÿßŸÑŸàÿµŸÅ:** \n**ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÖÿ™ÿÆÿ∞ÿ©:** \n**ÿßŸÑÿ™ŸàÿµŸäÿßÿ™:** \n` },
        { label: 'ÿ™ÿ≠ŸÑŸäŸÑ ÿ´ÿ∫ÿ±ÿ©', content: `# ÿ™ÿ≠ŸÑŸäŸÑ ÿ´ÿ∫ÿ±ÿ©\n\n**ÿßÿ≥ŸÖ ÿßŸÑÿ´ÿ∫ÿ±ÿ©:** \n**ÿßŸÑŸàÿµŸÅ:** \n**ÿ™ÿ£ÿ´Ÿäÿ±Ÿáÿß:** \n**ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿ∫ŸÑÿßŸÑ:** \n**ÿ∑ÿ±ŸÇ ÿßŸÑÿ≠ŸÖÿßŸäÿ©:** \n` },
        { label: 'ŸÖÿ∞ŸÉÿ±ÿ© ÿßÿÆÿ™ÿ®ÿßÿ± ÿßÿÆÿ™ÿ±ÿßŸÇ', content: `# ŸÖÿ∞ŸÉÿ±ÿ© ÿßÿÆÿ™ÿ®ÿßÿ± ÿßÿÆÿ™ÿ±ÿßŸÇ\n\n**ÿßŸÑŸÜÿ∑ÿßŸÇ:** \n**ÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©:** \n**ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨:** \n**ÿßŸÑÿ´ÿ∫ÿ±ÿßÿ™ ÿßŸÑŸÖŸÉÿ™ÿ¥ŸÅÿ©:** \n**ÿßŸÑÿ™ŸàÿµŸäÿßÿ™:** \n` },
        { label: 'ŸÖŸÑÿÆÿµ ÿØŸàÿ±ÿ©/ÿ¥ŸáÿßÿØÿ©', content: `# ŸÖŸÑÿÆÿµ ÿØŸàÿ±ÿ©/ÿ¥ŸáÿßÿØÿ©\n\n**ÿßÿ≥ŸÖ ÿßŸÑÿØŸàÿ±ÿ©/ÿßŸÑÿ¥ŸáÿßÿØÿ©:** \n**ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä:** \n**ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÉÿ™ÿ≥ÿ®ÿ©:** \n**ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:** \n` },
        { label: 'ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ£ÿØÿßÿ© ÿ£ŸÖŸÜŸäÿ©', content: `# ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ£ÿØÿßÿ© ÿ£ŸÖŸÜŸäÿ©\n\n**ÿßÿ≥ŸÖ ÿßŸÑÿ£ÿØÿßÿ©:** \n**ÿßŸÑÿ∫ÿ±ÿ∂:** \n**ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™:** \n**ÿßŸÑÿπŸäŸàÿ®:** \n**ÿ£ŸàÿßŸÖÿ± ŸÖŸáŸÖÿ©:** \n` },
        { label: 'ÿÆÿ∑ÿ© ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÑŸÑÿ≠ŸàÿßÿØÿ´', content: `# ÿÆÿ∑ÿ© ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÑŸÑÿ≠ŸàÿßÿØÿ´\n\n1. ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±\n2. ÿßŸÑŸÉÿ¥ŸÅ ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ\n3. ÿßŸÑÿßÿ≠ÿ™Ÿàÿßÿ°\n4. ÿßŸÑÿßÿ≥ÿ™ÿ¶ÿµÿßŸÑ\n5. ÿßŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ©\n6. ÿßŸÑÿØÿ±Ÿàÿ≥ ÿßŸÑŸÖÿ≥ÿ™ŸÅÿßÿØÿ©\n` },
        { label: 'ŸÖÿ∞ŸÉÿ±ÿ© ÿ™ÿ≠ŸÑŸäŸÑ ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ÿÆÿ®Ÿäÿ´ÿ©', content: `# ŸÖÿ∞ŸÉÿ±ÿ© ÿ™ÿ≠ŸÑŸäŸÑ ÿ®ÿ±ŸÖÿ¨Ÿäÿ© ÿÆÿ®Ÿäÿ´ÿ©\n\n**ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÑŸÅ:** \n**ŸÜŸàÿπ ÿßŸÑÿ®ÿ±ŸÖÿ¨Ÿäÿ©:** \n**ÿ≥ŸÑŸàŸÉŸáÿß:** \n**ÿ∑ÿ±ŸÇ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±:** \n**ÿ∑ÿ±ŸÇ ÿßŸÑÿ≠ŸÖÿßŸäÿ©:** \n` },
        { label: 'ŸÖÿÆÿ∑ÿ∑ ÿßÿÆÿ™ÿ®ÿßÿ± ÿßÿ¨ÿ™ŸÖÿßÿπŸä', content: `# ŸÖÿÆÿ∑ÿ∑ ÿßÿÆÿ™ÿ®ÿßÿ± ÿßÿ¨ÿ™ŸÖÿßÿπŸä\n\n**ÿßŸÑŸáÿØŸÅ:** \n**ÿßŸÑÿ≥ŸäŸÜÿßÿ±ŸäŸàŸáÿßÿ™:** \n**ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©:** \n**ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:** \n` },
        { label: 'ŸÖÿ∞ŸÉÿ±ÿ© ÿ™ÿ≠ŸÑŸäŸÑ ÿ¥ÿ®ŸÉÿ©', content: `# ŸÖÿ∞ŸÉÿ±ÿ© ÿ™ÿ≠ŸÑŸäŸÑ ÿ¥ÿ®ŸÉÿ©\n\n**ÿßŸÑŸÜÿ∑ÿßŸÇ:** \n**ÿßŸÑÿ£ÿØŸàÿßÿ™:** \n**ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨:** \n**ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:** \n` },
        { label: 'ŸÖÿ∞ŸÉÿ±ÿ© ŸÖÿ±ÿßÿ¨ÿπÿ© ŸÉŸàÿØ', content: `# ŸÖÿ∞ŸÉÿ±ÿ© ŸÖÿ±ÿßÿ¨ÿπÿ© ŸÉŸàÿØ\n\n**ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ:** \n**ÿßŸÑŸÜÿ∑ÿßŸÇ:** \n**ÿßŸÑÿ´ÿ∫ÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ÿ™ŸÖŸÑÿ©:** \n**ÿßŸÑÿ™ŸàÿµŸäÿßÿ™:** \n` },
        // ŸÇŸàÿßŸÑÿ® ÿ≥Ÿäÿßÿ≥ÿßÿ™ ÿ£ŸÖŸÜŸäÿ©
        { label: 'ÿ≥Ÿäÿßÿ≥ÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±', content: `# ÿ≥Ÿäÿßÿ≥ÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±\n\n- Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ™ŸÉŸàŸÜ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖŸÜ 12 ÿ≠ÿ±ŸÅŸãÿß ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.\n- Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ≠ÿ±ŸÅ ŸÉÿ®Ÿäÿ±ÿ© Ÿàÿµÿ∫Ÿäÿ±ÿ© Ÿàÿ£ÿ±ŸÇÿßŸÖ Ÿàÿ±ŸÖŸàÿ≤.\n- ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÉŸÑ 90 ŸäŸàŸÖŸãÿß.\n- ÿπÿØŸÖ ŸÖÿ¥ÿßÿ±ŸÉÿ© ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÖÿπ ÿ£Ÿä ÿ¥ÿÆÿµ.\n` },
        { label: 'ÿ≥Ÿäÿßÿ≥ÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä', content: `# ÿ≥Ÿäÿßÿ≥ÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä\n\n- ŸäŸÖŸÜÿπ ŸÅÿ™ÿ≠ ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑŸÖÿ¥ÿ®ŸàŸáÿ©.\n- ŸäŸÖŸÜÿπ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖÿ±ŸÅŸÇÿßÿ™ ŸÖŸÜ ŸÖÿµÿßÿØÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ´ŸàŸÇÿ©.\n- ÿßŸÑÿ•ÿ®ŸÑÿßÿ∫ ÿπŸÜ ÿ£Ÿä ÿ±ÿ≥ÿßÿ¶ŸÑ ÿ™ÿµŸäÿØ.\n` },
        { label: 'ÿ≥Ÿäÿßÿ≥ÿ© ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÖÿ≠ŸÖŸàŸÑÿ©', content: `# ÿ≥Ÿäÿßÿ≥ÿ© ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÖÿ≠ŸÖŸàŸÑÿ©\n\n- ÿ™ŸÅÿπŸäŸÑ ÿßŸÑŸÇŸÅŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä ŸÑŸÑÿ¨Ÿáÿßÿ≤.\n- ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ™ÿ¥ŸÅŸäÿ±.\n- ÿπÿØŸÖ ÿ™ÿ´ÿ®Ÿäÿ™ ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ ÿ∫Ÿäÿ± ŸÖŸàÿ´ŸàŸÇÿ©.\n- ÿßŸÑÿ•ÿ®ŸÑÿßÿ∫ ÿπŸÜ ŸÅŸÇÿØÿßŸÜ ÿßŸÑÿ¨Ÿáÿßÿ≤ ŸÅŸàÿ±Ÿãÿß.\n` },
        { label: 'ÿ≥Ÿäÿßÿ≥ÿ© ÿßŸÑŸàÿµŸàŸÑ ŸÑŸÑÿ£ŸÜÿ∏ŸÖÿ©', content: `# ÿ≥Ÿäÿßÿ≥ÿ© ÿßŸÑŸàÿµŸàŸÑ ŸÑŸÑÿ£ŸÜÿ∏ŸÖÿ©\n\n- ŸÖŸÜÿ≠ ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ≠ÿßÿ¨ÿ© ŸÅŸÇÿ∑.\n- ŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿ®ÿ¥ŸÉŸÑ ÿØŸàÿ±Ÿä.\n- ÿ•ŸÑÿ∫ÿßÿ° ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ ÿßŸÑŸÖŸÜÿ™ŸáŸäÿ© ÿÆÿØŸÖÿ™ŸáŸÖ ŸÅŸàÿ±Ÿãÿß.\n` },
        // ŸÇŸàÿßŸÑÿ® ŸÖŸáÿßÿ±ÿßÿ™ ŸÜÿßÿπŸÖÿ©
        { label: 'ÿ™ŸÇŸäŸäŸÖ ŸÖŸáÿßÿ±ÿ© ÿßŸÑÿ™ŸàÿßÿµŸÑ', content: `# ÿ™ŸÇŸäŸäŸÖ ŸÖŸáÿßÿ±ÿ© ÿßŸÑÿ™ŸàÿßÿµŸÑ\n\n**ÿßŸÑŸÖŸàŸÇŸÅ:** \n**ŸÖÿß ÿßŸÑÿ∞Ÿä ÿ≥ÿßÿ± ÿ®ÿ¥ŸÉŸÑ ÿ¨ŸäÿØÿü** \n**ŸÖÿß ÿßŸÑÿ∞Ÿä ŸäŸÖŸÉŸÜ ÿ™ÿ≠ÿ≥ŸäŸÜŸáÿü** \n**ÿÆÿ∑ÿ© ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ:** \n` },
        { label: 'ÿÆÿ∑ÿ© ÿ™ÿ∑ŸàŸäÿ± ŸÖŸáÿßÿ±ÿ© ÿßŸÑŸÇŸäÿßÿØÿ©', content: `# ÿÆÿ∑ÿ© ÿ™ÿ∑ŸàŸäÿ± ŸÖŸáÿßÿ±ÿ© ÿßŸÑŸÇŸäÿßÿØÿ©\n\n- ŸÜŸÇÿßÿ∑ ÿßŸÑŸÇŸàÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:\n- ŸÜŸÇÿßÿ∑ ÿßŸÑÿ∂ÿπŸÅ:\n- ÿ£ŸáÿØÿßŸÅ ÿßŸÑÿ™ÿ∑ŸàŸäÿ±:\n- ÿÆÿ∑Ÿàÿßÿ™ ÿπŸÖŸÑŸäÿ©:\n` },
        { label: 'ŸÖÿ∞ŸÉÿ±ÿ© ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸàŸÇÿ™', content: `# ŸÖÿ∞ŸÉÿ±ÿ© ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸàŸÇÿ™\n\n**ÿßŸÑŸÖŸáÿßŸÖ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:** \n**ÿßŸÑÿ£ŸàŸÑŸàŸäÿßÿ™:** \n**ÿßŸÑÿπŸÇÿ®ÿßÿ™:** \n**ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ:** \n` },
        { label: 'ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿπŸÖŸÑ ÿßŸÑÿ¨ŸÖÿßÿπŸä', content: `# ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿπŸÖŸÑ ÿßŸÑÿ¨ŸÖÿßÿπŸä\n\n**ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ:** \n**ÿØŸàÿ±ŸÉ:** \n**ŸÖÿß ÿßŸÑÿ∞Ÿä ŸÜÿ¨ÿ≠ÿü** \n**ŸÖÿß ÿßŸÑÿ∞Ÿä ŸäŸÖŸÉŸÜ ÿ™ÿ≠ÿ≥ŸäŸÜŸáÿü** \n` },
        { label: 'ÿÆÿ∑ÿ© ÿ™ÿ∑ŸàŸäÿ± ŸÖŸáÿßÿ±ÿ© ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™', content: `# ÿÆÿ∑ÿ© ÿ™ÿ∑ŸàŸäÿ± ŸÖŸáÿßÿ±ÿ© ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™\n\n- ÿßŸÑŸÖÿ¥ŸÉŸÑÿ©:\n- ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ:\n- ÿßŸÑÿ≠ŸÑŸàŸÑ ÿßŸÑŸÖŸÇÿ™ÿ±ÿ≠ÿ©:\n- ÿßŸÑÿÆÿ∑ÿ© ÿßŸÑÿ™ŸÜŸÅŸäÿ∞Ÿäÿ©:\n` },
    ];
    // ÿ•ÿØÿ±ÿßÿ¨ ÿßŸÑŸÇÿßŸÑÿ® ŸÅŸä ŸÖŸÉÿßŸÜ ÿßŸÑŸÖÿ§ÿ¥ÿ± ÿ£Ÿà ÿßÿ≥ÿ™ÿ®ÿØÿßŸÑ ÿßŸÑŸÜÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÅÿßÿ±ÿ∫Ÿãÿß
    const insertTemplate = (templateContent) => {
        setContent(prev => {
            const textarea = document.querySelector('.mde-text');
            if (textarea && textarea.selectionStart !== undefined) {
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                return prev.slice(0, start) + templateContent + prev.slice(end);
            }
            return templateContent;
        });
    };
    // ÿ£ŸÖÿ± ŸÖÿÆÿµÿµ ŸÑŸÑÿ≤ÿ±
    const customCommands = [
        {
            name: 'image',
            icon: () => <span role="img" aria-label="ÿµŸàÿ±ÿ©">üñºÔ∏è</span>,
            execute: () => fileInputRef.current.click()
        }
    ];
    return (
        <>
            <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4 flex items-center justify-between">
                <div>
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">{t.editNote}</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">{t.noteOnTask} "{taskDescription}"</p>
                </div>
                <div className="flex gap-2">
                    <button
                        onClick={() => onNavigate && currentIndex > 0 && onNavigate(currentIndex - 1)}
                        disabled={!onNavigate || currentIndex === 0}
                        className="px-2 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 disabled:opacity-50"
                        title={lang === 'ar' ? 'ÿßŸÑÿ≥ÿßÿ®ŸÇ' : 'Previous'}
                    >
                        ‚óÄ
                    </button>
                    <button
                        onClick={() => onNavigate && currentIndex < notes.length - 1 && onNavigate(currentIndex + 1)}
                        disabled={!onNavigate || currentIndex === notes.length - 1}
                        className="px-2 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 disabled:opacity-50"
                        title={lang === 'ar' ? 'ÿßŸÑÿ™ÿßŸÑŸä' : 'Next'}
                    >
                        ‚ñ∂
                    </button>
                </div>
            </div>
            <div className="px-4 sm:px-6 py-4 space-y-4 max-h-[60vh] overflow-y-auto">
                <div>
                    <label htmlFor="note-title-editor" className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t.noteTitle}</label>
                    <input id="note-title-editor" type="text" value={title} onChange={e => setTitle(e.target.value)} className="mt-1 w-full p-2 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>
                {/* Ÿàÿßÿ¨Ÿáÿ© ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ™ÿßÿ¨ÿßÿ™ ÿßŸÑÿ≥ÿ±Ÿäÿπ */}
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{t.keywords}</label>
                    <div className="flex flex-wrap gap-2 mb-2">
                        {tags.map(tag => (
                            <span key={tag} className="inline-flex items-center bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">
                                {tag}
                                <button type="button" className="ml-1 text-blue-500 hover:text-red-500" onClick={() => handleRemoveTag(tag)}>√ó</button>
                            </span>
                        ))}
                    </div>
                    <input type="text" placeholder={lang === 'ar' ? 'ÿ£ÿ∂ŸÅ ÿ™ÿßÿ¨Ÿãÿß ÿ¨ÿØŸäÿØŸãÿß' : 'Add new tag'} onKeyDown={handleAddTag} className="p-2 border rounded-md w-full dark:bg-gray-700" />
                </div>
                {/* ŸÇÿßÿ¶ŸÖÿ© ÿ±ÿ®ÿ∑ ÿßŸÑŸÖŸáŸÖÿ© */}
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t.task || 'ÿßŸÑŸÖŸáŸÖÿ© ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ©'}</label>
                    <select value={selectedTaskId} onChange={e => setSelectedTaskId(e.target.value)} className="w-full p-2 border rounded dark:bg-gray-700">
                        {allTasks.map(task => (
                            <option key={task.id} value={task.id}>{task.title?.[lang] || task.id}</option>
                        ))}
                    </select>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t.noteContent}</label>
                    <ReactMde
                        value={content}
                        onChange={setContent}
                        selectedTab={selectedTab}
                        onTabChange={setSelectedTab}
                        generateMarkdownPreview={markdown => Promise.resolve(converter.makeHtml(markdown))}
                        childProps={{
                            writeButton: { 'aria-label': 'Write' },
                            previewButton: { 'aria-label': 'Preview' }
                        }}
                        l18n={{
                            write: lang === 'ar' ? 'ŸÉÿ™ÿßÿ®ÿ©' : 'Write',
                            preview: lang === 'ar' ? 'ŸÖÿπÿßŸäŸÜÿ©' : 'Preview'
                        }}
                        minEditorHeight={120}
                        minPreviewHeight={120}
                        style={{ direction: lang === 'ar' ? 'rtl' : 'ltr' }}
                        toolbarCommands={[
                            ['bold', 'italic', 'strikethrough', 'link', 'image'],
                        ]}
                        commands={{
                            image: customCommands[0]
                        }}
                    />
                    <input
                        type="file"
                        accept="image/*"
                        ref={fileInputRef}
                        style={{ display: 'none' }}
                        onChange={handleImageUpload}
                    />
                </div>
            </div>
            <div className="bg-gray-50 dark:bg-gray-800/50 px-4 py-3 sm:px-6 flex flex-row-reverse">
                <button onClick={handleSave} type="button" className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                    {t.saveNote}
                </button>
                <button onClick={() => setModal({isOpen: false, content: null})} type="button" className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
                    {t.cancel}
                </button>
                 <button onClick={onDelete} type="button" className="mr-auto px-4 py-2 text-sm font-medium text-red-600 hover:text-red-800">
                    {t.deleteNote}
                </button>
            </div>
            {!note.title && (
                <div className="mb-2">
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">ÿßÿÆÿ™ÿ± ŸÇÿßŸÑÿ®:</label>
                    <select value={template} onChange={e => setTemplate(e.target.value)} className="mt-1 w-full p-2 border rounded">
                        <option value="">ÿ®ÿØŸàŸÜ ŸÇÿßŸÑÿ®</option>
                        <option value="video">ŸÖŸÑÿÆÿµ ŸÅŸäÿØŸäŸà</option>
                        <option value="tool">ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ÿØÿßÿ©</option>
                    </select>
                </div>
            )}
            <div className="mb-2 flex flex-wrap gap-2">
                {templates.map((tpl, idx) => (
                    <button
                        key={idx}
                        type="button"
                        className="px-2 py-1 rounded bg-blue-100 hover:bg-blue-200 text-blue-800 text-xs border border-blue-200"
                        style={{direction: lang === 'ar' ? 'rtl' : 'ltr'}}
                        onClick={() => insertTemplate(tpl.content)}
                        title={tpl.label}
                    >
                        {tpl.label}
                    </button>
                ))}
            </div>
        </>
    );
}

export default NoteEditor;